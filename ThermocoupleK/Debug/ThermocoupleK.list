
ThermocoupleK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007484  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  08007598  08007598  00017598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a7c  08007a7c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007a7c  08007a7c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a7c  08007a7c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a7c  08007a7c  00017a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a80  08007a80  00017a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  200001e0  08007c64  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08007c64  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d77  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bf6  00000000  00000000  00027f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  00029b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000830  00000000  00000000  0002a480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018004  00000000  00000000  0002acb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a509  00000000  00000000  00042cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008507e  00000000  00000000  0004d1bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d223b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000380c  00000000  00000000  000d228c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800757c 	.word	0x0800757c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800757c 	.word	0x0800757c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 0308 	add.w	r3, r7, #8
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_GPIO_Init+0x74>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a16      	ldr	r2, [pc, #88]	; (8000c4c <MX_GPIO_Init+0x74>)
 8000bf2:	f043 0320 	orr.w	r3, r3, #32
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_GPIO_Init+0x74>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f003 0320 	and.w	r3, r3, #32
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_GPIO_Init+0x74>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a10      	ldr	r2, [pc, #64]	; (8000c4c <MX_GPIO_Init+0x74>)
 8000c0a:	f043 0304 	orr.w	r3, r3, #4
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_GPIO_Init+0x74>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0304 	and.w	r3, r3, #4
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2110      	movs	r1, #16
 8000c20:	480b      	ldr	r0, [pc, #44]	; (8000c50 <MX_GPIO_Init+0x78>)
 8000c22:	f000 fe2f 	bl	8001884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c26:	2310      	movs	r3, #16
 8000c28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2302      	movs	r3, #2
 8000c34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4804      	ldr	r0, [pc, #16]	; (8000c50 <MX_GPIO_Init+0x78>)
 8000c3e:	f000 fc9d 	bl	800157c <HAL_GPIO_Init>

}
 8000c42:	bf00      	nop
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40010800 	.word	0x40010800

08000c54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c58:	f000 fb26 	bl	80012a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c5c:	f000 f842 	bl	8000ce4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c60:	f7ff ffba 	bl	8000bd8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c64:	f000 f8e4 	bl	8000e30 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000c68:	f000 fa82 	bl	8001170 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // read data on chip
	  answer = max6675ReadReg(&reg);
 8000c6c:	4816      	ldr	r0, [pc, #88]	; (8000cc8 <main+0x74>)
 8000c6e:	f000 f883 	bl	8000d78 <max6675ReadReg>
 8000c72:	4603      	mov	r3, r0
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <main+0x78>)
 8000c78:	701a      	strb	r2, [r3, #0]

	  if (answer == MAX6675_OK){
 8000c7a:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <main+0x78>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d113      	bne.n	8000caa <main+0x56>
		  // transform signal to temperature
		  temper = max6675Temp(reg);
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <main+0x74>)
 8000c84:	881b      	ldrh	r3, [r3, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f8b6 	bl	8000df8 <max6675Temp>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	4a10      	ldr	r2, [pc, #64]	; (8000cd0 <main+0x7c>)
 8000c90:	6013      	str	r3, [r2, #0]

		  //Format text
		  sprintf((char*)string, "T = %0.2f\n\r", temper);
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <main+0x7c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fbc6 	bl	8000428 <__aeabi_f2d>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	490c      	ldr	r1, [pc, #48]	; (8000cd4 <main+0x80>)
 8000ca2:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <main+0x84>)
 8000ca4:	f002 feac 	bl	8003a00 <siprintf>
 8000ca8:	e003      	b.n	8000cb2 <main+0x5e>
	  }
	  else{
		  sprintf((char*)string, "T = error\n\r");
 8000caa:	490c      	ldr	r1, [pc, #48]	; (8000cdc <main+0x88>)
 8000cac:	480a      	ldr	r0, [pc, #40]	; (8000cd8 <main+0x84>)
 8000cae:	f002 fea7 	bl	8003a00 <siprintf>
	  }

	  // output to port
	  HAL_UART_Transmit(&huart1, string, 15, 100);
 8000cb2:	2364      	movs	r3, #100	; 0x64
 8000cb4:	220f      	movs	r2, #15
 8000cb6:	4908      	ldr	r1, [pc, #32]	; (8000cd8 <main+0x84>)
 8000cb8:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <main+0x8c>)
 8000cba:	f001 fe92 	bl	80029e2 <HAL_UART_Transmit>

	  // Pause
	  HAL_Delay(1000);
 8000cbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cc2:	f000 fb53 	bl	800136c <HAL_Delay>
	  answer = max6675ReadReg(&reg);
 8000cc6:	e7d1      	b.n	8000c6c <main+0x18>
 8000cc8:	200001fe 	.word	0x200001fe
 8000ccc:	200001fc 	.word	0x200001fc
 8000cd0:	20000200 	.word	0x20000200
 8000cd4:	08007598 	.word	0x08007598
 8000cd8:	20000204 	.word	0x20000204
 8000cdc:	080075a4 	.word	0x080075a4
 8000ce0:	20000270 	.word	0x20000270

08000ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b090      	sub	sp, #64	; 0x40
 8000ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cea:	f107 0318 	add.w	r3, r7, #24
 8000cee:	2228      	movs	r2, #40	; 0x28
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f002 f80a 	bl	8002d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
 8000d04:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d06:	2301      	movs	r3, #1
 8000d08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d14:	2301      	movs	r3, #1
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d22:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d26:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d28:	f107 0318 	add.w	r3, r7, #24
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 fdc1 	bl	80018b4 <HAL_RCC_OscConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d38:	f000 f819 	bl	8000d6e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3c:	230f      	movs	r3, #15
 8000d3e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d40:	2302      	movs	r3, #2
 8000d42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	2102      	movs	r1, #2
 8000d56:	4618      	mov	r0, r3
 8000d58:	f001 f82e 	bl	8001db8 <HAL_RCC_ClockConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d62:	f000 f804 	bl	8000d6e <Error_Handler>
  }
}
 8000d66:	bf00      	nop
 8000d68:	3740      	adds	r7, #64	; 0x40
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d72:	b672      	cpsid	i
}
 8000d74:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <Error_Handler+0x8>

08000d78 <max6675ReadReg>:
#include "spi.h"
#include "gpio.h"


// Functions for return value of microchip
uint8_t max6675ReadReg(uint16_t *reg){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

	// return value of function HAL
	 HAL_StatusTypeDef hal_answer = HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	73fb      	strb	r3, [r7, #15]

	// Array for received data
	uint8_t temp[2] = {0};
 8000d84:	2300      	movs	r3, #0
 8000d86:	81bb      	strh	r3, [r7, #12]

	// ON chip
	MAX6675_CS_SET();
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2110      	movs	r1, #16
 8000d8c:	4818      	ldr	r0, [pc, #96]	; (8000df0 <max6675ReadReg+0x78>)
 8000d8e:	f000 fd79 	bl	8001884 <HAL_GPIO_WritePin>

	// read on chip
	hal_answer = HAL_SPI_Receive(MAX6675_SPI, temp, 2, 100);
 8000d92:	f107 010c 	add.w	r1, r7, #12
 8000d96:	2364      	movs	r3, #100	; 0x64
 8000d98:	2202      	movs	r2, #2
 8000d9a:	4816      	ldr	r0, [pc, #88]	; (8000df4 <max6675ReadReg+0x7c>)
 8000d9c:	f001 fa28 	bl	80021f0 <HAL_SPI_Receive>
 8000da0:	4603      	mov	r3, r0
 8000da2:	73fb      	strb	r3, [r7, #15]

	//OFF chip
	MAX6675_CS_RESET();
 8000da4:	2201      	movs	r2, #1
 8000da6:	2110      	movs	r1, #16
 8000da8:	4811      	ldr	r0, [pc, #68]	; (8000df0 <max6675ReadReg+0x78>)
 8000daa:	f000 fd6b 	bl	8001884 <HAL_GPIO_WritePin>

	if ( hal_answer == HAL_OK){
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d118      	bne.n	8000de6 <max6675ReadReg+0x6e>
		// checking for sensor connect
		if(temp[1] & 0x04) return MAX6675_ERROR;		// logical multiply
 8000db4:	7b7b      	ldrb	r3, [r7, #13]
 8000db6:	f003 0304 	and.w	r3, r3, #4
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <max6675ReadReg+0x4a>
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e012      	b.n	8000de8 <max6675ReadReg+0x70>

		// Transform received data
		*reg = (uint16_t)(temp[1] >> 3);
 8000dc2:	7b7b      	ldrb	r3, [r7, #13]
 8000dc4:	08db      	lsrs	r3, r3, #3
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	801a      	strh	r2, [r3, #0]
		*reg |= (uint16_t)(temp[0] << 5);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	881a      	ldrh	r2, [r3, #0]
 8000dd2:	7b3b      	ldrb	r3, [r7, #12]
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	015b      	lsls	r3, r3, #5
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	801a      	strh	r2, [r3, #0]

		return MAX6675_OK;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e000      	b.n	8000de8 <max6675ReadReg+0x70>
 	}

	return MAX6675_ERROR;
 8000de6:	2300      	movs	r3, #0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40010800 	.word	0x40010800
 8000df4:	20000214 	.word	0x20000214

08000df8 <max6675Temp>:

// Transform input signal to temperature
float max6675Temp(uint16_t reg){
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	80fb      	strh	r3, [r7, #6]
	return reg * 0.25;
 8000e02:	88fb      	ldrh	r3, [r7, #6]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fafd 	bl	8000404 <__aeabi_i2d>
 8000e0a:	f04f 0200 	mov.w	r2, #0
 8000e0e:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <max6675Temp+0x34>)
 8000e10:	f7ff fb62 	bl	80004d8 <__aeabi_dmul>
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	4610      	mov	r0, r2
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f7ff fe54 	bl	8000ac8 <__aeabi_d2f>
 8000e20:	4603      	mov	r3, r0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	3fd00000 	.word	0x3fd00000

08000e30 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e34:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e36:	4a18      	ldr	r2, [pc, #96]	; (8000e98 <MX_SPI1_Init+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e3a:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e64:	2228      	movs	r2, #40	; 0x28
 8000e66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e7c:	220a      	movs	r2, #10
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e80:	4804      	ldr	r0, [pc, #16]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e82:	f001 f931 	bl	80020e8 <HAL_SPI_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e8c:	f7ff ff6f 	bl	8000d6e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000214 	.word	0x20000214
 8000e98:	40013000 	.word	0x40013000

08000e9c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a1b      	ldr	r2, [pc, #108]	; (8000f24 <HAL_SPI_MspInit+0x88>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d12f      	bne.n	8000f1c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ebc:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <HAL_SPI_MspInit+0x8c>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a19      	ldr	r2, [pc, #100]	; (8000f28 <HAL_SPI_MspInit+0x8c>)
 8000ec2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <HAL_SPI_MspInit+0x8c>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <HAL_SPI_MspInit+0x8c>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	4a13      	ldr	r2, [pc, #76]	; (8000f28 <HAL_SPI_MspInit+0x8c>)
 8000eda:	f043 0304 	orr.w	r3, r3, #4
 8000ede:	6193      	str	r3, [r2, #24]
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_SPI_MspInit+0x8c>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000eec:	23a0      	movs	r3, #160	; 0xa0
 8000eee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	4619      	mov	r1, r3
 8000efe:	480b      	ldr	r0, [pc, #44]	; (8000f2c <HAL_SPI_MspInit+0x90>)
 8000f00:	f000 fb3c 	bl	800157c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f04:	2340      	movs	r3, #64	; 0x40
 8000f06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	4619      	mov	r1, r3
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <HAL_SPI_MspInit+0x90>)
 8000f18:	f000 fb30 	bl	800157c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	3720      	adds	r7, #32
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40013000 	.word	0x40013000
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40010800 	.word	0x40010800

08000f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6193      	str	r3, [r2, #24]
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f58:	61d3      	str	r3, [r2, #28]
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_MspInit+0x60>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_MspInit+0x60>)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40010000 	.word	0x40010000

08000f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <NMI_Handler+0x4>

08000f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <HardFault_Handler+0x4>

08000fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <MemManage_Handler+0x4>

08000fa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <BusFault_Handler+0x4>

08000fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <UsageFault_Handler+0x4>

08000fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr

08000fbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr

08000fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr

08000fd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fda:	f000 f9ab 	bl	8001334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
	return 1;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <_kill>:

int _kill(int pid, int sig)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ffa:	f001 fe5d 	bl	8002cb8 <__errno>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2216      	movs	r2, #22
 8001002:	601a      	str	r2, [r3, #0]
	return -1;
 8001004:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <_exit>:

void _exit (int status)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001018:	f04f 31ff 	mov.w	r1, #4294967295
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ffe7 	bl	8000ff0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001022:	e7fe      	b.n	8001022 <_exit+0x12>

08001024 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	e00a      	b.n	800104c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001036:	f3af 8000 	nop.w
 800103a:	4601      	mov	r1, r0
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	1c5a      	adds	r2, r3, #1
 8001040:	60ba      	str	r2, [r7, #8]
 8001042:	b2ca      	uxtb	r2, r1
 8001044:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	3301      	adds	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	429a      	cmp	r2, r3
 8001052:	dbf0      	blt.n	8001036 <_read+0x12>
	}

return len;
 8001054:	687b      	ldr	r3, [r7, #4]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af00      	add	r7, sp, #0
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	e009      	b.n	8001084 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	60ba      	str	r2, [r7, #8]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	3301      	adds	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	697a      	ldr	r2, [r7, #20]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	429a      	cmp	r2, r3
 800108a:	dbf1      	blt.n	8001070 <_write+0x12>
	}
	return len;
 800108c:	687b      	ldr	r3, [r7, #4]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <_close>:

int _close(int file)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
	return -1;
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010bc:	605a      	str	r2, [r3, #4]
	return 0;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr

080010ca <_isatty>:

int _isatty(int file)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b083      	sub	sp, #12
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
	return 1;
 80010d2:	2301      	movs	r3, #1
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr

080010de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010de:	b480      	push	{r7}
 80010e0:	b085      	sub	sp, #20
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	60f8      	str	r0, [r7, #12]
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
	return 0;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
	...

080010f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001100:	4a14      	ldr	r2, [pc, #80]	; (8001154 <_sbrk+0x5c>)
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <_sbrk+0x60>)
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800110c:	4b13      	ldr	r3, [pc, #76]	; (800115c <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d102      	bne.n	800111a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <_sbrk+0x64>)
 8001116:	4a12      	ldr	r2, [pc, #72]	; (8001160 <_sbrk+0x68>)
 8001118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <_sbrk+0x64>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	429a      	cmp	r2, r3
 8001126:	d207      	bcs.n	8001138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001128:	f001 fdc6 	bl	8002cb8 <__errno>
 800112c:	4603      	mov	r3, r0
 800112e:	220c      	movs	r2, #12
 8001130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	e009      	b.n	800114c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <_sbrk+0x64>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800113e:	4b07      	ldr	r3, [pc, #28]	; (800115c <_sbrk+0x64>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	4a05      	ldr	r2, [pc, #20]	; (800115c <_sbrk+0x64>)
 8001148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800114a:	68fb      	ldr	r3, [r7, #12]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20005000 	.word	0x20005000
 8001158:	00000400 	.word	0x00000400
 800115c:	2000026c 	.word	0x2000026c
 8001160:	200002c8 	.word	0x200002c8

08001164 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr

08001170 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001174:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <MX_USART1_UART_Init+0x48>)
 8001176:	4a11      	ldr	r2, [pc, #68]	; (80011bc <MX_USART1_UART_Init+0x4c>)
 8001178:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 389400;
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_USART1_UART_Init+0x48>)
 800117c:	4a10      	ldr	r2, [pc, #64]	; (80011c0 <MX_USART1_UART_Init+0x50>)
 800117e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001180:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <MX_USART1_UART_Init+0x48>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_USART1_UART_Init+0x48>)
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <MX_USART1_UART_Init+0x48>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_USART1_UART_Init+0x48>)
 8001194:	220c      	movs	r2, #12
 8001196:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <MX_USART1_UART_Init+0x48>)
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_USART1_UART_Init+0x48>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <MX_USART1_UART_Init+0x48>)
 80011a6:	f001 fbcf 	bl	8002948 <HAL_UART_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 80011b0:	f7ff fddd 	bl	8000d6e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000270 	.word	0x20000270
 80011bc:	40013800 	.word	0x40013800
 80011c0:	0005f118 	.word	0x0005f118

080011c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a1c      	ldr	r2, [pc, #112]	; (8001250 <HAL_UART_MspInit+0x8c>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d131      	bne.n	8001248 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <HAL_UART_MspInit+0x90>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	4a1a      	ldr	r2, [pc, #104]	; (8001254 <HAL_UART_MspInit+0x90>)
 80011ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ee:	6193      	str	r3, [r2, #24]
 80011f0:	4b18      	ldr	r3, [pc, #96]	; (8001254 <HAL_UART_MspInit+0x90>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fc:	4b15      	ldr	r3, [pc, #84]	; (8001254 <HAL_UART_MspInit+0x90>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a14      	ldr	r2, [pc, #80]	; (8001254 <HAL_UART_MspInit+0x90>)
 8001202:	f043 0304 	orr.w	r3, r3, #4
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_UART_MspInit+0x90>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001214:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001218:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800121e:	2303      	movs	r3, #3
 8001220:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001222:	f107 0310 	add.w	r3, r7, #16
 8001226:	4619      	mov	r1, r3
 8001228:	480b      	ldr	r0, [pc, #44]	; (8001258 <HAL_UART_MspInit+0x94>)
 800122a:	f000 f9a7 	bl	800157c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800122e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001232:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	4619      	mov	r1, r3
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <HAL_UART_MspInit+0x94>)
 8001244:	f000 f99a 	bl	800157c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001248:	bf00      	nop
 800124a:	3720      	adds	r7, #32
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40013800 	.word	0x40013800
 8001254:	40021000 	.word	0x40021000
 8001258:	40010800 	.word	0x40010800

0800125c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800125c:	480c      	ldr	r0, [pc, #48]	; (8001290 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800125e:	490d      	ldr	r1, [pc, #52]	; (8001294 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001260:	4a0d      	ldr	r2, [pc, #52]	; (8001298 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001264:	e002      	b.n	800126c <LoopCopyDataInit>

08001266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126a:	3304      	adds	r3, #4

0800126c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800126c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001270:	d3f9      	bcc.n	8001266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001272:	4a0a      	ldr	r2, [pc, #40]	; (800129c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001274:	4c0a      	ldr	r4, [pc, #40]	; (80012a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001278:	e001      	b.n	800127e <LoopFillZerobss>

0800127a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800127c:	3204      	adds	r2, #4

0800127e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001280:	d3fb      	bcc.n	800127a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001282:	f7ff ff6f 	bl	8001164 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001286:	f001 fd1d 	bl	8002cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800128a:	f7ff fce3 	bl	8000c54 <main>
  bx lr
 800128e:	4770      	bx	lr
  ldr r0, =_sdata
 8001290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001294:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001298:	08007a84 	.word	0x08007a84
  ldr r2, =_sbss
 800129c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80012a0:	200002c8 	.word	0x200002c8

080012a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012a4:	e7fe      	b.n	80012a4 <ADC1_2_IRQHandler>
	...

080012a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <HAL_Init+0x28>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <HAL_Init+0x28>)
 80012b2:	f043 0310 	orr.w	r3, r3, #16
 80012b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b8:	2003      	movs	r0, #3
 80012ba:	f000 f92b 	bl	8001514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012be:	200f      	movs	r0, #15
 80012c0:	f000 f808 	bl	80012d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c4:	f7ff fe34 	bl	8000f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40022000 	.word	0x40022000

080012d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_InitTick+0x54>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_InitTick+0x58>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4619      	mov	r1, r3
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f935 	bl	8001562 <HAL_SYSTICK_Config>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e00e      	b.n	8001320 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b0f      	cmp	r3, #15
 8001306:	d80a      	bhi.n	800131e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001308:	2200      	movs	r2, #0
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f000 f90b 	bl	800152a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001314:	4a06      	ldr	r2, [pc, #24]	; (8001330 <HAL_InitTick+0x5c>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	e000      	b.n	8001320 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000000 	.word	0x20000000
 800132c:	20000008 	.word	0x20000008
 8001330:	20000004 	.word	0x20000004

08001334 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <HAL_IncTick+0x1c>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4b05      	ldr	r3, [pc, #20]	; (8001354 <HAL_IncTick+0x20>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4413      	add	r3, r2
 8001344:	4a03      	ldr	r2, [pc, #12]	; (8001354 <HAL_IncTick+0x20>)
 8001346:	6013      	str	r3, [r2, #0]
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	20000008 	.word	0x20000008
 8001354:	200002b4 	.word	0x200002b4

08001358 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return uwTick;
 800135c:	4b02      	ldr	r3, [pc, #8]	; (8001368 <HAL_GetTick+0x10>)
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	200002b4 	.word	0x200002b4

0800136c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001374:	f7ff fff0 	bl	8001358 <HAL_GetTick>
 8001378:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001384:	d005      	beq.n	8001392 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001386:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <HAL_Delay+0x44>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4413      	add	r3, r2
 8001390:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001392:	bf00      	nop
 8001394:	f7ff ffe0 	bl	8001358 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d8f7      	bhi.n	8001394 <HAL_Delay+0x28>
  {
  }
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000008 	.word	0x20000008

080013b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d0:	4013      	ands	r3, r2
 80013d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e6:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	60d3      	str	r3, [r2, #12]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <__NVIC_GetPriorityGrouping+0x18>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	f003 0307 	and.w	r3, r3, #7
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	6039      	str	r1, [r7, #0]
 8001422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	2b00      	cmp	r3, #0
 800142a:	db0a      	blt.n	8001442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	490c      	ldr	r1, [pc, #48]	; (8001464 <__NVIC_SetPriority+0x4c>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	0112      	lsls	r2, r2, #4
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	440b      	add	r3, r1
 800143c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001440:	e00a      	b.n	8001458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4908      	ldr	r1, [pc, #32]	; (8001468 <__NVIC_SetPriority+0x50>)
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	3b04      	subs	r3, #4
 8001450:	0112      	lsls	r2, r2, #4
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	440b      	add	r3, r1
 8001456:	761a      	strb	r2, [r3, #24]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000e100 	.word	0xe000e100
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	; 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f1c3 0307 	rsb	r3, r3, #7
 8001486:	2b04      	cmp	r3, #4
 8001488:	bf28      	it	cs
 800148a:	2304      	movcs	r3, #4
 800148c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3304      	adds	r3, #4
 8001492:	2b06      	cmp	r3, #6
 8001494:	d902      	bls.n	800149c <NVIC_EncodePriority+0x30>
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3b03      	subs	r3, #3
 800149a:	e000      	b.n	800149e <NVIC_EncodePriority+0x32>
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	401a      	ands	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa01 f303 	lsl.w	r3, r1, r3
 80014be:	43d9      	mvns	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	4313      	orrs	r3, r2
         );
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3724      	adds	r7, #36	; 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e0:	d301      	bcc.n	80014e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00f      	b.n	8001506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <SysTick_Config+0x40>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ee:	210f      	movs	r1, #15
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f7ff ff90 	bl	8001418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <SysTick_Config+0x40>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <SysTick_Config+0x40>)
 8001500:	2207      	movs	r2, #7
 8001502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	e000e010 	.word	0xe000e010

08001514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ff49 	bl	80013b4 <__NVIC_SetPriorityGrouping>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800153c:	f7ff ff5e 	bl	80013fc <__NVIC_GetPriorityGrouping>
 8001540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	6978      	ldr	r0, [r7, #20]
 8001548:	f7ff ff90 	bl	800146c <NVIC_EncodePriority>
 800154c:	4602      	mov	r2, r0
 800154e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff5f 	bl	8001418 <__NVIC_SetPriority>
}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff ffb0 	bl	80014d0 <SysTick_Config>
 8001570:	4603      	mov	r3, r0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800157c:	b480      	push	{r7}
 800157e:	b08b      	sub	sp, #44	; 0x2c
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001586:	2300      	movs	r3, #0
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800158e:	e169      	b.n	8001864 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001590:	2201      	movs	r2, #1
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	69fa      	ldr	r2, [r7, #28]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	f040 8158 	bne.w	800185e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	4a9a      	ldr	r2, [pc, #616]	; (800181c <HAL_GPIO_Init+0x2a0>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d05e      	beq.n	8001676 <HAL_GPIO_Init+0xfa>
 80015b8:	4a98      	ldr	r2, [pc, #608]	; (800181c <HAL_GPIO_Init+0x2a0>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d875      	bhi.n	80016aa <HAL_GPIO_Init+0x12e>
 80015be:	4a98      	ldr	r2, [pc, #608]	; (8001820 <HAL_GPIO_Init+0x2a4>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d058      	beq.n	8001676 <HAL_GPIO_Init+0xfa>
 80015c4:	4a96      	ldr	r2, [pc, #600]	; (8001820 <HAL_GPIO_Init+0x2a4>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d86f      	bhi.n	80016aa <HAL_GPIO_Init+0x12e>
 80015ca:	4a96      	ldr	r2, [pc, #600]	; (8001824 <HAL_GPIO_Init+0x2a8>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d052      	beq.n	8001676 <HAL_GPIO_Init+0xfa>
 80015d0:	4a94      	ldr	r2, [pc, #592]	; (8001824 <HAL_GPIO_Init+0x2a8>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d869      	bhi.n	80016aa <HAL_GPIO_Init+0x12e>
 80015d6:	4a94      	ldr	r2, [pc, #592]	; (8001828 <HAL_GPIO_Init+0x2ac>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d04c      	beq.n	8001676 <HAL_GPIO_Init+0xfa>
 80015dc:	4a92      	ldr	r2, [pc, #584]	; (8001828 <HAL_GPIO_Init+0x2ac>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d863      	bhi.n	80016aa <HAL_GPIO_Init+0x12e>
 80015e2:	4a92      	ldr	r2, [pc, #584]	; (800182c <HAL_GPIO_Init+0x2b0>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d046      	beq.n	8001676 <HAL_GPIO_Init+0xfa>
 80015e8:	4a90      	ldr	r2, [pc, #576]	; (800182c <HAL_GPIO_Init+0x2b0>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d85d      	bhi.n	80016aa <HAL_GPIO_Init+0x12e>
 80015ee:	2b12      	cmp	r3, #18
 80015f0:	d82a      	bhi.n	8001648 <HAL_GPIO_Init+0xcc>
 80015f2:	2b12      	cmp	r3, #18
 80015f4:	d859      	bhi.n	80016aa <HAL_GPIO_Init+0x12e>
 80015f6:	a201      	add	r2, pc, #4	; (adr r2, 80015fc <HAL_GPIO_Init+0x80>)
 80015f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fc:	08001677 	.word	0x08001677
 8001600:	08001651 	.word	0x08001651
 8001604:	08001663 	.word	0x08001663
 8001608:	080016a5 	.word	0x080016a5
 800160c:	080016ab 	.word	0x080016ab
 8001610:	080016ab 	.word	0x080016ab
 8001614:	080016ab 	.word	0x080016ab
 8001618:	080016ab 	.word	0x080016ab
 800161c:	080016ab 	.word	0x080016ab
 8001620:	080016ab 	.word	0x080016ab
 8001624:	080016ab 	.word	0x080016ab
 8001628:	080016ab 	.word	0x080016ab
 800162c:	080016ab 	.word	0x080016ab
 8001630:	080016ab 	.word	0x080016ab
 8001634:	080016ab 	.word	0x080016ab
 8001638:	080016ab 	.word	0x080016ab
 800163c:	080016ab 	.word	0x080016ab
 8001640:	08001659 	.word	0x08001659
 8001644:	0800166d 	.word	0x0800166d
 8001648:	4a79      	ldr	r2, [pc, #484]	; (8001830 <HAL_GPIO_Init+0x2b4>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d013      	beq.n	8001676 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800164e:	e02c      	b.n	80016aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	623b      	str	r3, [r7, #32]
          break;
 8001656:	e029      	b.n	80016ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	3304      	adds	r3, #4
 800165e:	623b      	str	r3, [r7, #32]
          break;
 8001660:	e024      	b.n	80016ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	3308      	adds	r3, #8
 8001668:	623b      	str	r3, [r7, #32]
          break;
 800166a:	e01f      	b.n	80016ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	330c      	adds	r3, #12
 8001672:	623b      	str	r3, [r7, #32]
          break;
 8001674:	e01a      	b.n	80016ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d102      	bne.n	8001684 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800167e:	2304      	movs	r3, #4
 8001680:	623b      	str	r3, [r7, #32]
          break;
 8001682:	e013      	b.n	80016ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d105      	bne.n	8001698 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800168c:	2308      	movs	r3, #8
 800168e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69fa      	ldr	r2, [r7, #28]
 8001694:	611a      	str	r2, [r3, #16]
          break;
 8001696:	e009      	b.n	80016ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001698:	2308      	movs	r3, #8
 800169a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69fa      	ldr	r2, [r7, #28]
 80016a0:	615a      	str	r2, [r3, #20]
          break;
 80016a2:	e003      	b.n	80016ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016a4:	2300      	movs	r3, #0
 80016a6:	623b      	str	r3, [r7, #32]
          break;
 80016a8:	e000      	b.n	80016ac <HAL_GPIO_Init+0x130>
          break;
 80016aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	2bff      	cmp	r3, #255	; 0xff
 80016b0:	d801      	bhi.n	80016b6 <HAL_GPIO_Init+0x13a>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	e001      	b.n	80016ba <HAL_GPIO_Init+0x13e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3304      	adds	r3, #4
 80016ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	2bff      	cmp	r3, #255	; 0xff
 80016c0:	d802      	bhi.n	80016c8 <HAL_GPIO_Init+0x14c>
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	e002      	b.n	80016ce <HAL_GPIO_Init+0x152>
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	3b08      	subs	r3, #8
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	210f      	movs	r1, #15
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	fa01 f303 	lsl.w	r3, r1, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	401a      	ands	r2, r3
 80016e0:	6a39      	ldr	r1, [r7, #32]
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	fa01 f303 	lsl.w	r3, r1, r3
 80016e8:	431a      	orrs	r2, r3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 80b1 	beq.w	800185e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016fc:	4b4d      	ldr	r3, [pc, #308]	; (8001834 <HAL_GPIO_Init+0x2b8>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	4a4c      	ldr	r2, [pc, #304]	; (8001834 <HAL_GPIO_Init+0x2b8>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	6193      	str	r3, [r2, #24]
 8001708:	4b4a      	ldr	r3, [pc, #296]	; (8001834 <HAL_GPIO_Init+0x2b8>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001714:	4a48      	ldr	r2, [pc, #288]	; (8001838 <HAL_GPIO_Init+0x2bc>)
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	089b      	lsrs	r3, r3, #2
 800171a:	3302      	adds	r3, #2
 800171c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001720:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	220f      	movs	r2, #15
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	4013      	ands	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a40      	ldr	r2, [pc, #256]	; (800183c <HAL_GPIO_Init+0x2c0>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d013      	beq.n	8001768 <HAL_GPIO_Init+0x1ec>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a3f      	ldr	r2, [pc, #252]	; (8001840 <HAL_GPIO_Init+0x2c4>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d00d      	beq.n	8001764 <HAL_GPIO_Init+0x1e8>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a3e      	ldr	r2, [pc, #248]	; (8001844 <HAL_GPIO_Init+0x2c8>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d007      	beq.n	8001760 <HAL_GPIO_Init+0x1e4>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a3d      	ldr	r2, [pc, #244]	; (8001848 <HAL_GPIO_Init+0x2cc>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d101      	bne.n	800175c <HAL_GPIO_Init+0x1e0>
 8001758:	2303      	movs	r3, #3
 800175a:	e006      	b.n	800176a <HAL_GPIO_Init+0x1ee>
 800175c:	2304      	movs	r3, #4
 800175e:	e004      	b.n	800176a <HAL_GPIO_Init+0x1ee>
 8001760:	2302      	movs	r3, #2
 8001762:	e002      	b.n	800176a <HAL_GPIO_Init+0x1ee>
 8001764:	2301      	movs	r3, #1
 8001766:	e000      	b.n	800176a <HAL_GPIO_Init+0x1ee>
 8001768:	2300      	movs	r3, #0
 800176a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800176c:	f002 0203 	and.w	r2, r2, #3
 8001770:	0092      	lsls	r2, r2, #2
 8001772:	4093      	lsls	r3, r2
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	4313      	orrs	r3, r2
 8001778:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800177a:	492f      	ldr	r1, [pc, #188]	; (8001838 <HAL_GPIO_Init+0x2bc>)
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	089b      	lsrs	r3, r3, #2
 8001780:	3302      	adds	r3, #2
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d006      	beq.n	80017a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001794:	4b2d      	ldr	r3, [pc, #180]	; (800184c <HAL_GPIO_Init+0x2d0>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	492c      	ldr	r1, [pc, #176]	; (800184c <HAL_GPIO_Init+0x2d0>)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	4313      	orrs	r3, r2
 800179e:	600b      	str	r3, [r1, #0]
 80017a0:	e006      	b.n	80017b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017a2:	4b2a      	ldr	r3, [pc, #168]	; (800184c <HAL_GPIO_Init+0x2d0>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	43db      	mvns	r3, r3
 80017aa:	4928      	ldr	r1, [pc, #160]	; (800184c <HAL_GPIO_Init+0x2d0>)
 80017ac:	4013      	ands	r3, r2
 80017ae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d006      	beq.n	80017ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017bc:	4b23      	ldr	r3, [pc, #140]	; (800184c <HAL_GPIO_Init+0x2d0>)
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	4922      	ldr	r1, [pc, #136]	; (800184c <HAL_GPIO_Init+0x2d0>)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	604b      	str	r3, [r1, #4]
 80017c8:	e006      	b.n	80017d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017ca:	4b20      	ldr	r3, [pc, #128]	; (800184c <HAL_GPIO_Init+0x2d0>)
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	491e      	ldr	r1, [pc, #120]	; (800184c <HAL_GPIO_Init+0x2d0>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d006      	beq.n	80017f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <HAL_GPIO_Init+0x2d0>)
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	4918      	ldr	r1, [pc, #96]	; (800184c <HAL_GPIO_Init+0x2d0>)
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	608b      	str	r3, [r1, #8]
 80017f0:	e006      	b.n	8001800 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017f2:	4b16      	ldr	r3, [pc, #88]	; (800184c <HAL_GPIO_Init+0x2d0>)
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	4914      	ldr	r1, [pc, #80]	; (800184c <HAL_GPIO_Init+0x2d0>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d021      	beq.n	8001850 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <HAL_GPIO_Init+0x2d0>)
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	490e      	ldr	r1, [pc, #56]	; (800184c <HAL_GPIO_Init+0x2d0>)
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	4313      	orrs	r3, r2
 8001816:	60cb      	str	r3, [r1, #12]
 8001818:	e021      	b.n	800185e <HAL_GPIO_Init+0x2e2>
 800181a:	bf00      	nop
 800181c:	10320000 	.word	0x10320000
 8001820:	10310000 	.word	0x10310000
 8001824:	10220000 	.word	0x10220000
 8001828:	10210000 	.word	0x10210000
 800182c:	10120000 	.word	0x10120000
 8001830:	10110000 	.word	0x10110000
 8001834:	40021000 	.word	0x40021000
 8001838:	40010000 	.word	0x40010000
 800183c:	40010800 	.word	0x40010800
 8001840:	40010c00 	.word	0x40010c00
 8001844:	40011000 	.word	0x40011000
 8001848:	40011400 	.word	0x40011400
 800184c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_GPIO_Init+0x304>)
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	43db      	mvns	r3, r3
 8001858:	4909      	ldr	r1, [pc, #36]	; (8001880 <HAL_GPIO_Init+0x304>)
 800185a:	4013      	ands	r3, r2
 800185c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	3301      	adds	r3, #1
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	fa22 f303 	lsr.w	r3, r2, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	f47f ae8e 	bne.w	8001590 <HAL_GPIO_Init+0x14>
  }
}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	372c      	adds	r7, #44	; 0x2c
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	40010400 	.word	0x40010400

08001884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	807b      	strh	r3, [r7, #2]
 8001890:	4613      	mov	r3, r2
 8001892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001894:	787b      	ldrb	r3, [r7, #1]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800189a:	887a      	ldrh	r2, [r7, #2]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018a0:	e003      	b.n	80018aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018a2:	887b      	ldrh	r3, [r7, #2]
 80018a4:	041a      	lsls	r2, r3, #16
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	611a      	str	r2, [r3, #16]
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e272      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 8087 	beq.w	80019e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018d4:	4b92      	ldr	r3, [pc, #584]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 030c 	and.w	r3, r3, #12
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d00c      	beq.n	80018fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018e0:	4b8f      	ldr	r3, [pc, #572]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 030c 	and.w	r3, r3, #12
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d112      	bne.n	8001912 <HAL_RCC_OscConfig+0x5e>
 80018ec:	4b8c      	ldr	r3, [pc, #560]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f8:	d10b      	bne.n	8001912 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fa:	4b89      	ldr	r3, [pc, #548]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d06c      	beq.n	80019e0 <HAL_RCC_OscConfig+0x12c>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d168      	bne.n	80019e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e24c      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800191a:	d106      	bne.n	800192a <HAL_RCC_OscConfig+0x76>
 800191c:	4b80      	ldr	r3, [pc, #512]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a7f      	ldr	r2, [pc, #508]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	e02e      	b.n	8001988 <HAL_RCC_OscConfig+0xd4>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10c      	bne.n	800194c <HAL_RCC_OscConfig+0x98>
 8001932:	4b7b      	ldr	r3, [pc, #492]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a7a      	ldr	r2, [pc, #488]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	4b78      	ldr	r3, [pc, #480]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a77      	ldr	r2, [pc, #476]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001944:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e01d      	b.n	8001988 <HAL_RCC_OscConfig+0xd4>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001954:	d10c      	bne.n	8001970 <HAL_RCC_OscConfig+0xbc>
 8001956:	4b72      	ldr	r3, [pc, #456]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a71      	ldr	r2, [pc, #452]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 800195c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	4b6f      	ldr	r3, [pc, #444]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a6e      	ldr	r2, [pc, #440]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e00b      	b.n	8001988 <HAL_RCC_OscConfig+0xd4>
 8001970:	4b6b      	ldr	r3, [pc, #428]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a6a      	ldr	r2, [pc, #424]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	4b68      	ldr	r3, [pc, #416]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a67      	ldr	r2, [pc, #412]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001986:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d013      	beq.n	80019b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7ff fce2 	bl	8001358 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001998:	f7ff fcde 	bl	8001358 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b64      	cmp	r3, #100	; 0x64
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e200      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019aa:	4b5d      	ldr	r3, [pc, #372]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0xe4>
 80019b6:	e014      	b.n	80019e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff fcce 	bl	8001358 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c0:	f7ff fcca 	bl	8001358 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b64      	cmp	r3, #100	; 0x64
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e1ec      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d2:	4b53      	ldr	r3, [pc, #332]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x10c>
 80019de:	e000      	b.n	80019e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d063      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ee:	4b4c      	ldr	r3, [pc, #304]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00b      	beq.n	8001a12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019fa:	4b49      	ldr	r3, [pc, #292]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	d11c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x18c>
 8001a06:	4b46      	ldr	r3, [pc, #280]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d116      	bne.n	8001a40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a12:	4b43      	ldr	r3, [pc, #268]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <HAL_RCC_OscConfig+0x176>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d001      	beq.n	8001a2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e1c0      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2a:	4b3d      	ldr	r3, [pc, #244]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4939      	ldr	r1, [pc, #228]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3e:	e03a      	b.n	8001ab6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d020      	beq.n	8001a8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a48:	4b36      	ldr	r3, [pc, #216]	; (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4e:	f7ff fc83 	bl	8001358 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a56:	f7ff fc7f 	bl	8001358 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e1a1      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a68:	4b2d      	ldr	r3, [pc, #180]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a74:	4b2a      	ldr	r3, [pc, #168]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	4927      	ldr	r1, [pc, #156]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	600b      	str	r3, [r1, #0]
 8001a88:	e015      	b.n	8001ab6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8a:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a90:	f7ff fc62 	bl	8001358 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a98:	f7ff fc5e 	bl	8001358 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e180      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d03a      	beq.n	8001b38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d019      	beq.n	8001afe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aca:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad0:	f7ff fc42 	bl	8001358 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad8:	f7ff fc3e 	bl	8001358 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e160      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aea:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001af6:	2001      	movs	r0, #1
 8001af8:	f000 fad8 	bl	80020ac <RCC_Delay>
 8001afc:	e01c      	b.n	8001b38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b04:	f7ff fc28 	bl	8001358 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b0a:	e00f      	b.n	8001b2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b0c:	f7ff fc24 	bl	8001358 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d908      	bls.n	8001b2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e146      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000
 8001b24:	42420000 	.word	0x42420000
 8001b28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b2c:	4b92      	ldr	r3, [pc, #584]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1e9      	bne.n	8001b0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 80a6 	beq.w	8001c92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b4a:	4b8b      	ldr	r3, [pc, #556]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10d      	bne.n	8001b72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b56:	4b88      	ldr	r3, [pc, #544]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	4a87      	ldr	r2, [pc, #540]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b60:	61d3      	str	r3, [r2, #28]
 8001b62:	4b85      	ldr	r3, [pc, #532]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b72:	4b82      	ldr	r3, [pc, #520]	; (8001d7c <HAL_RCC_OscConfig+0x4c8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d118      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b7e:	4b7f      	ldr	r3, [pc, #508]	; (8001d7c <HAL_RCC_OscConfig+0x4c8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a7e      	ldr	r2, [pc, #504]	; (8001d7c <HAL_RCC_OscConfig+0x4c8>)
 8001b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b8a:	f7ff fbe5 	bl	8001358 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b92:	f7ff fbe1 	bl	8001358 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b64      	cmp	r3, #100	; 0x64
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e103      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba4:	4b75      	ldr	r3, [pc, #468]	; (8001d7c <HAL_RCC_OscConfig+0x4c8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f0      	beq.n	8001b92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d106      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x312>
 8001bb8:	4b6f      	ldr	r3, [pc, #444]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	4a6e      	ldr	r2, [pc, #440]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6213      	str	r3, [r2, #32]
 8001bc4:	e02d      	b.n	8001c22 <HAL_RCC_OscConfig+0x36e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10c      	bne.n	8001be8 <HAL_RCC_OscConfig+0x334>
 8001bce:	4b6a      	ldr	r3, [pc, #424]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	4a69      	ldr	r2, [pc, #420]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	f023 0301 	bic.w	r3, r3, #1
 8001bd8:	6213      	str	r3, [r2, #32]
 8001bda:	4b67      	ldr	r3, [pc, #412]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4a66      	ldr	r2, [pc, #408]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001be0:	f023 0304 	bic.w	r3, r3, #4
 8001be4:	6213      	str	r3, [r2, #32]
 8001be6:	e01c      	b.n	8001c22 <HAL_RCC_OscConfig+0x36e>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2b05      	cmp	r3, #5
 8001bee:	d10c      	bne.n	8001c0a <HAL_RCC_OscConfig+0x356>
 8001bf0:	4b61      	ldr	r3, [pc, #388]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	4a60      	ldr	r2, [pc, #384]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bf6:	f043 0304 	orr.w	r3, r3, #4
 8001bfa:	6213      	str	r3, [r2, #32]
 8001bfc:	4b5e      	ldr	r3, [pc, #376]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	4a5d      	ldr	r2, [pc, #372]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6213      	str	r3, [r2, #32]
 8001c08:	e00b      	b.n	8001c22 <HAL_RCC_OscConfig+0x36e>
 8001c0a:	4b5b      	ldr	r3, [pc, #364]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	4a5a      	ldr	r2, [pc, #360]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c10:	f023 0301 	bic.w	r3, r3, #1
 8001c14:	6213      	str	r3, [r2, #32]
 8001c16:	4b58      	ldr	r3, [pc, #352]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	4a57      	ldr	r2, [pc, #348]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c1c:	f023 0304 	bic.w	r3, r3, #4
 8001c20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d015      	beq.n	8001c56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2a:	f7ff fb95 	bl	8001358 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c30:	e00a      	b.n	8001c48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c32:	f7ff fb91 	bl	8001358 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e0b1      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c48:	4b4b      	ldr	r3, [pc, #300]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0ee      	beq.n	8001c32 <HAL_RCC_OscConfig+0x37e>
 8001c54:	e014      	b.n	8001c80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c56:	f7ff fb7f 	bl	8001358 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5c:	e00a      	b.n	8001c74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5e:	f7ff fb7b 	bl	8001358 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e09b      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c74:	4b40      	ldr	r3, [pc, #256]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1ee      	bne.n	8001c5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c80:	7dfb      	ldrb	r3, [r7, #23]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d105      	bne.n	8001c92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c86:	4b3c      	ldr	r3, [pc, #240]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	4a3b      	ldr	r2, [pc, #236]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 8087 	beq.w	8001daa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c9c:	4b36      	ldr	r3, [pc, #216]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 030c 	and.w	r3, r3, #12
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d061      	beq.n	8001d6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d146      	bne.n	8001d3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb0:	4b33      	ldr	r3, [pc, #204]	; (8001d80 <HAL_RCC_OscConfig+0x4cc>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb6:	f7ff fb4f 	bl	8001358 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbe:	f7ff fb4b 	bl	8001358 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e06d      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd0:	4b29      	ldr	r3, [pc, #164]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1f0      	bne.n	8001cbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce4:	d108      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ce6:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	4921      	ldr	r1, [pc, #132]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cf8:	4b1f      	ldr	r3, [pc, #124]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a19      	ldr	r1, [r3, #32]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	430b      	orrs	r3, r1
 8001d0a:	491b      	ldr	r1, [pc, #108]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d10:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <HAL_RCC_OscConfig+0x4cc>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7ff fb1f 	bl	8001358 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1e:	f7ff fb1b 	bl	8001358 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e03d      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x46a>
 8001d3c:	e035      	b.n	8001daa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <HAL_RCC_OscConfig+0x4cc>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7ff fb08 	bl	8001358 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4c:	f7ff fb04 	bl	8001358 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e026      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x498>
 8001d6a:	e01e      	b.n	8001daa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d107      	bne.n	8001d84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e019      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40007000 	.word	0x40007000
 8001d80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_RCC_OscConfig+0x500>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d106      	bne.n	8001da6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d001      	beq.n	8001daa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40021000 	.word	0x40021000

08001db8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0d0      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dcc:	4b6a      	ldr	r3, [pc, #424]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d910      	bls.n	8001dfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dda:	4b67      	ldr	r3, [pc, #412]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f023 0207 	bic.w	r2, r3, #7
 8001de2:	4965      	ldr	r1, [pc, #404]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dea:	4b63      	ldr	r3, [pc, #396]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0b8      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d020      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e14:	4b59      	ldr	r3, [pc, #356]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	4a58      	ldr	r2, [pc, #352]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e2c:	4b53      	ldr	r3, [pc, #332]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	4a52      	ldr	r2, [pc, #328]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e38:	4b50      	ldr	r3, [pc, #320]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	494d      	ldr	r1, [pc, #308]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d040      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	4b47      	ldr	r3, [pc, #284]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d115      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e07f      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d107      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e76:	4b41      	ldr	r3, [pc, #260]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d109      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e073      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e86:	4b3d      	ldr	r3, [pc, #244]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e06b      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e96:	4b39      	ldr	r3, [pc, #228]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f023 0203 	bic.w	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	4936      	ldr	r1, [pc, #216]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ea8:	f7ff fa56 	bl	8001358 <HAL_GetTick>
 8001eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb0:	f7ff fa52 	bl	8001358 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e053      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec6:	4b2d      	ldr	r3, [pc, #180]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 020c 	and.w	r2, r3, #12
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d1eb      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b27      	ldr	r3, [pc, #156]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d210      	bcs.n	8001f08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 0207 	bic.w	r2, r3, #7
 8001eee:	4922      	ldr	r1, [pc, #136]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e032      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	4916      	ldr	r1, [pc, #88]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d009      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	490e      	ldr	r1, [pc, #56]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f46:	f000 f821 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	490a      	ldr	r1, [pc, #40]	; (8001f80 <HAL_RCC_ClockConfig+0x1c8>)
 8001f58:	5ccb      	ldrb	r3, [r1, r3]
 8001f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5e:	4a09      	ldr	r2, [pc, #36]	; (8001f84 <HAL_RCC_ClockConfig+0x1cc>)
 8001f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_RCC_ClockConfig+0x1d0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff f9b4 	bl	80012d4 <HAL_InitTick>

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40022000 	.word	0x40022000
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	080075c0 	.word	0x080075c0
 8001f84:	20000000 	.word	0x20000000
 8001f88:	20000004 	.word	0x20000004

08001f8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f8c:	b490      	push	{r4, r7}
 8001f8e:	b08a      	sub	sp, #40	; 0x28
 8001f90:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f92:	4b29      	ldr	r3, [pc, #164]	; (8002038 <HAL_RCC_GetSysClockFreq+0xac>)
 8001f94:	1d3c      	adds	r4, r7, #4
 8001f96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f9c:	f240 2301 	movw	r3, #513	; 0x201
 8001fa0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61bb      	str	r3, [r7, #24]
 8001faa:	2300      	movs	r3, #0
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fb6:	4b21      	ldr	r3, [pc, #132]	; (800203c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d002      	beq.n	8001fcc <HAL_RCC_GetSysClockFreq+0x40>
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d003      	beq.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x46>
 8001fca:	e02b      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fcc:	4b1c      	ldr	r3, [pc, #112]	; (8002040 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fce:	623b      	str	r3, [r7, #32]
      break;
 8001fd0:	e02b      	b.n	800202a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	0c9b      	lsrs	r3, r3, #18
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	3328      	adds	r3, #40	; 0x28
 8001fdc:	443b      	add	r3, r7
 8001fde:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fe2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d012      	beq.n	8002014 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fee:	4b13      	ldr	r3, [pc, #76]	; (800203c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	0c5b      	lsrs	r3, r3, #17
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	3328      	adds	r3, #40	; 0x28
 8001ffa:	443b      	add	r3, r7
 8001ffc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002000:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	4a0e      	ldr	r2, [pc, #56]	; (8002040 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002006:	fb03 f202 	mul.w	r2, r3, r2
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
 8002012:	e004      	b.n	800201e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	4a0b      	ldr	r2, [pc, #44]	; (8002044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002018:	fb02 f303 	mul.w	r3, r2, r3
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	623b      	str	r3, [r7, #32]
      break;
 8002022:	e002      	b.n	800202a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002026:	623b      	str	r3, [r7, #32]
      break;
 8002028:	bf00      	nop
    }
  }
  return sysclockfreq;
 800202a:	6a3b      	ldr	r3, [r7, #32]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3728      	adds	r7, #40	; 0x28
 8002030:	46bd      	mov	sp, r7
 8002032:	bc90      	pop	{r4, r7}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	080075b0 	.word	0x080075b0
 800203c:	40021000 	.word	0x40021000
 8002040:	007a1200 	.word	0x007a1200
 8002044:	003d0900 	.word	0x003d0900

08002048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800204c:	4b02      	ldr	r3, [pc, #8]	; (8002058 <HAL_RCC_GetHCLKFreq+0x10>)
 800204e:	681b      	ldr	r3, [r3, #0]
}
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr
 8002058:	20000000 	.word	0x20000000

0800205c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002060:	f7ff fff2 	bl	8002048 <HAL_RCC_GetHCLKFreq>
 8002064:	4602      	mov	r2, r0
 8002066:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	0a1b      	lsrs	r3, r3, #8
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	4903      	ldr	r1, [pc, #12]	; (8002080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002072:	5ccb      	ldrb	r3, [r1, r3]
 8002074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002078:	4618      	mov	r0, r3
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40021000 	.word	0x40021000
 8002080:	080075d0 	.word	0x080075d0

08002084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002088:	f7ff ffde 	bl	8002048 <HAL_RCC_GetHCLKFreq>
 800208c:	4602      	mov	r2, r0
 800208e:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	0adb      	lsrs	r3, r3, #11
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	4903      	ldr	r1, [pc, #12]	; (80020a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800209a:	5ccb      	ldrb	r3, [r1, r3]
 800209c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40021000 	.word	0x40021000
 80020a8:	080075d0 	.word	0x080075d0

080020ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020b4:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <RCC_Delay+0x34>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <RCC_Delay+0x38>)
 80020ba:	fba2 2303 	umull	r2, r3, r2, r3
 80020be:	0a5b      	lsrs	r3, r3, #9
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	fb02 f303 	mul.w	r3, r2, r3
 80020c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020c8:	bf00      	nop
  }
  while (Delay --);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	1e5a      	subs	r2, r3, #1
 80020ce:	60fa      	str	r2, [r7, #12]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1f9      	bne.n	80020c8 <RCC_Delay+0x1c>
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr
 80020e0:	20000000 	.word	0x20000000
 80020e4:	10624dd3 	.word	0x10624dd3

080020e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e076      	b.n	80021e8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d108      	bne.n	8002114 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800210a:	d009      	beq.n	8002120 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	61da      	str	r2, [r3, #28]
 8002112:	e005      	b.n	8002120 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d106      	bne.n	8002140 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7fe feae 	bl	8000e9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002156:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002168:	431a      	orrs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	431a      	orrs	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002190:	431a      	orrs	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a4:	ea42 0103 	orr.w	r1, r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	0c1a      	lsrs	r2, r3, #16
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f002 0204 	and.w	r2, r2, #4
 80021c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	69da      	ldr	r2, [r3, #28]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af02      	add	r7, sp, #8
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	4613      	mov	r3, r2
 80021fe:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002200:	2300      	movs	r3, #0
 8002202:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800220c:	d112      	bne.n	8002234 <HAL_SPI_Receive+0x44>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10e      	bne.n	8002234 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2204      	movs	r2, #4
 800221a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800221e:	88fa      	ldrh	r2, [r7, #6]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	4613      	mov	r3, r2
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	68b9      	ldr	r1, [r7, #8]
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 f8f1 	bl	8002412 <HAL_SPI_TransmitReceive>
 8002230:	4603      	mov	r3, r0
 8002232:	e0ea      	b.n	800240a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_SPI_Receive+0x52>
 800223e:	2302      	movs	r3, #2
 8002240:	e0e3      	b.n	800240a <HAL_SPI_Receive+0x21a>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800224a:	f7ff f885 	bl	8001358 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b01      	cmp	r3, #1
 800225a:	d002      	beq.n	8002262 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800225c:	2302      	movs	r3, #2
 800225e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002260:	e0ca      	b.n	80023f8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d002      	beq.n	800226e <HAL_SPI_Receive+0x7e>
 8002268:	88fb      	ldrh	r3, [r7, #6]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d102      	bne.n	8002274 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002272:	e0c1      	b.n	80023f8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2204      	movs	r2, #4
 8002278:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	88fa      	ldrh	r2, [r7, #6]
 800228c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	88fa      	ldrh	r2, [r7, #6]
 8002292:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022ba:	d10f      	bne.n	80022dc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80022da:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e6:	2b40      	cmp	r3, #64	; 0x40
 80022e8:	d007      	beq.n	80022fa <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022f8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d162      	bne.n	80023c8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002302:	e02e      	b.n	8002362 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b01      	cmp	r3, #1
 8002310:	d115      	bne.n	800233e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f103 020c 	add.w	r2, r3, #12
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231e:	7812      	ldrb	r2, [r2, #0]
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002332:	b29b      	uxth	r3, r3
 8002334:	3b01      	subs	r3, #1
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800233c:	e011      	b.n	8002362 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800233e:	f7ff f80b 	bl	8001358 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d803      	bhi.n	8002356 <HAL_SPI_Receive+0x166>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002354:	d102      	bne.n	800235c <HAL_SPI_Receive+0x16c>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d102      	bne.n	8002362 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002360:	e04a      	b.n	80023f8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002366:	b29b      	uxth	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1cb      	bne.n	8002304 <HAL_SPI_Receive+0x114>
 800236c:	e031      	b.n	80023d2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b01      	cmp	r3, #1
 800237a:	d113      	bne.n	80023a4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002386:	b292      	uxth	r2, r2
 8002388:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238e:	1c9a      	adds	r2, r3, #2
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002398:	b29b      	uxth	r3, r3
 800239a:	3b01      	subs	r3, #1
 800239c:	b29a      	uxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023a2:	e011      	b.n	80023c8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023a4:	f7fe ffd8 	bl	8001358 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d803      	bhi.n	80023bc <HAL_SPI_Receive+0x1cc>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ba:	d102      	bne.n	80023c2 <HAL_SPI_Receive+0x1d2>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d102      	bne.n	80023c8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80023c6:	e017      	b.n	80023f8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1cd      	bne.n	800236e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	6839      	ldr	r1, [r7, #0]
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 fa46 	bl	8002868 <SPI_EndRxTransaction>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d002      	beq.n	80023e8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2220      	movs	r2, #32
 80023e6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	75fb      	strb	r3, [r7, #23]
 80023f4:	e000      	b.n	80023f8 <HAL_SPI_Receive+0x208>
  }

error :
 80023f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002408:	7dfb      	ldrb	r3, [r7, #23]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b08c      	sub	sp, #48	; 0x30
 8002416:	af00      	add	r7, sp, #0
 8002418:	60f8      	str	r0, [r7, #12]
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
 800241e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002420:	2301      	movs	r3, #1
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_SPI_TransmitReceive+0x26>
 8002434:	2302      	movs	r3, #2
 8002436:	e18a      	b.n	800274e <HAL_SPI_TransmitReceive+0x33c>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002440:	f7fe ff8a 	bl	8001358 <HAL_GetTick>
 8002444:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800244c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002456:	887b      	ldrh	r3, [r7, #2]
 8002458:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800245a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800245e:	2b01      	cmp	r3, #1
 8002460:	d00f      	beq.n	8002482 <HAL_SPI_TransmitReceive+0x70>
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002468:	d107      	bne.n	800247a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d103      	bne.n	800247a <HAL_SPI_TransmitReceive+0x68>
 8002472:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002476:	2b04      	cmp	r3, #4
 8002478:	d003      	beq.n	8002482 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800247a:	2302      	movs	r3, #2
 800247c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002480:	e15b      	b.n	800273a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_SPI_TransmitReceive+0x82>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d002      	beq.n	8002494 <HAL_SPI_TransmitReceive+0x82>
 800248e:	887b      	ldrh	r3, [r7, #2]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d103      	bne.n	800249c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800249a:	e14e      	b.n	800273a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d003      	beq.n	80024b0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2205      	movs	r2, #5
 80024ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	887a      	ldrh	r2, [r7, #2]
 80024c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	887a      	ldrh	r2, [r7, #2]
 80024c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	887a      	ldrh	r2, [r7, #2]
 80024d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	887a      	ldrh	r2, [r7, #2]
 80024d8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f0:	2b40      	cmp	r3, #64	; 0x40
 80024f2:	d007      	beq.n	8002504 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002502:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800250c:	d178      	bne.n	8002600 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <HAL_SPI_TransmitReceive+0x10a>
 8002516:	8b7b      	ldrh	r3, [r7, #26]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d166      	bne.n	80025ea <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	881a      	ldrh	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	1c9a      	adds	r2, r3, #2
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002540:	e053      	b.n	80025ea <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b02      	cmp	r3, #2
 800254e:	d11b      	bne.n	8002588 <HAL_SPI_TransmitReceive+0x176>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002554:	b29b      	uxth	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d016      	beq.n	8002588 <HAL_SPI_TransmitReceive+0x176>
 800255a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255c:	2b01      	cmp	r3, #1
 800255e:	d113      	bne.n	8002588 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002564:	881a      	ldrh	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	1c9a      	adds	r2, r3, #2
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800257a:	b29b      	uxth	r3, r3
 800257c:	3b01      	subs	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b01      	cmp	r3, #1
 8002594:	d119      	bne.n	80025ca <HAL_SPI_TransmitReceive+0x1b8>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800259a:	b29b      	uxth	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d014      	beq.n	80025ca <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025aa:	b292      	uxth	r2, r2
 80025ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b2:	1c9a      	adds	r2, r3, #2
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025c6:	2301      	movs	r3, #1
 80025c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80025ca:	f7fe fec5 	bl	8001358 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d807      	bhi.n	80025ea <HAL_SPI_TransmitReceive+0x1d8>
 80025da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e0:	d003      	beq.n	80025ea <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80025e8:	e0a7      	b.n	800273a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1a6      	bne.n	8002542 <HAL_SPI_TransmitReceive+0x130>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1a1      	bne.n	8002542 <HAL_SPI_TransmitReceive+0x130>
 80025fe:	e07c      	b.n	80026fa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <HAL_SPI_TransmitReceive+0x1fc>
 8002608:	8b7b      	ldrh	r3, [r7, #26]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d16b      	bne.n	80026e6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	330c      	adds	r3, #12
 8002618:	7812      	ldrb	r2, [r2, #0]
 800261a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800262a:	b29b      	uxth	r3, r3
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002634:	e057      	b.n	80026e6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b02      	cmp	r3, #2
 8002642:	d11c      	bne.n	800267e <HAL_SPI_TransmitReceive+0x26c>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002648:	b29b      	uxth	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d017      	beq.n	800267e <HAL_SPI_TransmitReceive+0x26c>
 800264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002650:	2b01      	cmp	r3, #1
 8002652:	d114      	bne.n	800267e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	330c      	adds	r3, #12
 800265e:	7812      	ldrb	r2, [r2, #0]
 8002660:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002670:	b29b      	uxth	r3, r3
 8002672:	3b01      	subs	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b01      	cmp	r3, #1
 800268a:	d119      	bne.n	80026c0 <HAL_SPI_TransmitReceive+0x2ae>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d014      	beq.n	80026c0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	3b01      	subs	r3, #1
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026bc:	2301      	movs	r3, #1
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80026c0:	f7fe fe4a 	bl	8001358 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d803      	bhi.n	80026d8 <HAL_SPI_TransmitReceive+0x2c6>
 80026d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d6:	d102      	bne.n	80026de <HAL_SPI_TransmitReceive+0x2cc>
 80026d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d103      	bne.n	80026e6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80026e4:	e029      	b.n	800273a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1a2      	bne.n	8002636 <HAL_SPI_TransmitReceive+0x224>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d19d      	bne.n	8002636 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 f904 	bl	800290c <SPI_EndRxTxTransaction>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d006      	beq.n	8002718 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2220      	movs	r2, #32
 8002714:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002716:	e010      	b.n	800273a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10b      	bne.n	8002738 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	e000      	b.n	800273a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002738:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800274a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800274e:	4618      	mov	r0, r3
 8002750:	3730      	adds	r7, #48	; 0x30
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b088      	sub	sp, #32
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	4613      	mov	r3, r2
 8002766:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002768:	f7fe fdf6 	bl	8001358 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002770:	1a9b      	subs	r3, r3, r2
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	4413      	add	r3, r2
 8002776:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002778:	f7fe fdee 	bl	8001358 <HAL_GetTick>
 800277c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800277e:	4b39      	ldr	r3, [pc, #228]	; (8002864 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	015b      	lsls	r3, r3, #5
 8002784:	0d1b      	lsrs	r3, r3, #20
 8002786:	69fa      	ldr	r2, [r7, #28]
 8002788:	fb02 f303 	mul.w	r3, r2, r3
 800278c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800278e:	e054      	b.n	800283a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002796:	d050      	beq.n	800283a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002798:	f7fe fdde 	bl	8001358 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	69fa      	ldr	r2, [r7, #28]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d902      	bls.n	80027ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d13d      	bne.n	800282a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80027bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027c6:	d111      	bne.n	80027ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027d0:	d004      	beq.n	80027dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027da:	d107      	bne.n	80027ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f4:	d10f      	bne.n	8002816 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002814:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e017      	b.n	800285a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	3b01      	subs	r3, #1
 8002838:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	4013      	ands	r3, r2
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	429a      	cmp	r2, r3
 8002848:	bf0c      	ite	eq
 800284a:	2301      	moveq	r3, #1
 800284c:	2300      	movne	r3, #0
 800284e:	b2db      	uxtb	r3, r3
 8002850:	461a      	mov	r2, r3
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	429a      	cmp	r2, r3
 8002856:	d19b      	bne.n	8002790 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3720      	adds	r7, #32
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20000000 	.word	0x20000000

08002868 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af02      	add	r7, sp, #8
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800287c:	d111      	bne.n	80028a2 <SPI_EndRxTransaction+0x3a>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002886:	d004      	beq.n	8002892 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002890:	d107      	bne.n	80028a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028a0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028aa:	d117      	bne.n	80028dc <SPI_EndRxTransaction+0x74>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028b4:	d112      	bne.n	80028dc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2200      	movs	r2, #0
 80028be:	2101      	movs	r1, #1
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f7ff ff49 	bl	8002758 <SPI_WaitFlagStateUntilTimeout>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d01a      	beq.n	8002902 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d0:	f043 0220 	orr.w	r2, r3, #32
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e013      	b.n	8002904 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2200      	movs	r2, #0
 80028e4:	2180      	movs	r1, #128	; 0x80
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f7ff ff36 	bl	8002758 <SPI_WaitFlagStateUntilTimeout>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d007      	beq.n	8002902 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f6:	f043 0220 	orr.w	r2, r3, #32
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e000      	b.n	8002904 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af02      	add	r7, sp, #8
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2200      	movs	r2, #0
 8002920:	2180      	movs	r1, #128	; 0x80
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f7ff ff18 	bl	8002758 <SPI_WaitFlagStateUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d007      	beq.n	800293e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002932:	f043 0220 	orr.w	r2, r3, #32
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e000      	b.n	8002940 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e03f      	b.n	80029da <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d106      	bne.n	8002974 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7fe fc28 	bl	80011c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2224      	movs	r2, #36	; 0x24
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800298a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f905 	bl	8002b9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	691a      	ldr	r2, [r3, #16]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695a      	ldr	r2, [r3, #20]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2220      	movs	r2, #32
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b08a      	sub	sp, #40	; 0x28
 80029e6:	af02      	add	r7, sp, #8
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	603b      	str	r3, [r7, #0]
 80029ee:	4613      	mov	r3, r2
 80029f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b20      	cmp	r3, #32
 8002a00:	d17c      	bne.n	8002afc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d002      	beq.n	8002a0e <HAL_UART_Transmit+0x2c>
 8002a08:	88fb      	ldrh	r3, [r7, #6]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e075      	b.n	8002afe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_UART_Transmit+0x3e>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e06e      	b.n	8002afe <HAL_UART_Transmit+0x11c>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2221      	movs	r2, #33	; 0x21
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a36:	f7fe fc8f 	bl	8001358 <HAL_GetTick>
 8002a3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	88fa      	ldrh	r2, [r7, #6]
 8002a40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	88fa      	ldrh	r2, [r7, #6]
 8002a46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a50:	d108      	bne.n	8002a64 <HAL_UART_Transmit+0x82>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d104      	bne.n	8002a64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	61bb      	str	r3, [r7, #24]
 8002a62:	e003      	b.n	8002a6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a74:	e02a      	b.n	8002acc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2180      	movs	r1, #128	; 0x80
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f840 	bl	8002b06 <UART_WaitOnFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e036      	b.n	8002afe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10b      	bne.n	8002aae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aa4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	61bb      	str	r3, [r7, #24]
 8002aac:	e007      	b.n	8002abe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	781a      	ldrb	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	3301      	adds	r3, #1
 8002abc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1cf      	bne.n	8002a76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2200      	movs	r2, #0
 8002ade:	2140      	movs	r1, #64	; 0x40
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 f810 	bl	8002b06 <UART_WaitOnFlagUntilTimeout>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e006      	b.n	8002afe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	e000      	b.n	8002afe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002afc:	2302      	movs	r3, #2
  }
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	603b      	str	r3, [r7, #0]
 8002b12:	4613      	mov	r3, r2
 8002b14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b16:	e02c      	b.n	8002b72 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1e:	d028      	beq.n	8002b72 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d007      	beq.n	8002b36 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b26:	f7fe fc17 	bl	8001358 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d21d      	bcs.n	8002b72 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b44:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695a      	ldr	r2, [r3, #20]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0201 	bic.w	r2, r2, #1
 8002b54:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e00f      	b.n	8002b92 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	bf0c      	ite	eq
 8002b82:	2301      	moveq	r3, #1
 8002b84:	2300      	movne	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	461a      	mov	r2, r3
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d0c3      	beq.n	8002b18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002bd6:	f023 030c 	bic.w	r3, r3, #12
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	68b9      	ldr	r1, [r7, #8]
 8002be0:	430b      	orrs	r3, r1
 8002be2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699a      	ldr	r2, [r3, #24]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a2c      	ldr	r2, [pc, #176]	; (8002cb0 <UART_SetConfig+0x114>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d103      	bne.n	8002c0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c04:	f7ff fa3e 	bl	8002084 <HAL_RCC_GetPCLK2Freq>
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	e002      	b.n	8002c12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c0c:	f7ff fa26 	bl	800205c <HAL_RCC_GetPCLK1Freq>
 8002c10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	009a      	lsls	r2, r3, #2
 8002c1c:	441a      	add	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c28:	4a22      	ldr	r2, [pc, #136]	; (8002cb4 <UART_SetConfig+0x118>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	0119      	lsls	r1, r3, #4
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	009a      	lsls	r2, r3, #2
 8002c3c:	441a      	add	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c48:	4b1a      	ldr	r3, [pc, #104]	; (8002cb4 <UART_SetConfig+0x118>)
 8002c4a:	fba3 0302 	umull	r0, r3, r3, r2
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	2064      	movs	r0, #100	; 0x64
 8002c52:	fb00 f303 	mul.w	r3, r0, r3
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	3332      	adds	r3, #50	; 0x32
 8002c5c:	4a15      	ldr	r2, [pc, #84]	; (8002cb4 <UART_SetConfig+0x118>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	095b      	lsrs	r3, r3, #5
 8002c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c68:	4419      	add	r1, r3
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	009a      	lsls	r2, r3, #2
 8002c74:	441a      	add	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <UART_SetConfig+0x118>)
 8002c82:	fba3 0302 	umull	r0, r3, r3, r2
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	2064      	movs	r0, #100	; 0x64
 8002c8a:	fb00 f303 	mul.w	r3, r0, r3
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	3332      	adds	r3, #50	; 0x32
 8002c94:	4a07      	ldr	r2, [pc, #28]	; (8002cb4 <UART_SetConfig+0x118>)
 8002c96:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	f003 020f 	and.w	r2, r3, #15
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	440a      	add	r2, r1
 8002ca6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ca8:	bf00      	nop
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40013800 	.word	0x40013800
 8002cb4:	51eb851f 	.word	0x51eb851f

08002cb8 <__errno>:
 8002cb8:	4b01      	ldr	r3, [pc, #4]	; (8002cc0 <__errno+0x8>)
 8002cba:	6818      	ldr	r0, [r3, #0]
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	2000000c 	.word	0x2000000c

08002cc4 <__libc_init_array>:
 8002cc4:	b570      	push	{r4, r5, r6, lr}
 8002cc6:	2600      	movs	r6, #0
 8002cc8:	4d0c      	ldr	r5, [pc, #48]	; (8002cfc <__libc_init_array+0x38>)
 8002cca:	4c0d      	ldr	r4, [pc, #52]	; (8002d00 <__libc_init_array+0x3c>)
 8002ccc:	1b64      	subs	r4, r4, r5
 8002cce:	10a4      	asrs	r4, r4, #2
 8002cd0:	42a6      	cmp	r6, r4
 8002cd2:	d109      	bne.n	8002ce8 <__libc_init_array+0x24>
 8002cd4:	f004 fc52 	bl	800757c <_init>
 8002cd8:	2600      	movs	r6, #0
 8002cda:	4d0a      	ldr	r5, [pc, #40]	; (8002d04 <__libc_init_array+0x40>)
 8002cdc:	4c0a      	ldr	r4, [pc, #40]	; (8002d08 <__libc_init_array+0x44>)
 8002cde:	1b64      	subs	r4, r4, r5
 8002ce0:	10a4      	asrs	r4, r4, #2
 8002ce2:	42a6      	cmp	r6, r4
 8002ce4:	d105      	bne.n	8002cf2 <__libc_init_array+0x2e>
 8002ce6:	bd70      	pop	{r4, r5, r6, pc}
 8002ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cec:	4798      	blx	r3
 8002cee:	3601      	adds	r6, #1
 8002cf0:	e7ee      	b.n	8002cd0 <__libc_init_array+0xc>
 8002cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cf6:	4798      	blx	r3
 8002cf8:	3601      	adds	r6, #1
 8002cfa:	e7f2      	b.n	8002ce2 <__libc_init_array+0x1e>
 8002cfc:	08007a7c 	.word	0x08007a7c
 8002d00:	08007a7c 	.word	0x08007a7c
 8002d04:	08007a7c 	.word	0x08007a7c
 8002d08:	08007a80 	.word	0x08007a80

08002d0c <memset>:
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	4402      	add	r2, r0
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d100      	bne.n	8002d16 <memset+0xa>
 8002d14:	4770      	bx	lr
 8002d16:	f803 1b01 	strb.w	r1, [r3], #1
 8002d1a:	e7f9      	b.n	8002d10 <memset+0x4>

08002d1c <__cvt>:
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d22:	461f      	mov	r7, r3
 8002d24:	bfbb      	ittet	lt
 8002d26:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002d2a:	461f      	movlt	r7, r3
 8002d2c:	2300      	movge	r3, #0
 8002d2e:	232d      	movlt	r3, #45	; 0x2d
 8002d30:	b088      	sub	sp, #32
 8002d32:	4614      	mov	r4, r2
 8002d34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002d36:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002d38:	7013      	strb	r3, [r2, #0]
 8002d3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002d3c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002d40:	f023 0820 	bic.w	r8, r3, #32
 8002d44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002d48:	d005      	beq.n	8002d56 <__cvt+0x3a>
 8002d4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002d4e:	d100      	bne.n	8002d52 <__cvt+0x36>
 8002d50:	3501      	adds	r5, #1
 8002d52:	2302      	movs	r3, #2
 8002d54:	e000      	b.n	8002d58 <__cvt+0x3c>
 8002d56:	2303      	movs	r3, #3
 8002d58:	aa07      	add	r2, sp, #28
 8002d5a:	9204      	str	r2, [sp, #16]
 8002d5c:	aa06      	add	r2, sp, #24
 8002d5e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002d62:	e9cd 3500 	strd	r3, r5, [sp]
 8002d66:	4622      	mov	r2, r4
 8002d68:	463b      	mov	r3, r7
 8002d6a:	f001 fd85 	bl	8004878 <_dtoa_r>
 8002d6e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002d72:	4606      	mov	r6, r0
 8002d74:	d102      	bne.n	8002d7c <__cvt+0x60>
 8002d76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002d78:	07db      	lsls	r3, r3, #31
 8002d7a:	d522      	bpl.n	8002dc2 <__cvt+0xa6>
 8002d7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002d80:	eb06 0905 	add.w	r9, r6, r5
 8002d84:	d110      	bne.n	8002da8 <__cvt+0x8c>
 8002d86:	7833      	ldrb	r3, [r6, #0]
 8002d88:	2b30      	cmp	r3, #48	; 0x30
 8002d8a:	d10a      	bne.n	8002da2 <__cvt+0x86>
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2300      	movs	r3, #0
 8002d90:	4620      	mov	r0, r4
 8002d92:	4639      	mov	r1, r7
 8002d94:	f7fd fe08 	bl	80009a8 <__aeabi_dcmpeq>
 8002d98:	b918      	cbnz	r0, 8002da2 <__cvt+0x86>
 8002d9a:	f1c5 0501 	rsb	r5, r5, #1
 8002d9e:	f8ca 5000 	str.w	r5, [sl]
 8002da2:	f8da 3000 	ldr.w	r3, [sl]
 8002da6:	4499      	add	r9, r3
 8002da8:	2200      	movs	r2, #0
 8002daa:	2300      	movs	r3, #0
 8002dac:	4620      	mov	r0, r4
 8002dae:	4639      	mov	r1, r7
 8002db0:	f7fd fdfa 	bl	80009a8 <__aeabi_dcmpeq>
 8002db4:	b108      	cbz	r0, 8002dba <__cvt+0x9e>
 8002db6:	f8cd 901c 	str.w	r9, [sp, #28]
 8002dba:	2230      	movs	r2, #48	; 0x30
 8002dbc:	9b07      	ldr	r3, [sp, #28]
 8002dbe:	454b      	cmp	r3, r9
 8002dc0:	d307      	bcc.n	8002dd2 <__cvt+0xb6>
 8002dc2:	4630      	mov	r0, r6
 8002dc4:	9b07      	ldr	r3, [sp, #28]
 8002dc6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002dc8:	1b9b      	subs	r3, r3, r6
 8002dca:	6013      	str	r3, [r2, #0]
 8002dcc:	b008      	add	sp, #32
 8002dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dd2:	1c59      	adds	r1, r3, #1
 8002dd4:	9107      	str	r1, [sp, #28]
 8002dd6:	701a      	strb	r2, [r3, #0]
 8002dd8:	e7f0      	b.n	8002dbc <__cvt+0xa0>

08002dda <__exponent>:
 8002dda:	4603      	mov	r3, r0
 8002ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002dde:	2900      	cmp	r1, #0
 8002de0:	f803 2b02 	strb.w	r2, [r3], #2
 8002de4:	bfb6      	itet	lt
 8002de6:	222d      	movlt	r2, #45	; 0x2d
 8002de8:	222b      	movge	r2, #43	; 0x2b
 8002dea:	4249      	neglt	r1, r1
 8002dec:	2909      	cmp	r1, #9
 8002dee:	7042      	strb	r2, [r0, #1]
 8002df0:	dd2b      	ble.n	8002e4a <__exponent+0x70>
 8002df2:	f10d 0407 	add.w	r4, sp, #7
 8002df6:	46a4      	mov	ip, r4
 8002df8:	270a      	movs	r7, #10
 8002dfa:	fb91 f6f7 	sdiv	r6, r1, r7
 8002dfe:	460a      	mov	r2, r1
 8002e00:	46a6      	mov	lr, r4
 8002e02:	fb07 1516 	mls	r5, r7, r6, r1
 8002e06:	2a63      	cmp	r2, #99	; 0x63
 8002e08:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8002e0c:	4631      	mov	r1, r6
 8002e0e:	f104 34ff 	add.w	r4, r4, #4294967295
 8002e12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002e16:	dcf0      	bgt.n	8002dfa <__exponent+0x20>
 8002e18:	3130      	adds	r1, #48	; 0x30
 8002e1a:	f1ae 0502 	sub.w	r5, lr, #2
 8002e1e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002e22:	4629      	mov	r1, r5
 8002e24:	1c44      	adds	r4, r0, #1
 8002e26:	4561      	cmp	r1, ip
 8002e28:	d30a      	bcc.n	8002e40 <__exponent+0x66>
 8002e2a:	f10d 0209 	add.w	r2, sp, #9
 8002e2e:	eba2 020e 	sub.w	r2, r2, lr
 8002e32:	4565      	cmp	r5, ip
 8002e34:	bf88      	it	hi
 8002e36:	2200      	movhi	r2, #0
 8002e38:	4413      	add	r3, r2
 8002e3a:	1a18      	subs	r0, r3, r0
 8002e3c:	b003      	add	sp, #12
 8002e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002e44:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002e48:	e7ed      	b.n	8002e26 <__exponent+0x4c>
 8002e4a:	2330      	movs	r3, #48	; 0x30
 8002e4c:	3130      	adds	r1, #48	; 0x30
 8002e4e:	7083      	strb	r3, [r0, #2]
 8002e50:	70c1      	strb	r1, [r0, #3]
 8002e52:	1d03      	adds	r3, r0, #4
 8002e54:	e7f1      	b.n	8002e3a <__exponent+0x60>
	...

08002e58 <_printf_float>:
 8002e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e5c:	b091      	sub	sp, #68	; 0x44
 8002e5e:	460c      	mov	r4, r1
 8002e60:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002e64:	4616      	mov	r6, r2
 8002e66:	461f      	mov	r7, r3
 8002e68:	4605      	mov	r5, r0
 8002e6a:	f002 fe59 	bl	8005b20 <_localeconv_r>
 8002e6e:	6803      	ldr	r3, [r0, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	9309      	str	r3, [sp, #36]	; 0x24
 8002e74:	f7fd f96c 	bl	8000150 <strlen>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	930e      	str	r3, [sp, #56]	; 0x38
 8002e7c:	f8d8 3000 	ldr.w	r3, [r8]
 8002e80:	900a      	str	r0, [sp, #40]	; 0x28
 8002e82:	3307      	adds	r3, #7
 8002e84:	f023 0307 	bic.w	r3, r3, #7
 8002e88:	f103 0208 	add.w	r2, r3, #8
 8002e8c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002e90:	f8d4 b000 	ldr.w	fp, [r4]
 8002e94:	f8c8 2000 	str.w	r2, [r8]
 8002e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002ea0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002ea4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002ea8:	930b      	str	r3, [sp, #44]	; 0x2c
 8002eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8002eae:	4640      	mov	r0, r8
 8002eb0:	4b9c      	ldr	r3, [pc, #624]	; (8003124 <_printf_float+0x2cc>)
 8002eb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002eb4:	f7fd fdaa 	bl	8000a0c <__aeabi_dcmpun>
 8002eb8:	bb70      	cbnz	r0, 8002f18 <_printf_float+0xc0>
 8002eba:	f04f 32ff 	mov.w	r2, #4294967295
 8002ebe:	4640      	mov	r0, r8
 8002ec0:	4b98      	ldr	r3, [pc, #608]	; (8003124 <_printf_float+0x2cc>)
 8002ec2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002ec4:	f7fd fd84 	bl	80009d0 <__aeabi_dcmple>
 8002ec8:	bb30      	cbnz	r0, 8002f18 <_printf_float+0xc0>
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2300      	movs	r3, #0
 8002ece:	4640      	mov	r0, r8
 8002ed0:	4651      	mov	r1, sl
 8002ed2:	f7fd fd73 	bl	80009bc <__aeabi_dcmplt>
 8002ed6:	b110      	cbz	r0, 8002ede <_printf_float+0x86>
 8002ed8:	232d      	movs	r3, #45	; 0x2d
 8002eda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ede:	4b92      	ldr	r3, [pc, #584]	; (8003128 <_printf_float+0x2d0>)
 8002ee0:	4892      	ldr	r0, [pc, #584]	; (800312c <_printf_float+0x2d4>)
 8002ee2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002ee6:	bf94      	ite	ls
 8002ee8:	4698      	movls	r8, r3
 8002eea:	4680      	movhi	r8, r0
 8002eec:	2303      	movs	r3, #3
 8002eee:	f04f 0a00 	mov.w	sl, #0
 8002ef2:	6123      	str	r3, [r4, #16]
 8002ef4:	f02b 0304 	bic.w	r3, fp, #4
 8002ef8:	6023      	str	r3, [r4, #0]
 8002efa:	4633      	mov	r3, r6
 8002efc:	4621      	mov	r1, r4
 8002efe:	4628      	mov	r0, r5
 8002f00:	9700      	str	r7, [sp, #0]
 8002f02:	aa0f      	add	r2, sp, #60	; 0x3c
 8002f04:	f000 f9d4 	bl	80032b0 <_printf_common>
 8002f08:	3001      	adds	r0, #1
 8002f0a:	f040 8090 	bne.w	800302e <_printf_float+0x1d6>
 8002f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f12:	b011      	add	sp, #68	; 0x44
 8002f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f18:	4642      	mov	r2, r8
 8002f1a:	4653      	mov	r3, sl
 8002f1c:	4640      	mov	r0, r8
 8002f1e:	4651      	mov	r1, sl
 8002f20:	f7fd fd74 	bl	8000a0c <__aeabi_dcmpun>
 8002f24:	b148      	cbz	r0, 8002f3a <_printf_float+0xe2>
 8002f26:	f1ba 0f00 	cmp.w	sl, #0
 8002f2a:	bfb8      	it	lt
 8002f2c:	232d      	movlt	r3, #45	; 0x2d
 8002f2e:	4880      	ldr	r0, [pc, #512]	; (8003130 <_printf_float+0x2d8>)
 8002f30:	bfb8      	it	lt
 8002f32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002f36:	4b7f      	ldr	r3, [pc, #508]	; (8003134 <_printf_float+0x2dc>)
 8002f38:	e7d3      	b.n	8002ee2 <_printf_float+0x8a>
 8002f3a:	6863      	ldr	r3, [r4, #4]
 8002f3c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	d142      	bne.n	8002fca <_printf_float+0x172>
 8002f44:	2306      	movs	r3, #6
 8002f46:	6063      	str	r3, [r4, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	9206      	str	r2, [sp, #24]
 8002f4c:	aa0e      	add	r2, sp, #56	; 0x38
 8002f4e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002f52:	aa0d      	add	r2, sp, #52	; 0x34
 8002f54:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002f58:	9203      	str	r2, [sp, #12]
 8002f5a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002f5e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002f62:	6023      	str	r3, [r4, #0]
 8002f64:	6863      	ldr	r3, [r4, #4]
 8002f66:	4642      	mov	r2, r8
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	4628      	mov	r0, r5
 8002f6c:	4653      	mov	r3, sl
 8002f6e:	910b      	str	r1, [sp, #44]	; 0x2c
 8002f70:	f7ff fed4 	bl	8002d1c <__cvt>
 8002f74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002f76:	4680      	mov	r8, r0
 8002f78:	2947      	cmp	r1, #71	; 0x47
 8002f7a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002f7c:	d108      	bne.n	8002f90 <_printf_float+0x138>
 8002f7e:	1cc8      	adds	r0, r1, #3
 8002f80:	db02      	blt.n	8002f88 <_printf_float+0x130>
 8002f82:	6863      	ldr	r3, [r4, #4]
 8002f84:	4299      	cmp	r1, r3
 8002f86:	dd40      	ble.n	800300a <_printf_float+0x1b2>
 8002f88:	f1a9 0902 	sub.w	r9, r9, #2
 8002f8c:	fa5f f989 	uxtb.w	r9, r9
 8002f90:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002f94:	d81f      	bhi.n	8002fd6 <_printf_float+0x17e>
 8002f96:	464a      	mov	r2, r9
 8002f98:	3901      	subs	r1, #1
 8002f9a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002f9e:	910d      	str	r1, [sp, #52]	; 0x34
 8002fa0:	f7ff ff1b 	bl	8002dda <__exponent>
 8002fa4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002fa6:	4682      	mov	sl, r0
 8002fa8:	1813      	adds	r3, r2, r0
 8002faa:	2a01      	cmp	r2, #1
 8002fac:	6123      	str	r3, [r4, #16]
 8002fae:	dc02      	bgt.n	8002fb6 <_printf_float+0x15e>
 8002fb0:	6822      	ldr	r2, [r4, #0]
 8002fb2:	07d2      	lsls	r2, r2, #31
 8002fb4:	d501      	bpl.n	8002fba <_printf_float+0x162>
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	6123      	str	r3, [r4, #16]
 8002fba:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d09b      	beq.n	8002efa <_printf_float+0xa2>
 8002fc2:	232d      	movs	r3, #45	; 0x2d
 8002fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fc8:	e797      	b.n	8002efa <_printf_float+0xa2>
 8002fca:	2947      	cmp	r1, #71	; 0x47
 8002fcc:	d1bc      	bne.n	8002f48 <_printf_float+0xf0>
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1ba      	bne.n	8002f48 <_printf_float+0xf0>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e7b7      	b.n	8002f46 <_printf_float+0xee>
 8002fd6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002fda:	d118      	bne.n	800300e <_printf_float+0x1b6>
 8002fdc:	2900      	cmp	r1, #0
 8002fde:	6863      	ldr	r3, [r4, #4]
 8002fe0:	dd0b      	ble.n	8002ffa <_printf_float+0x1a2>
 8002fe2:	6121      	str	r1, [r4, #16]
 8002fe4:	b913      	cbnz	r3, 8002fec <_printf_float+0x194>
 8002fe6:	6822      	ldr	r2, [r4, #0]
 8002fe8:	07d0      	lsls	r0, r2, #31
 8002fea:	d502      	bpl.n	8002ff2 <_printf_float+0x19a>
 8002fec:	3301      	adds	r3, #1
 8002fee:	440b      	add	r3, r1
 8002ff0:	6123      	str	r3, [r4, #16]
 8002ff2:	f04f 0a00 	mov.w	sl, #0
 8002ff6:	65a1      	str	r1, [r4, #88]	; 0x58
 8002ff8:	e7df      	b.n	8002fba <_printf_float+0x162>
 8002ffa:	b913      	cbnz	r3, 8003002 <_printf_float+0x1aa>
 8002ffc:	6822      	ldr	r2, [r4, #0]
 8002ffe:	07d2      	lsls	r2, r2, #31
 8003000:	d501      	bpl.n	8003006 <_printf_float+0x1ae>
 8003002:	3302      	adds	r3, #2
 8003004:	e7f4      	b.n	8002ff0 <_printf_float+0x198>
 8003006:	2301      	movs	r3, #1
 8003008:	e7f2      	b.n	8002ff0 <_printf_float+0x198>
 800300a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800300e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003010:	4299      	cmp	r1, r3
 8003012:	db05      	blt.n	8003020 <_printf_float+0x1c8>
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	6121      	str	r1, [r4, #16]
 8003018:	07d8      	lsls	r0, r3, #31
 800301a:	d5ea      	bpl.n	8002ff2 <_printf_float+0x19a>
 800301c:	1c4b      	adds	r3, r1, #1
 800301e:	e7e7      	b.n	8002ff0 <_printf_float+0x198>
 8003020:	2900      	cmp	r1, #0
 8003022:	bfcc      	ite	gt
 8003024:	2201      	movgt	r2, #1
 8003026:	f1c1 0202 	rsble	r2, r1, #2
 800302a:	4413      	add	r3, r2
 800302c:	e7e0      	b.n	8002ff0 <_printf_float+0x198>
 800302e:	6823      	ldr	r3, [r4, #0]
 8003030:	055a      	lsls	r2, r3, #21
 8003032:	d407      	bmi.n	8003044 <_printf_float+0x1ec>
 8003034:	6923      	ldr	r3, [r4, #16]
 8003036:	4642      	mov	r2, r8
 8003038:	4631      	mov	r1, r6
 800303a:	4628      	mov	r0, r5
 800303c:	47b8      	blx	r7
 800303e:	3001      	adds	r0, #1
 8003040:	d12b      	bne.n	800309a <_printf_float+0x242>
 8003042:	e764      	b.n	8002f0e <_printf_float+0xb6>
 8003044:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003048:	f240 80dd 	bls.w	8003206 <_printf_float+0x3ae>
 800304c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003050:	2200      	movs	r2, #0
 8003052:	2300      	movs	r3, #0
 8003054:	f7fd fca8 	bl	80009a8 <__aeabi_dcmpeq>
 8003058:	2800      	cmp	r0, #0
 800305a:	d033      	beq.n	80030c4 <_printf_float+0x26c>
 800305c:	2301      	movs	r3, #1
 800305e:	4631      	mov	r1, r6
 8003060:	4628      	mov	r0, r5
 8003062:	4a35      	ldr	r2, [pc, #212]	; (8003138 <_printf_float+0x2e0>)
 8003064:	47b8      	blx	r7
 8003066:	3001      	adds	r0, #1
 8003068:	f43f af51 	beq.w	8002f0e <_printf_float+0xb6>
 800306c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003070:	429a      	cmp	r2, r3
 8003072:	db02      	blt.n	800307a <_printf_float+0x222>
 8003074:	6823      	ldr	r3, [r4, #0]
 8003076:	07d8      	lsls	r0, r3, #31
 8003078:	d50f      	bpl.n	800309a <_printf_float+0x242>
 800307a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800307e:	4631      	mov	r1, r6
 8003080:	4628      	mov	r0, r5
 8003082:	47b8      	blx	r7
 8003084:	3001      	adds	r0, #1
 8003086:	f43f af42 	beq.w	8002f0e <_printf_float+0xb6>
 800308a:	f04f 0800 	mov.w	r8, #0
 800308e:	f104 091a 	add.w	r9, r4, #26
 8003092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003094:	3b01      	subs	r3, #1
 8003096:	4543      	cmp	r3, r8
 8003098:	dc09      	bgt.n	80030ae <_printf_float+0x256>
 800309a:	6823      	ldr	r3, [r4, #0]
 800309c:	079b      	lsls	r3, r3, #30
 800309e:	f100 8102 	bmi.w	80032a6 <_printf_float+0x44e>
 80030a2:	68e0      	ldr	r0, [r4, #12]
 80030a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80030a6:	4298      	cmp	r0, r3
 80030a8:	bfb8      	it	lt
 80030aa:	4618      	movlt	r0, r3
 80030ac:	e731      	b.n	8002f12 <_printf_float+0xba>
 80030ae:	2301      	movs	r3, #1
 80030b0:	464a      	mov	r2, r9
 80030b2:	4631      	mov	r1, r6
 80030b4:	4628      	mov	r0, r5
 80030b6:	47b8      	blx	r7
 80030b8:	3001      	adds	r0, #1
 80030ba:	f43f af28 	beq.w	8002f0e <_printf_float+0xb6>
 80030be:	f108 0801 	add.w	r8, r8, #1
 80030c2:	e7e6      	b.n	8003092 <_printf_float+0x23a>
 80030c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	dc38      	bgt.n	800313c <_printf_float+0x2e4>
 80030ca:	2301      	movs	r3, #1
 80030cc:	4631      	mov	r1, r6
 80030ce:	4628      	mov	r0, r5
 80030d0:	4a19      	ldr	r2, [pc, #100]	; (8003138 <_printf_float+0x2e0>)
 80030d2:	47b8      	blx	r7
 80030d4:	3001      	adds	r0, #1
 80030d6:	f43f af1a 	beq.w	8002f0e <_printf_float+0xb6>
 80030da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80030de:	4313      	orrs	r3, r2
 80030e0:	d102      	bne.n	80030e8 <_printf_float+0x290>
 80030e2:	6823      	ldr	r3, [r4, #0]
 80030e4:	07d9      	lsls	r1, r3, #31
 80030e6:	d5d8      	bpl.n	800309a <_printf_float+0x242>
 80030e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80030ec:	4631      	mov	r1, r6
 80030ee:	4628      	mov	r0, r5
 80030f0:	47b8      	blx	r7
 80030f2:	3001      	adds	r0, #1
 80030f4:	f43f af0b 	beq.w	8002f0e <_printf_float+0xb6>
 80030f8:	f04f 0900 	mov.w	r9, #0
 80030fc:	f104 0a1a 	add.w	sl, r4, #26
 8003100:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003102:	425b      	negs	r3, r3
 8003104:	454b      	cmp	r3, r9
 8003106:	dc01      	bgt.n	800310c <_printf_float+0x2b4>
 8003108:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800310a:	e794      	b.n	8003036 <_printf_float+0x1de>
 800310c:	2301      	movs	r3, #1
 800310e:	4652      	mov	r2, sl
 8003110:	4631      	mov	r1, r6
 8003112:	4628      	mov	r0, r5
 8003114:	47b8      	blx	r7
 8003116:	3001      	adds	r0, #1
 8003118:	f43f aef9 	beq.w	8002f0e <_printf_float+0xb6>
 800311c:	f109 0901 	add.w	r9, r9, #1
 8003120:	e7ee      	b.n	8003100 <_printf_float+0x2a8>
 8003122:	bf00      	nop
 8003124:	7fefffff 	.word	0x7fefffff
 8003128:	080075dc 	.word	0x080075dc
 800312c:	080075e0 	.word	0x080075e0
 8003130:	080075e8 	.word	0x080075e8
 8003134:	080075e4 	.word	0x080075e4
 8003138:	080075ec 	.word	0x080075ec
 800313c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800313e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003140:	429a      	cmp	r2, r3
 8003142:	bfa8      	it	ge
 8003144:	461a      	movge	r2, r3
 8003146:	2a00      	cmp	r2, #0
 8003148:	4691      	mov	r9, r2
 800314a:	dc37      	bgt.n	80031bc <_printf_float+0x364>
 800314c:	f04f 0b00 	mov.w	fp, #0
 8003150:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003154:	f104 021a 	add.w	r2, r4, #26
 8003158:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800315c:	ebaa 0309 	sub.w	r3, sl, r9
 8003160:	455b      	cmp	r3, fp
 8003162:	dc33      	bgt.n	80031cc <_printf_float+0x374>
 8003164:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003168:	429a      	cmp	r2, r3
 800316a:	db3b      	blt.n	80031e4 <_printf_float+0x38c>
 800316c:	6823      	ldr	r3, [r4, #0]
 800316e:	07da      	lsls	r2, r3, #31
 8003170:	d438      	bmi.n	80031e4 <_printf_float+0x38c>
 8003172:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003174:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003176:	eba3 020a 	sub.w	r2, r3, sl
 800317a:	eba3 0901 	sub.w	r9, r3, r1
 800317e:	4591      	cmp	r9, r2
 8003180:	bfa8      	it	ge
 8003182:	4691      	movge	r9, r2
 8003184:	f1b9 0f00 	cmp.w	r9, #0
 8003188:	dc34      	bgt.n	80031f4 <_printf_float+0x39c>
 800318a:	f04f 0800 	mov.w	r8, #0
 800318e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003192:	f104 0a1a 	add.w	sl, r4, #26
 8003196:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	eba3 0309 	sub.w	r3, r3, r9
 80031a0:	4543      	cmp	r3, r8
 80031a2:	f77f af7a 	ble.w	800309a <_printf_float+0x242>
 80031a6:	2301      	movs	r3, #1
 80031a8:	4652      	mov	r2, sl
 80031aa:	4631      	mov	r1, r6
 80031ac:	4628      	mov	r0, r5
 80031ae:	47b8      	blx	r7
 80031b0:	3001      	adds	r0, #1
 80031b2:	f43f aeac 	beq.w	8002f0e <_printf_float+0xb6>
 80031b6:	f108 0801 	add.w	r8, r8, #1
 80031ba:	e7ec      	b.n	8003196 <_printf_float+0x33e>
 80031bc:	4613      	mov	r3, r2
 80031be:	4631      	mov	r1, r6
 80031c0:	4642      	mov	r2, r8
 80031c2:	4628      	mov	r0, r5
 80031c4:	47b8      	blx	r7
 80031c6:	3001      	adds	r0, #1
 80031c8:	d1c0      	bne.n	800314c <_printf_float+0x2f4>
 80031ca:	e6a0      	b.n	8002f0e <_printf_float+0xb6>
 80031cc:	2301      	movs	r3, #1
 80031ce:	4631      	mov	r1, r6
 80031d0:	4628      	mov	r0, r5
 80031d2:	920b      	str	r2, [sp, #44]	; 0x2c
 80031d4:	47b8      	blx	r7
 80031d6:	3001      	adds	r0, #1
 80031d8:	f43f ae99 	beq.w	8002f0e <_printf_float+0xb6>
 80031dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80031de:	f10b 0b01 	add.w	fp, fp, #1
 80031e2:	e7b9      	b.n	8003158 <_printf_float+0x300>
 80031e4:	4631      	mov	r1, r6
 80031e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80031ea:	4628      	mov	r0, r5
 80031ec:	47b8      	blx	r7
 80031ee:	3001      	adds	r0, #1
 80031f0:	d1bf      	bne.n	8003172 <_printf_float+0x31a>
 80031f2:	e68c      	b.n	8002f0e <_printf_float+0xb6>
 80031f4:	464b      	mov	r3, r9
 80031f6:	4631      	mov	r1, r6
 80031f8:	4628      	mov	r0, r5
 80031fa:	eb08 020a 	add.w	r2, r8, sl
 80031fe:	47b8      	blx	r7
 8003200:	3001      	adds	r0, #1
 8003202:	d1c2      	bne.n	800318a <_printf_float+0x332>
 8003204:	e683      	b.n	8002f0e <_printf_float+0xb6>
 8003206:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003208:	2a01      	cmp	r2, #1
 800320a:	dc01      	bgt.n	8003210 <_printf_float+0x3b8>
 800320c:	07db      	lsls	r3, r3, #31
 800320e:	d537      	bpl.n	8003280 <_printf_float+0x428>
 8003210:	2301      	movs	r3, #1
 8003212:	4642      	mov	r2, r8
 8003214:	4631      	mov	r1, r6
 8003216:	4628      	mov	r0, r5
 8003218:	47b8      	blx	r7
 800321a:	3001      	adds	r0, #1
 800321c:	f43f ae77 	beq.w	8002f0e <_printf_float+0xb6>
 8003220:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003224:	4631      	mov	r1, r6
 8003226:	4628      	mov	r0, r5
 8003228:	47b8      	blx	r7
 800322a:	3001      	adds	r0, #1
 800322c:	f43f ae6f 	beq.w	8002f0e <_printf_float+0xb6>
 8003230:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003234:	2200      	movs	r2, #0
 8003236:	2300      	movs	r3, #0
 8003238:	f7fd fbb6 	bl	80009a8 <__aeabi_dcmpeq>
 800323c:	b9d8      	cbnz	r0, 8003276 <_printf_float+0x41e>
 800323e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003240:	f108 0201 	add.w	r2, r8, #1
 8003244:	3b01      	subs	r3, #1
 8003246:	4631      	mov	r1, r6
 8003248:	4628      	mov	r0, r5
 800324a:	47b8      	blx	r7
 800324c:	3001      	adds	r0, #1
 800324e:	d10e      	bne.n	800326e <_printf_float+0x416>
 8003250:	e65d      	b.n	8002f0e <_printf_float+0xb6>
 8003252:	2301      	movs	r3, #1
 8003254:	464a      	mov	r2, r9
 8003256:	4631      	mov	r1, r6
 8003258:	4628      	mov	r0, r5
 800325a:	47b8      	blx	r7
 800325c:	3001      	adds	r0, #1
 800325e:	f43f ae56 	beq.w	8002f0e <_printf_float+0xb6>
 8003262:	f108 0801 	add.w	r8, r8, #1
 8003266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003268:	3b01      	subs	r3, #1
 800326a:	4543      	cmp	r3, r8
 800326c:	dcf1      	bgt.n	8003252 <_printf_float+0x3fa>
 800326e:	4653      	mov	r3, sl
 8003270:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003274:	e6e0      	b.n	8003038 <_printf_float+0x1e0>
 8003276:	f04f 0800 	mov.w	r8, #0
 800327a:	f104 091a 	add.w	r9, r4, #26
 800327e:	e7f2      	b.n	8003266 <_printf_float+0x40e>
 8003280:	2301      	movs	r3, #1
 8003282:	4642      	mov	r2, r8
 8003284:	e7df      	b.n	8003246 <_printf_float+0x3ee>
 8003286:	2301      	movs	r3, #1
 8003288:	464a      	mov	r2, r9
 800328a:	4631      	mov	r1, r6
 800328c:	4628      	mov	r0, r5
 800328e:	47b8      	blx	r7
 8003290:	3001      	adds	r0, #1
 8003292:	f43f ae3c 	beq.w	8002f0e <_printf_float+0xb6>
 8003296:	f108 0801 	add.w	r8, r8, #1
 800329a:	68e3      	ldr	r3, [r4, #12]
 800329c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800329e:	1a5b      	subs	r3, r3, r1
 80032a0:	4543      	cmp	r3, r8
 80032a2:	dcf0      	bgt.n	8003286 <_printf_float+0x42e>
 80032a4:	e6fd      	b.n	80030a2 <_printf_float+0x24a>
 80032a6:	f04f 0800 	mov.w	r8, #0
 80032aa:	f104 0919 	add.w	r9, r4, #25
 80032ae:	e7f4      	b.n	800329a <_printf_float+0x442>

080032b0 <_printf_common>:
 80032b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032b4:	4616      	mov	r6, r2
 80032b6:	4699      	mov	r9, r3
 80032b8:	688a      	ldr	r2, [r1, #8]
 80032ba:	690b      	ldr	r3, [r1, #16]
 80032bc:	4607      	mov	r7, r0
 80032be:	4293      	cmp	r3, r2
 80032c0:	bfb8      	it	lt
 80032c2:	4613      	movlt	r3, r2
 80032c4:	6033      	str	r3, [r6, #0]
 80032c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032ca:	460c      	mov	r4, r1
 80032cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032d0:	b10a      	cbz	r2, 80032d6 <_printf_common+0x26>
 80032d2:	3301      	adds	r3, #1
 80032d4:	6033      	str	r3, [r6, #0]
 80032d6:	6823      	ldr	r3, [r4, #0]
 80032d8:	0699      	lsls	r1, r3, #26
 80032da:	bf42      	ittt	mi
 80032dc:	6833      	ldrmi	r3, [r6, #0]
 80032de:	3302      	addmi	r3, #2
 80032e0:	6033      	strmi	r3, [r6, #0]
 80032e2:	6825      	ldr	r5, [r4, #0]
 80032e4:	f015 0506 	ands.w	r5, r5, #6
 80032e8:	d106      	bne.n	80032f8 <_printf_common+0x48>
 80032ea:	f104 0a19 	add.w	sl, r4, #25
 80032ee:	68e3      	ldr	r3, [r4, #12]
 80032f0:	6832      	ldr	r2, [r6, #0]
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	42ab      	cmp	r3, r5
 80032f6:	dc28      	bgt.n	800334a <_printf_common+0x9a>
 80032f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80032fc:	1e13      	subs	r3, r2, #0
 80032fe:	6822      	ldr	r2, [r4, #0]
 8003300:	bf18      	it	ne
 8003302:	2301      	movne	r3, #1
 8003304:	0692      	lsls	r2, r2, #26
 8003306:	d42d      	bmi.n	8003364 <_printf_common+0xb4>
 8003308:	4649      	mov	r1, r9
 800330a:	4638      	mov	r0, r7
 800330c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003310:	47c0      	blx	r8
 8003312:	3001      	adds	r0, #1
 8003314:	d020      	beq.n	8003358 <_printf_common+0xa8>
 8003316:	6823      	ldr	r3, [r4, #0]
 8003318:	68e5      	ldr	r5, [r4, #12]
 800331a:	f003 0306 	and.w	r3, r3, #6
 800331e:	2b04      	cmp	r3, #4
 8003320:	bf18      	it	ne
 8003322:	2500      	movne	r5, #0
 8003324:	6832      	ldr	r2, [r6, #0]
 8003326:	f04f 0600 	mov.w	r6, #0
 800332a:	68a3      	ldr	r3, [r4, #8]
 800332c:	bf08      	it	eq
 800332e:	1aad      	subeq	r5, r5, r2
 8003330:	6922      	ldr	r2, [r4, #16]
 8003332:	bf08      	it	eq
 8003334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003338:	4293      	cmp	r3, r2
 800333a:	bfc4      	itt	gt
 800333c:	1a9b      	subgt	r3, r3, r2
 800333e:	18ed      	addgt	r5, r5, r3
 8003340:	341a      	adds	r4, #26
 8003342:	42b5      	cmp	r5, r6
 8003344:	d11a      	bne.n	800337c <_printf_common+0xcc>
 8003346:	2000      	movs	r0, #0
 8003348:	e008      	b.n	800335c <_printf_common+0xac>
 800334a:	2301      	movs	r3, #1
 800334c:	4652      	mov	r2, sl
 800334e:	4649      	mov	r1, r9
 8003350:	4638      	mov	r0, r7
 8003352:	47c0      	blx	r8
 8003354:	3001      	adds	r0, #1
 8003356:	d103      	bne.n	8003360 <_printf_common+0xb0>
 8003358:	f04f 30ff 	mov.w	r0, #4294967295
 800335c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003360:	3501      	adds	r5, #1
 8003362:	e7c4      	b.n	80032ee <_printf_common+0x3e>
 8003364:	2030      	movs	r0, #48	; 0x30
 8003366:	18e1      	adds	r1, r4, r3
 8003368:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003372:	4422      	add	r2, r4
 8003374:	3302      	adds	r3, #2
 8003376:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800337a:	e7c5      	b.n	8003308 <_printf_common+0x58>
 800337c:	2301      	movs	r3, #1
 800337e:	4622      	mov	r2, r4
 8003380:	4649      	mov	r1, r9
 8003382:	4638      	mov	r0, r7
 8003384:	47c0      	blx	r8
 8003386:	3001      	adds	r0, #1
 8003388:	d0e6      	beq.n	8003358 <_printf_common+0xa8>
 800338a:	3601      	adds	r6, #1
 800338c:	e7d9      	b.n	8003342 <_printf_common+0x92>
	...

08003390 <_printf_i>:
 8003390:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003394:	7e0f      	ldrb	r7, [r1, #24]
 8003396:	4691      	mov	r9, r2
 8003398:	2f78      	cmp	r7, #120	; 0x78
 800339a:	4680      	mov	r8, r0
 800339c:	460c      	mov	r4, r1
 800339e:	469a      	mov	sl, r3
 80033a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80033a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80033a6:	d807      	bhi.n	80033b8 <_printf_i+0x28>
 80033a8:	2f62      	cmp	r7, #98	; 0x62
 80033aa:	d80a      	bhi.n	80033c2 <_printf_i+0x32>
 80033ac:	2f00      	cmp	r7, #0
 80033ae:	f000 80d9 	beq.w	8003564 <_printf_i+0x1d4>
 80033b2:	2f58      	cmp	r7, #88	; 0x58
 80033b4:	f000 80a4 	beq.w	8003500 <_printf_i+0x170>
 80033b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033c0:	e03a      	b.n	8003438 <_printf_i+0xa8>
 80033c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033c6:	2b15      	cmp	r3, #21
 80033c8:	d8f6      	bhi.n	80033b8 <_printf_i+0x28>
 80033ca:	a101      	add	r1, pc, #4	; (adr r1, 80033d0 <_printf_i+0x40>)
 80033cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033d0:	08003429 	.word	0x08003429
 80033d4:	0800343d 	.word	0x0800343d
 80033d8:	080033b9 	.word	0x080033b9
 80033dc:	080033b9 	.word	0x080033b9
 80033e0:	080033b9 	.word	0x080033b9
 80033e4:	080033b9 	.word	0x080033b9
 80033e8:	0800343d 	.word	0x0800343d
 80033ec:	080033b9 	.word	0x080033b9
 80033f0:	080033b9 	.word	0x080033b9
 80033f4:	080033b9 	.word	0x080033b9
 80033f8:	080033b9 	.word	0x080033b9
 80033fc:	0800354b 	.word	0x0800354b
 8003400:	0800346d 	.word	0x0800346d
 8003404:	0800352d 	.word	0x0800352d
 8003408:	080033b9 	.word	0x080033b9
 800340c:	080033b9 	.word	0x080033b9
 8003410:	0800356d 	.word	0x0800356d
 8003414:	080033b9 	.word	0x080033b9
 8003418:	0800346d 	.word	0x0800346d
 800341c:	080033b9 	.word	0x080033b9
 8003420:	080033b9 	.word	0x080033b9
 8003424:	08003535 	.word	0x08003535
 8003428:	682b      	ldr	r3, [r5, #0]
 800342a:	1d1a      	adds	r2, r3, #4
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	602a      	str	r2, [r5, #0]
 8003430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003434:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003438:	2301      	movs	r3, #1
 800343a:	e0a4      	b.n	8003586 <_printf_i+0x1f6>
 800343c:	6820      	ldr	r0, [r4, #0]
 800343e:	6829      	ldr	r1, [r5, #0]
 8003440:	0606      	lsls	r6, r0, #24
 8003442:	f101 0304 	add.w	r3, r1, #4
 8003446:	d50a      	bpl.n	800345e <_printf_i+0xce>
 8003448:	680e      	ldr	r6, [r1, #0]
 800344a:	602b      	str	r3, [r5, #0]
 800344c:	2e00      	cmp	r6, #0
 800344e:	da03      	bge.n	8003458 <_printf_i+0xc8>
 8003450:	232d      	movs	r3, #45	; 0x2d
 8003452:	4276      	negs	r6, r6
 8003454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003458:	230a      	movs	r3, #10
 800345a:	485e      	ldr	r0, [pc, #376]	; (80035d4 <_printf_i+0x244>)
 800345c:	e019      	b.n	8003492 <_printf_i+0x102>
 800345e:	680e      	ldr	r6, [r1, #0]
 8003460:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003464:	602b      	str	r3, [r5, #0]
 8003466:	bf18      	it	ne
 8003468:	b236      	sxthne	r6, r6
 800346a:	e7ef      	b.n	800344c <_printf_i+0xbc>
 800346c:	682b      	ldr	r3, [r5, #0]
 800346e:	6820      	ldr	r0, [r4, #0]
 8003470:	1d19      	adds	r1, r3, #4
 8003472:	6029      	str	r1, [r5, #0]
 8003474:	0601      	lsls	r1, r0, #24
 8003476:	d501      	bpl.n	800347c <_printf_i+0xec>
 8003478:	681e      	ldr	r6, [r3, #0]
 800347a:	e002      	b.n	8003482 <_printf_i+0xf2>
 800347c:	0646      	lsls	r6, r0, #25
 800347e:	d5fb      	bpl.n	8003478 <_printf_i+0xe8>
 8003480:	881e      	ldrh	r6, [r3, #0]
 8003482:	2f6f      	cmp	r7, #111	; 0x6f
 8003484:	bf0c      	ite	eq
 8003486:	2308      	moveq	r3, #8
 8003488:	230a      	movne	r3, #10
 800348a:	4852      	ldr	r0, [pc, #328]	; (80035d4 <_printf_i+0x244>)
 800348c:	2100      	movs	r1, #0
 800348e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003492:	6865      	ldr	r5, [r4, #4]
 8003494:	2d00      	cmp	r5, #0
 8003496:	bfa8      	it	ge
 8003498:	6821      	ldrge	r1, [r4, #0]
 800349a:	60a5      	str	r5, [r4, #8]
 800349c:	bfa4      	itt	ge
 800349e:	f021 0104 	bicge.w	r1, r1, #4
 80034a2:	6021      	strge	r1, [r4, #0]
 80034a4:	b90e      	cbnz	r6, 80034aa <_printf_i+0x11a>
 80034a6:	2d00      	cmp	r5, #0
 80034a8:	d04d      	beq.n	8003546 <_printf_i+0x1b6>
 80034aa:	4615      	mov	r5, r2
 80034ac:	fbb6 f1f3 	udiv	r1, r6, r3
 80034b0:	fb03 6711 	mls	r7, r3, r1, r6
 80034b4:	5dc7      	ldrb	r7, [r0, r7]
 80034b6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80034ba:	4637      	mov	r7, r6
 80034bc:	42bb      	cmp	r3, r7
 80034be:	460e      	mov	r6, r1
 80034c0:	d9f4      	bls.n	80034ac <_printf_i+0x11c>
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d10b      	bne.n	80034de <_printf_i+0x14e>
 80034c6:	6823      	ldr	r3, [r4, #0]
 80034c8:	07de      	lsls	r6, r3, #31
 80034ca:	d508      	bpl.n	80034de <_printf_i+0x14e>
 80034cc:	6923      	ldr	r3, [r4, #16]
 80034ce:	6861      	ldr	r1, [r4, #4]
 80034d0:	4299      	cmp	r1, r3
 80034d2:	bfde      	ittt	le
 80034d4:	2330      	movle	r3, #48	; 0x30
 80034d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034de:	1b52      	subs	r2, r2, r5
 80034e0:	6122      	str	r2, [r4, #16]
 80034e2:	464b      	mov	r3, r9
 80034e4:	4621      	mov	r1, r4
 80034e6:	4640      	mov	r0, r8
 80034e8:	f8cd a000 	str.w	sl, [sp]
 80034ec:	aa03      	add	r2, sp, #12
 80034ee:	f7ff fedf 	bl	80032b0 <_printf_common>
 80034f2:	3001      	adds	r0, #1
 80034f4:	d14c      	bne.n	8003590 <_printf_i+0x200>
 80034f6:	f04f 30ff 	mov.w	r0, #4294967295
 80034fa:	b004      	add	sp, #16
 80034fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003500:	4834      	ldr	r0, [pc, #208]	; (80035d4 <_printf_i+0x244>)
 8003502:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003506:	6829      	ldr	r1, [r5, #0]
 8003508:	6823      	ldr	r3, [r4, #0]
 800350a:	f851 6b04 	ldr.w	r6, [r1], #4
 800350e:	6029      	str	r1, [r5, #0]
 8003510:	061d      	lsls	r5, r3, #24
 8003512:	d514      	bpl.n	800353e <_printf_i+0x1ae>
 8003514:	07df      	lsls	r7, r3, #31
 8003516:	bf44      	itt	mi
 8003518:	f043 0320 	orrmi.w	r3, r3, #32
 800351c:	6023      	strmi	r3, [r4, #0]
 800351e:	b91e      	cbnz	r6, 8003528 <_printf_i+0x198>
 8003520:	6823      	ldr	r3, [r4, #0]
 8003522:	f023 0320 	bic.w	r3, r3, #32
 8003526:	6023      	str	r3, [r4, #0]
 8003528:	2310      	movs	r3, #16
 800352a:	e7af      	b.n	800348c <_printf_i+0xfc>
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	f043 0320 	orr.w	r3, r3, #32
 8003532:	6023      	str	r3, [r4, #0]
 8003534:	2378      	movs	r3, #120	; 0x78
 8003536:	4828      	ldr	r0, [pc, #160]	; (80035d8 <_printf_i+0x248>)
 8003538:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800353c:	e7e3      	b.n	8003506 <_printf_i+0x176>
 800353e:	0659      	lsls	r1, r3, #25
 8003540:	bf48      	it	mi
 8003542:	b2b6      	uxthmi	r6, r6
 8003544:	e7e6      	b.n	8003514 <_printf_i+0x184>
 8003546:	4615      	mov	r5, r2
 8003548:	e7bb      	b.n	80034c2 <_printf_i+0x132>
 800354a:	682b      	ldr	r3, [r5, #0]
 800354c:	6826      	ldr	r6, [r4, #0]
 800354e:	1d18      	adds	r0, r3, #4
 8003550:	6961      	ldr	r1, [r4, #20]
 8003552:	6028      	str	r0, [r5, #0]
 8003554:	0635      	lsls	r5, r6, #24
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	d501      	bpl.n	800355e <_printf_i+0x1ce>
 800355a:	6019      	str	r1, [r3, #0]
 800355c:	e002      	b.n	8003564 <_printf_i+0x1d4>
 800355e:	0670      	lsls	r0, r6, #25
 8003560:	d5fb      	bpl.n	800355a <_printf_i+0x1ca>
 8003562:	8019      	strh	r1, [r3, #0]
 8003564:	2300      	movs	r3, #0
 8003566:	4615      	mov	r5, r2
 8003568:	6123      	str	r3, [r4, #16]
 800356a:	e7ba      	b.n	80034e2 <_printf_i+0x152>
 800356c:	682b      	ldr	r3, [r5, #0]
 800356e:	2100      	movs	r1, #0
 8003570:	1d1a      	adds	r2, r3, #4
 8003572:	602a      	str	r2, [r5, #0]
 8003574:	681d      	ldr	r5, [r3, #0]
 8003576:	6862      	ldr	r2, [r4, #4]
 8003578:	4628      	mov	r0, r5
 800357a:	f002 faef 	bl	8005b5c <memchr>
 800357e:	b108      	cbz	r0, 8003584 <_printf_i+0x1f4>
 8003580:	1b40      	subs	r0, r0, r5
 8003582:	6060      	str	r0, [r4, #4]
 8003584:	6863      	ldr	r3, [r4, #4]
 8003586:	6123      	str	r3, [r4, #16]
 8003588:	2300      	movs	r3, #0
 800358a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800358e:	e7a8      	b.n	80034e2 <_printf_i+0x152>
 8003590:	462a      	mov	r2, r5
 8003592:	4649      	mov	r1, r9
 8003594:	4640      	mov	r0, r8
 8003596:	6923      	ldr	r3, [r4, #16]
 8003598:	47d0      	blx	sl
 800359a:	3001      	adds	r0, #1
 800359c:	d0ab      	beq.n	80034f6 <_printf_i+0x166>
 800359e:	6823      	ldr	r3, [r4, #0]
 80035a0:	079b      	lsls	r3, r3, #30
 80035a2:	d413      	bmi.n	80035cc <_printf_i+0x23c>
 80035a4:	68e0      	ldr	r0, [r4, #12]
 80035a6:	9b03      	ldr	r3, [sp, #12]
 80035a8:	4298      	cmp	r0, r3
 80035aa:	bfb8      	it	lt
 80035ac:	4618      	movlt	r0, r3
 80035ae:	e7a4      	b.n	80034fa <_printf_i+0x16a>
 80035b0:	2301      	movs	r3, #1
 80035b2:	4632      	mov	r2, r6
 80035b4:	4649      	mov	r1, r9
 80035b6:	4640      	mov	r0, r8
 80035b8:	47d0      	blx	sl
 80035ba:	3001      	adds	r0, #1
 80035bc:	d09b      	beq.n	80034f6 <_printf_i+0x166>
 80035be:	3501      	adds	r5, #1
 80035c0:	68e3      	ldr	r3, [r4, #12]
 80035c2:	9903      	ldr	r1, [sp, #12]
 80035c4:	1a5b      	subs	r3, r3, r1
 80035c6:	42ab      	cmp	r3, r5
 80035c8:	dcf2      	bgt.n	80035b0 <_printf_i+0x220>
 80035ca:	e7eb      	b.n	80035a4 <_printf_i+0x214>
 80035cc:	2500      	movs	r5, #0
 80035ce:	f104 0619 	add.w	r6, r4, #25
 80035d2:	e7f5      	b.n	80035c0 <_printf_i+0x230>
 80035d4:	080075ee 	.word	0x080075ee
 80035d8:	080075ff 	.word	0x080075ff

080035dc <_scanf_float>:
 80035dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035e0:	b087      	sub	sp, #28
 80035e2:	9303      	str	r3, [sp, #12]
 80035e4:	688b      	ldr	r3, [r1, #8]
 80035e6:	4617      	mov	r7, r2
 80035e8:	1e5a      	subs	r2, r3, #1
 80035ea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80035ee:	bf85      	ittet	hi
 80035f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80035f4:	195b      	addhi	r3, r3, r5
 80035f6:	2300      	movls	r3, #0
 80035f8:	9302      	strhi	r3, [sp, #8]
 80035fa:	bf88      	it	hi
 80035fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003600:	468b      	mov	fp, r1
 8003602:	f04f 0500 	mov.w	r5, #0
 8003606:	bf8c      	ite	hi
 8003608:	608b      	strhi	r3, [r1, #8]
 800360a:	9302      	strls	r3, [sp, #8]
 800360c:	680b      	ldr	r3, [r1, #0]
 800360e:	4680      	mov	r8, r0
 8003610:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003614:	f84b 3b1c 	str.w	r3, [fp], #28
 8003618:	460c      	mov	r4, r1
 800361a:	465e      	mov	r6, fp
 800361c:	46aa      	mov	sl, r5
 800361e:	46a9      	mov	r9, r5
 8003620:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003624:	9501      	str	r5, [sp, #4]
 8003626:	68a2      	ldr	r2, [r4, #8]
 8003628:	b152      	cbz	r2, 8003640 <_scanf_float+0x64>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b4e      	cmp	r3, #78	; 0x4e
 8003630:	d864      	bhi.n	80036fc <_scanf_float+0x120>
 8003632:	2b40      	cmp	r3, #64	; 0x40
 8003634:	d83c      	bhi.n	80036b0 <_scanf_float+0xd4>
 8003636:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800363a:	b2c8      	uxtb	r0, r1
 800363c:	280e      	cmp	r0, #14
 800363e:	d93a      	bls.n	80036b6 <_scanf_float+0xda>
 8003640:	f1b9 0f00 	cmp.w	r9, #0
 8003644:	d003      	beq.n	800364e <_scanf_float+0x72>
 8003646:	6823      	ldr	r3, [r4, #0]
 8003648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800364c:	6023      	str	r3, [r4, #0]
 800364e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003652:	f1ba 0f01 	cmp.w	sl, #1
 8003656:	f200 8113 	bhi.w	8003880 <_scanf_float+0x2a4>
 800365a:	455e      	cmp	r6, fp
 800365c:	f200 8105 	bhi.w	800386a <_scanf_float+0x28e>
 8003660:	2501      	movs	r5, #1
 8003662:	4628      	mov	r0, r5
 8003664:	b007      	add	sp, #28
 8003666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800366a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800366e:	2a0d      	cmp	r2, #13
 8003670:	d8e6      	bhi.n	8003640 <_scanf_float+0x64>
 8003672:	a101      	add	r1, pc, #4	; (adr r1, 8003678 <_scanf_float+0x9c>)
 8003674:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003678:	080037b7 	.word	0x080037b7
 800367c:	08003641 	.word	0x08003641
 8003680:	08003641 	.word	0x08003641
 8003684:	08003641 	.word	0x08003641
 8003688:	08003817 	.word	0x08003817
 800368c:	080037ef 	.word	0x080037ef
 8003690:	08003641 	.word	0x08003641
 8003694:	08003641 	.word	0x08003641
 8003698:	080037c5 	.word	0x080037c5
 800369c:	08003641 	.word	0x08003641
 80036a0:	08003641 	.word	0x08003641
 80036a4:	08003641 	.word	0x08003641
 80036a8:	08003641 	.word	0x08003641
 80036ac:	0800377d 	.word	0x0800377d
 80036b0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80036b4:	e7db      	b.n	800366e <_scanf_float+0x92>
 80036b6:	290e      	cmp	r1, #14
 80036b8:	d8c2      	bhi.n	8003640 <_scanf_float+0x64>
 80036ba:	a001      	add	r0, pc, #4	; (adr r0, 80036c0 <_scanf_float+0xe4>)
 80036bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80036c0:	0800376f 	.word	0x0800376f
 80036c4:	08003641 	.word	0x08003641
 80036c8:	0800376f 	.word	0x0800376f
 80036cc:	08003803 	.word	0x08003803
 80036d0:	08003641 	.word	0x08003641
 80036d4:	0800371d 	.word	0x0800371d
 80036d8:	08003759 	.word	0x08003759
 80036dc:	08003759 	.word	0x08003759
 80036e0:	08003759 	.word	0x08003759
 80036e4:	08003759 	.word	0x08003759
 80036e8:	08003759 	.word	0x08003759
 80036ec:	08003759 	.word	0x08003759
 80036f0:	08003759 	.word	0x08003759
 80036f4:	08003759 	.word	0x08003759
 80036f8:	08003759 	.word	0x08003759
 80036fc:	2b6e      	cmp	r3, #110	; 0x6e
 80036fe:	d809      	bhi.n	8003714 <_scanf_float+0x138>
 8003700:	2b60      	cmp	r3, #96	; 0x60
 8003702:	d8b2      	bhi.n	800366a <_scanf_float+0x8e>
 8003704:	2b54      	cmp	r3, #84	; 0x54
 8003706:	d077      	beq.n	80037f8 <_scanf_float+0x21c>
 8003708:	2b59      	cmp	r3, #89	; 0x59
 800370a:	d199      	bne.n	8003640 <_scanf_float+0x64>
 800370c:	2d07      	cmp	r5, #7
 800370e:	d197      	bne.n	8003640 <_scanf_float+0x64>
 8003710:	2508      	movs	r5, #8
 8003712:	e029      	b.n	8003768 <_scanf_float+0x18c>
 8003714:	2b74      	cmp	r3, #116	; 0x74
 8003716:	d06f      	beq.n	80037f8 <_scanf_float+0x21c>
 8003718:	2b79      	cmp	r3, #121	; 0x79
 800371a:	e7f6      	b.n	800370a <_scanf_float+0x12e>
 800371c:	6821      	ldr	r1, [r4, #0]
 800371e:	05c8      	lsls	r0, r1, #23
 8003720:	d51a      	bpl.n	8003758 <_scanf_float+0x17c>
 8003722:	9b02      	ldr	r3, [sp, #8]
 8003724:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003728:	6021      	str	r1, [r4, #0]
 800372a:	f109 0901 	add.w	r9, r9, #1
 800372e:	b11b      	cbz	r3, 8003738 <_scanf_float+0x15c>
 8003730:	3b01      	subs	r3, #1
 8003732:	3201      	adds	r2, #1
 8003734:	9302      	str	r3, [sp, #8]
 8003736:	60a2      	str	r2, [r4, #8]
 8003738:	68a3      	ldr	r3, [r4, #8]
 800373a:	3b01      	subs	r3, #1
 800373c:	60a3      	str	r3, [r4, #8]
 800373e:	6923      	ldr	r3, [r4, #16]
 8003740:	3301      	adds	r3, #1
 8003742:	6123      	str	r3, [r4, #16]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3b01      	subs	r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	607b      	str	r3, [r7, #4]
 800374c:	f340 8084 	ble.w	8003858 <_scanf_float+0x27c>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	3301      	adds	r3, #1
 8003754:	603b      	str	r3, [r7, #0]
 8003756:	e766      	b.n	8003626 <_scanf_float+0x4a>
 8003758:	eb1a 0f05 	cmn.w	sl, r5
 800375c:	f47f af70 	bne.w	8003640 <_scanf_float+0x64>
 8003760:	6822      	ldr	r2, [r4, #0]
 8003762:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003766:	6022      	str	r2, [r4, #0]
 8003768:	f806 3b01 	strb.w	r3, [r6], #1
 800376c:	e7e4      	b.n	8003738 <_scanf_float+0x15c>
 800376e:	6822      	ldr	r2, [r4, #0]
 8003770:	0610      	lsls	r0, r2, #24
 8003772:	f57f af65 	bpl.w	8003640 <_scanf_float+0x64>
 8003776:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800377a:	e7f4      	b.n	8003766 <_scanf_float+0x18a>
 800377c:	f1ba 0f00 	cmp.w	sl, #0
 8003780:	d10e      	bne.n	80037a0 <_scanf_float+0x1c4>
 8003782:	f1b9 0f00 	cmp.w	r9, #0
 8003786:	d10e      	bne.n	80037a6 <_scanf_float+0x1ca>
 8003788:	6822      	ldr	r2, [r4, #0]
 800378a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800378e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003792:	d108      	bne.n	80037a6 <_scanf_float+0x1ca>
 8003794:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003798:	f04f 0a01 	mov.w	sl, #1
 800379c:	6022      	str	r2, [r4, #0]
 800379e:	e7e3      	b.n	8003768 <_scanf_float+0x18c>
 80037a0:	f1ba 0f02 	cmp.w	sl, #2
 80037a4:	d055      	beq.n	8003852 <_scanf_float+0x276>
 80037a6:	2d01      	cmp	r5, #1
 80037a8:	d002      	beq.n	80037b0 <_scanf_float+0x1d4>
 80037aa:	2d04      	cmp	r5, #4
 80037ac:	f47f af48 	bne.w	8003640 <_scanf_float+0x64>
 80037b0:	3501      	adds	r5, #1
 80037b2:	b2ed      	uxtb	r5, r5
 80037b4:	e7d8      	b.n	8003768 <_scanf_float+0x18c>
 80037b6:	f1ba 0f01 	cmp.w	sl, #1
 80037ba:	f47f af41 	bne.w	8003640 <_scanf_float+0x64>
 80037be:	f04f 0a02 	mov.w	sl, #2
 80037c2:	e7d1      	b.n	8003768 <_scanf_float+0x18c>
 80037c4:	b97d      	cbnz	r5, 80037e6 <_scanf_float+0x20a>
 80037c6:	f1b9 0f00 	cmp.w	r9, #0
 80037ca:	f47f af3c 	bne.w	8003646 <_scanf_float+0x6a>
 80037ce:	6822      	ldr	r2, [r4, #0]
 80037d0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80037d4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80037d8:	f47f af39 	bne.w	800364e <_scanf_float+0x72>
 80037dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80037e0:	2501      	movs	r5, #1
 80037e2:	6022      	str	r2, [r4, #0]
 80037e4:	e7c0      	b.n	8003768 <_scanf_float+0x18c>
 80037e6:	2d03      	cmp	r5, #3
 80037e8:	d0e2      	beq.n	80037b0 <_scanf_float+0x1d4>
 80037ea:	2d05      	cmp	r5, #5
 80037ec:	e7de      	b.n	80037ac <_scanf_float+0x1d0>
 80037ee:	2d02      	cmp	r5, #2
 80037f0:	f47f af26 	bne.w	8003640 <_scanf_float+0x64>
 80037f4:	2503      	movs	r5, #3
 80037f6:	e7b7      	b.n	8003768 <_scanf_float+0x18c>
 80037f8:	2d06      	cmp	r5, #6
 80037fa:	f47f af21 	bne.w	8003640 <_scanf_float+0x64>
 80037fe:	2507      	movs	r5, #7
 8003800:	e7b2      	b.n	8003768 <_scanf_float+0x18c>
 8003802:	6822      	ldr	r2, [r4, #0]
 8003804:	0591      	lsls	r1, r2, #22
 8003806:	f57f af1b 	bpl.w	8003640 <_scanf_float+0x64>
 800380a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800380e:	6022      	str	r2, [r4, #0]
 8003810:	f8cd 9004 	str.w	r9, [sp, #4]
 8003814:	e7a8      	b.n	8003768 <_scanf_float+0x18c>
 8003816:	6822      	ldr	r2, [r4, #0]
 8003818:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800381c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003820:	d006      	beq.n	8003830 <_scanf_float+0x254>
 8003822:	0550      	lsls	r0, r2, #21
 8003824:	f57f af0c 	bpl.w	8003640 <_scanf_float+0x64>
 8003828:	f1b9 0f00 	cmp.w	r9, #0
 800382c:	f43f af0f 	beq.w	800364e <_scanf_float+0x72>
 8003830:	0591      	lsls	r1, r2, #22
 8003832:	bf58      	it	pl
 8003834:	9901      	ldrpl	r1, [sp, #4]
 8003836:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800383a:	bf58      	it	pl
 800383c:	eba9 0101 	subpl.w	r1, r9, r1
 8003840:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003844:	f04f 0900 	mov.w	r9, #0
 8003848:	bf58      	it	pl
 800384a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800384e:	6022      	str	r2, [r4, #0]
 8003850:	e78a      	b.n	8003768 <_scanf_float+0x18c>
 8003852:	f04f 0a03 	mov.w	sl, #3
 8003856:	e787      	b.n	8003768 <_scanf_float+0x18c>
 8003858:	4639      	mov	r1, r7
 800385a:	4640      	mov	r0, r8
 800385c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003860:	4798      	blx	r3
 8003862:	2800      	cmp	r0, #0
 8003864:	f43f aedf 	beq.w	8003626 <_scanf_float+0x4a>
 8003868:	e6ea      	b.n	8003640 <_scanf_float+0x64>
 800386a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800386e:	463a      	mov	r2, r7
 8003870:	4640      	mov	r0, r8
 8003872:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003876:	4798      	blx	r3
 8003878:	6923      	ldr	r3, [r4, #16]
 800387a:	3b01      	subs	r3, #1
 800387c:	6123      	str	r3, [r4, #16]
 800387e:	e6ec      	b.n	800365a <_scanf_float+0x7e>
 8003880:	1e6b      	subs	r3, r5, #1
 8003882:	2b06      	cmp	r3, #6
 8003884:	d825      	bhi.n	80038d2 <_scanf_float+0x2f6>
 8003886:	2d02      	cmp	r5, #2
 8003888:	d836      	bhi.n	80038f8 <_scanf_float+0x31c>
 800388a:	455e      	cmp	r6, fp
 800388c:	f67f aee8 	bls.w	8003660 <_scanf_float+0x84>
 8003890:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003894:	463a      	mov	r2, r7
 8003896:	4640      	mov	r0, r8
 8003898:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800389c:	4798      	blx	r3
 800389e:	6923      	ldr	r3, [r4, #16]
 80038a0:	3b01      	subs	r3, #1
 80038a2:	6123      	str	r3, [r4, #16]
 80038a4:	e7f1      	b.n	800388a <_scanf_float+0x2ae>
 80038a6:	9802      	ldr	r0, [sp, #8]
 80038a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80038ac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80038b0:	463a      	mov	r2, r7
 80038b2:	9002      	str	r0, [sp, #8]
 80038b4:	4640      	mov	r0, r8
 80038b6:	4798      	blx	r3
 80038b8:	6923      	ldr	r3, [r4, #16]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	6123      	str	r3, [r4, #16]
 80038be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80038c2:	fa5f fa8a 	uxtb.w	sl, sl
 80038c6:	f1ba 0f02 	cmp.w	sl, #2
 80038ca:	d1ec      	bne.n	80038a6 <_scanf_float+0x2ca>
 80038cc:	3d03      	subs	r5, #3
 80038ce:	b2ed      	uxtb	r5, r5
 80038d0:	1b76      	subs	r6, r6, r5
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	05da      	lsls	r2, r3, #23
 80038d6:	d52f      	bpl.n	8003938 <_scanf_float+0x35c>
 80038d8:	055b      	lsls	r3, r3, #21
 80038da:	d510      	bpl.n	80038fe <_scanf_float+0x322>
 80038dc:	455e      	cmp	r6, fp
 80038de:	f67f aebf 	bls.w	8003660 <_scanf_float+0x84>
 80038e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80038e6:	463a      	mov	r2, r7
 80038e8:	4640      	mov	r0, r8
 80038ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80038ee:	4798      	blx	r3
 80038f0:	6923      	ldr	r3, [r4, #16]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	6123      	str	r3, [r4, #16]
 80038f6:	e7f1      	b.n	80038dc <_scanf_float+0x300>
 80038f8:	46aa      	mov	sl, r5
 80038fa:	9602      	str	r6, [sp, #8]
 80038fc:	e7df      	b.n	80038be <_scanf_float+0x2e2>
 80038fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003902:	6923      	ldr	r3, [r4, #16]
 8003904:	2965      	cmp	r1, #101	; 0x65
 8003906:	f103 33ff 	add.w	r3, r3, #4294967295
 800390a:	f106 35ff 	add.w	r5, r6, #4294967295
 800390e:	6123      	str	r3, [r4, #16]
 8003910:	d00c      	beq.n	800392c <_scanf_float+0x350>
 8003912:	2945      	cmp	r1, #69	; 0x45
 8003914:	d00a      	beq.n	800392c <_scanf_float+0x350>
 8003916:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800391a:	463a      	mov	r2, r7
 800391c:	4640      	mov	r0, r8
 800391e:	4798      	blx	r3
 8003920:	6923      	ldr	r3, [r4, #16]
 8003922:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003926:	3b01      	subs	r3, #1
 8003928:	1eb5      	subs	r5, r6, #2
 800392a:	6123      	str	r3, [r4, #16]
 800392c:	463a      	mov	r2, r7
 800392e:	4640      	mov	r0, r8
 8003930:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003934:	4798      	blx	r3
 8003936:	462e      	mov	r6, r5
 8003938:	6825      	ldr	r5, [r4, #0]
 800393a:	f015 0510 	ands.w	r5, r5, #16
 800393e:	d155      	bne.n	80039ec <_scanf_float+0x410>
 8003940:	7035      	strb	r5, [r6, #0]
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800394c:	d11b      	bne.n	8003986 <_scanf_float+0x3aa>
 800394e:	9b01      	ldr	r3, [sp, #4]
 8003950:	454b      	cmp	r3, r9
 8003952:	eba3 0209 	sub.w	r2, r3, r9
 8003956:	d123      	bne.n	80039a0 <_scanf_float+0x3c4>
 8003958:	2200      	movs	r2, #0
 800395a:	4659      	mov	r1, fp
 800395c:	4640      	mov	r0, r8
 800395e:	f000 fe7b 	bl	8004658 <_strtod_r>
 8003962:	6822      	ldr	r2, [r4, #0]
 8003964:	9b03      	ldr	r3, [sp, #12]
 8003966:	f012 0f02 	tst.w	r2, #2
 800396a:	4606      	mov	r6, r0
 800396c:	460f      	mov	r7, r1
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	d021      	beq.n	80039b6 <_scanf_float+0x3da>
 8003972:	1d1a      	adds	r2, r3, #4
 8003974:	9903      	ldr	r1, [sp, #12]
 8003976:	600a      	str	r2, [r1, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	e9c3 6700 	strd	r6, r7, [r3]
 800397e:	68e3      	ldr	r3, [r4, #12]
 8003980:	3301      	adds	r3, #1
 8003982:	60e3      	str	r3, [r4, #12]
 8003984:	e66d      	b.n	8003662 <_scanf_float+0x86>
 8003986:	9b04      	ldr	r3, [sp, #16]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0e5      	beq.n	8003958 <_scanf_float+0x37c>
 800398c:	9905      	ldr	r1, [sp, #20]
 800398e:	230a      	movs	r3, #10
 8003990:	462a      	mov	r2, r5
 8003992:	4640      	mov	r0, r8
 8003994:	3101      	adds	r1, #1
 8003996:	f000 fee1 	bl	800475c <_strtol_r>
 800399a:	9b04      	ldr	r3, [sp, #16]
 800399c:	9e05      	ldr	r6, [sp, #20]
 800399e:	1ac2      	subs	r2, r0, r3
 80039a0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80039a4:	429e      	cmp	r6, r3
 80039a6:	bf28      	it	cs
 80039a8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80039ac:	4630      	mov	r0, r6
 80039ae:	4910      	ldr	r1, [pc, #64]	; (80039f0 <_scanf_float+0x414>)
 80039b0:	f000 f826 	bl	8003a00 <siprintf>
 80039b4:	e7d0      	b.n	8003958 <_scanf_float+0x37c>
 80039b6:	f012 0f04 	tst.w	r2, #4
 80039ba:	f103 0204 	add.w	r2, r3, #4
 80039be:	d1d9      	bne.n	8003974 <_scanf_float+0x398>
 80039c0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80039c4:	f8cc 2000 	str.w	r2, [ip]
 80039c8:	f8d3 8000 	ldr.w	r8, [r3]
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	f7fd f81c 	bl	8000a0c <__aeabi_dcmpun>
 80039d4:	b128      	cbz	r0, 80039e2 <_scanf_float+0x406>
 80039d6:	4807      	ldr	r0, [pc, #28]	; (80039f4 <_scanf_float+0x418>)
 80039d8:	f000 f80e 	bl	80039f8 <nanf>
 80039dc:	f8c8 0000 	str.w	r0, [r8]
 80039e0:	e7cd      	b.n	800397e <_scanf_float+0x3a2>
 80039e2:	4630      	mov	r0, r6
 80039e4:	4639      	mov	r1, r7
 80039e6:	f7fd f86f 	bl	8000ac8 <__aeabi_d2f>
 80039ea:	e7f7      	b.n	80039dc <_scanf_float+0x400>
 80039ec:	2500      	movs	r5, #0
 80039ee:	e638      	b.n	8003662 <_scanf_float+0x86>
 80039f0:	08007610 	.word	0x08007610
 80039f4:	08007a18 	.word	0x08007a18

080039f8 <nanf>:
 80039f8:	4800      	ldr	r0, [pc, #0]	; (80039fc <nanf+0x4>)
 80039fa:	4770      	bx	lr
 80039fc:	7fc00000 	.word	0x7fc00000

08003a00 <siprintf>:
 8003a00:	b40e      	push	{r1, r2, r3}
 8003a02:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a06:	b500      	push	{lr}
 8003a08:	b09c      	sub	sp, #112	; 0x70
 8003a0a:	ab1d      	add	r3, sp, #116	; 0x74
 8003a0c:	9002      	str	r0, [sp, #8]
 8003a0e:	9006      	str	r0, [sp, #24]
 8003a10:	9107      	str	r1, [sp, #28]
 8003a12:	9104      	str	r1, [sp, #16]
 8003a14:	4808      	ldr	r0, [pc, #32]	; (8003a38 <siprintf+0x38>)
 8003a16:	4909      	ldr	r1, [pc, #36]	; (8003a3c <siprintf+0x3c>)
 8003a18:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a1c:	9105      	str	r1, [sp, #20]
 8003a1e:	6800      	ldr	r0, [r0, #0]
 8003a20:	a902      	add	r1, sp, #8
 8003a22:	9301      	str	r3, [sp, #4]
 8003a24:	f002 feba 	bl	800679c <_svfiprintf_r>
 8003a28:	2200      	movs	r2, #0
 8003a2a:	9b02      	ldr	r3, [sp, #8]
 8003a2c:	701a      	strb	r2, [r3, #0]
 8003a2e:	b01c      	add	sp, #112	; 0x70
 8003a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a34:	b003      	add	sp, #12
 8003a36:	4770      	bx	lr
 8003a38:	2000000c 	.word	0x2000000c
 8003a3c:	ffff0208 	.word	0xffff0208

08003a40 <sulp>:
 8003a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a44:	460f      	mov	r7, r1
 8003a46:	4690      	mov	r8, r2
 8003a48:	f002 fc14 	bl	8006274 <__ulp>
 8003a4c:	4604      	mov	r4, r0
 8003a4e:	460d      	mov	r5, r1
 8003a50:	f1b8 0f00 	cmp.w	r8, #0
 8003a54:	d011      	beq.n	8003a7a <sulp+0x3a>
 8003a56:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003a5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	dd0b      	ble.n	8003a7a <sulp+0x3a>
 8003a62:	2400      	movs	r4, #0
 8003a64:	051b      	lsls	r3, r3, #20
 8003a66:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003a6a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003a6e:	4622      	mov	r2, r4
 8003a70:	462b      	mov	r3, r5
 8003a72:	f7fc fd31 	bl	80004d8 <__aeabi_dmul>
 8003a76:	4604      	mov	r4, r0
 8003a78:	460d      	mov	r5, r1
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	4629      	mov	r1, r5
 8003a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a82:	0000      	movs	r0, r0
 8003a84:	0000      	movs	r0, r0
	...

08003a88 <_strtod_l>:
 8003a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a8c:	469b      	mov	fp, r3
 8003a8e:	2300      	movs	r3, #0
 8003a90:	b09f      	sub	sp, #124	; 0x7c
 8003a92:	931a      	str	r3, [sp, #104]	; 0x68
 8003a94:	4b9e      	ldr	r3, [pc, #632]	; (8003d10 <_strtod_l+0x288>)
 8003a96:	4682      	mov	sl, r0
 8003a98:	681f      	ldr	r7, [r3, #0]
 8003a9a:	460e      	mov	r6, r1
 8003a9c:	4638      	mov	r0, r7
 8003a9e:	9215      	str	r2, [sp, #84]	; 0x54
 8003aa0:	f7fc fb56 	bl	8000150 <strlen>
 8003aa4:	f04f 0800 	mov.w	r8, #0
 8003aa8:	4604      	mov	r4, r0
 8003aaa:	f04f 0900 	mov.w	r9, #0
 8003aae:	9619      	str	r6, [sp, #100]	; 0x64
 8003ab0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003ab2:	781a      	ldrb	r2, [r3, #0]
 8003ab4:	2a2b      	cmp	r2, #43	; 0x2b
 8003ab6:	d04c      	beq.n	8003b52 <_strtod_l+0xca>
 8003ab8:	d83a      	bhi.n	8003b30 <_strtod_l+0xa8>
 8003aba:	2a0d      	cmp	r2, #13
 8003abc:	d833      	bhi.n	8003b26 <_strtod_l+0x9e>
 8003abe:	2a08      	cmp	r2, #8
 8003ac0:	d833      	bhi.n	8003b2a <_strtod_l+0xa2>
 8003ac2:	2a00      	cmp	r2, #0
 8003ac4:	d03d      	beq.n	8003b42 <_strtod_l+0xba>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	930a      	str	r3, [sp, #40]	; 0x28
 8003aca:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8003acc:	782b      	ldrb	r3, [r5, #0]
 8003ace:	2b30      	cmp	r3, #48	; 0x30
 8003ad0:	f040 80aa 	bne.w	8003c28 <_strtod_l+0x1a0>
 8003ad4:	786b      	ldrb	r3, [r5, #1]
 8003ad6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003ada:	2b58      	cmp	r3, #88	; 0x58
 8003adc:	d166      	bne.n	8003bac <_strtod_l+0x124>
 8003ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ae0:	4650      	mov	r0, sl
 8003ae2:	9301      	str	r3, [sp, #4]
 8003ae4:	ab1a      	add	r3, sp, #104	; 0x68
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	4a8a      	ldr	r2, [pc, #552]	; (8003d14 <_strtod_l+0x28c>)
 8003aea:	f8cd b008 	str.w	fp, [sp, #8]
 8003aee:	ab1b      	add	r3, sp, #108	; 0x6c
 8003af0:	a919      	add	r1, sp, #100	; 0x64
 8003af2:	f001 fd17 	bl	8005524 <__gethex>
 8003af6:	f010 0607 	ands.w	r6, r0, #7
 8003afa:	4604      	mov	r4, r0
 8003afc:	d005      	beq.n	8003b0a <_strtod_l+0x82>
 8003afe:	2e06      	cmp	r6, #6
 8003b00:	d129      	bne.n	8003b56 <_strtod_l+0xce>
 8003b02:	2300      	movs	r3, #0
 8003b04:	3501      	adds	r5, #1
 8003b06:	9519      	str	r5, [sp, #100]	; 0x64
 8003b08:	930a      	str	r3, [sp, #40]	; 0x28
 8003b0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f040 858a 	bne.w	8004626 <_strtod_l+0xb9e>
 8003b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b14:	b1d3      	cbz	r3, 8003b4c <_strtod_l+0xc4>
 8003b16:	4642      	mov	r2, r8
 8003b18:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	4619      	mov	r1, r3
 8003b20:	b01f      	add	sp, #124	; 0x7c
 8003b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b26:	2a20      	cmp	r2, #32
 8003b28:	d1cd      	bne.n	8003ac6 <_strtod_l+0x3e>
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	9319      	str	r3, [sp, #100]	; 0x64
 8003b2e:	e7bf      	b.n	8003ab0 <_strtod_l+0x28>
 8003b30:	2a2d      	cmp	r2, #45	; 0x2d
 8003b32:	d1c8      	bne.n	8003ac6 <_strtod_l+0x3e>
 8003b34:	2201      	movs	r2, #1
 8003b36:	920a      	str	r2, [sp, #40]	; 0x28
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	9219      	str	r2, [sp, #100]	; 0x64
 8003b3c:	785b      	ldrb	r3, [r3, #1]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1c3      	bne.n	8003aca <_strtod_l+0x42>
 8003b42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003b44:	9619      	str	r6, [sp, #100]	; 0x64
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f040 856b 	bne.w	8004622 <_strtod_l+0xb9a>
 8003b4c:	4642      	mov	r2, r8
 8003b4e:	464b      	mov	r3, r9
 8003b50:	e7e4      	b.n	8003b1c <_strtod_l+0x94>
 8003b52:	2200      	movs	r2, #0
 8003b54:	e7ef      	b.n	8003b36 <_strtod_l+0xae>
 8003b56:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003b58:	b13a      	cbz	r2, 8003b6a <_strtod_l+0xe2>
 8003b5a:	2135      	movs	r1, #53	; 0x35
 8003b5c:	a81c      	add	r0, sp, #112	; 0x70
 8003b5e:	f002 fc8d 	bl	800647c <__copybits>
 8003b62:	4650      	mov	r0, sl
 8003b64:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003b66:	f002 f855 	bl	8005c14 <_Bfree>
 8003b6a:	3e01      	subs	r6, #1
 8003b6c:	2e04      	cmp	r6, #4
 8003b6e:	d806      	bhi.n	8003b7e <_strtod_l+0xf6>
 8003b70:	e8df f006 	tbb	[pc, r6]
 8003b74:	1714030a 	.word	0x1714030a
 8003b78:	0a          	.byte	0x0a
 8003b79:	00          	.byte	0x00
 8003b7a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8003b7e:	0721      	lsls	r1, r4, #28
 8003b80:	d5c3      	bpl.n	8003b0a <_strtod_l+0x82>
 8003b82:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8003b86:	e7c0      	b.n	8003b0a <_strtod_l+0x82>
 8003b88:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003b8a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8003b8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003b92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003b96:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8003b9a:	e7f0      	b.n	8003b7e <_strtod_l+0xf6>
 8003b9c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8003d18 <_strtod_l+0x290>
 8003ba0:	e7ed      	b.n	8003b7e <_strtod_l+0xf6>
 8003ba2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8003ba6:	f04f 38ff 	mov.w	r8, #4294967295
 8003baa:	e7e8      	b.n	8003b7e <_strtod_l+0xf6>
 8003bac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003bae:	1c5a      	adds	r2, r3, #1
 8003bb0:	9219      	str	r2, [sp, #100]	; 0x64
 8003bb2:	785b      	ldrb	r3, [r3, #1]
 8003bb4:	2b30      	cmp	r3, #48	; 0x30
 8003bb6:	d0f9      	beq.n	8003bac <_strtod_l+0x124>
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0a6      	beq.n	8003b0a <_strtod_l+0x82>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	9307      	str	r3, [sp, #28]
 8003bc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003bc2:	220a      	movs	r2, #10
 8003bc4:	9308      	str	r3, [sp, #32]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	469b      	mov	fp, r3
 8003bca:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003bce:	9819      	ldr	r0, [sp, #100]	; 0x64
 8003bd0:	7805      	ldrb	r5, [r0, #0]
 8003bd2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8003bd6:	b2d9      	uxtb	r1, r3
 8003bd8:	2909      	cmp	r1, #9
 8003bda:	d927      	bls.n	8003c2c <_strtod_l+0x1a4>
 8003bdc:	4622      	mov	r2, r4
 8003bde:	4639      	mov	r1, r7
 8003be0:	f002 fef2 	bl	80069c8 <strncmp>
 8003be4:	2800      	cmp	r0, #0
 8003be6:	d033      	beq.n	8003c50 <_strtod_l+0x1c8>
 8003be8:	2000      	movs	r0, #0
 8003bea:	462a      	mov	r2, r5
 8003bec:	465c      	mov	r4, fp
 8003bee:	4603      	mov	r3, r0
 8003bf0:	9004      	str	r0, [sp, #16]
 8003bf2:	2a65      	cmp	r2, #101	; 0x65
 8003bf4:	d001      	beq.n	8003bfa <_strtod_l+0x172>
 8003bf6:	2a45      	cmp	r2, #69	; 0x45
 8003bf8:	d114      	bne.n	8003c24 <_strtod_l+0x19c>
 8003bfa:	b91c      	cbnz	r4, 8003c04 <_strtod_l+0x17c>
 8003bfc:	9a07      	ldr	r2, [sp, #28]
 8003bfe:	4302      	orrs	r2, r0
 8003c00:	d09f      	beq.n	8003b42 <_strtod_l+0xba>
 8003c02:	2400      	movs	r4, #0
 8003c04:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8003c06:	1c72      	adds	r2, r6, #1
 8003c08:	9219      	str	r2, [sp, #100]	; 0x64
 8003c0a:	7872      	ldrb	r2, [r6, #1]
 8003c0c:	2a2b      	cmp	r2, #43	; 0x2b
 8003c0e:	d079      	beq.n	8003d04 <_strtod_l+0x27c>
 8003c10:	2a2d      	cmp	r2, #45	; 0x2d
 8003c12:	f000 8083 	beq.w	8003d1c <_strtod_l+0x294>
 8003c16:	2700      	movs	r7, #0
 8003c18:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8003c1c:	2909      	cmp	r1, #9
 8003c1e:	f240 8083 	bls.w	8003d28 <_strtod_l+0x2a0>
 8003c22:	9619      	str	r6, [sp, #100]	; 0x64
 8003c24:	2500      	movs	r5, #0
 8003c26:	e09f      	b.n	8003d68 <_strtod_l+0x2e0>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	e7c8      	b.n	8003bbe <_strtod_l+0x136>
 8003c2c:	f1bb 0f08 	cmp.w	fp, #8
 8003c30:	bfd5      	itete	le
 8003c32:	9906      	ldrle	r1, [sp, #24]
 8003c34:	9905      	ldrgt	r1, [sp, #20]
 8003c36:	fb02 3301 	mlale	r3, r2, r1, r3
 8003c3a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8003c3e:	f100 0001 	add.w	r0, r0, #1
 8003c42:	bfd4      	ite	le
 8003c44:	9306      	strle	r3, [sp, #24]
 8003c46:	9305      	strgt	r3, [sp, #20]
 8003c48:	f10b 0b01 	add.w	fp, fp, #1
 8003c4c:	9019      	str	r0, [sp, #100]	; 0x64
 8003c4e:	e7be      	b.n	8003bce <_strtod_l+0x146>
 8003c50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003c52:	191a      	adds	r2, r3, r4
 8003c54:	9219      	str	r2, [sp, #100]	; 0x64
 8003c56:	5d1a      	ldrb	r2, [r3, r4]
 8003c58:	f1bb 0f00 	cmp.w	fp, #0
 8003c5c:	d036      	beq.n	8003ccc <_strtod_l+0x244>
 8003c5e:	465c      	mov	r4, fp
 8003c60:	9004      	str	r0, [sp, #16]
 8003c62:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8003c66:	2b09      	cmp	r3, #9
 8003c68:	d912      	bls.n	8003c90 <_strtod_l+0x208>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e7c1      	b.n	8003bf2 <_strtod_l+0x16a>
 8003c6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003c70:	3001      	adds	r0, #1
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	9219      	str	r2, [sp, #100]	; 0x64
 8003c76:	785a      	ldrb	r2, [r3, #1]
 8003c78:	2a30      	cmp	r2, #48	; 0x30
 8003c7a:	d0f8      	beq.n	8003c6e <_strtod_l+0x1e6>
 8003c7c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	f200 84d5 	bhi.w	8004630 <_strtod_l+0xba8>
 8003c86:	9004      	str	r0, [sp, #16]
 8003c88:	2000      	movs	r0, #0
 8003c8a:	4604      	mov	r4, r0
 8003c8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003c8e:	9308      	str	r3, [sp, #32]
 8003c90:	3a30      	subs	r2, #48	; 0x30
 8003c92:	f100 0301 	add.w	r3, r0, #1
 8003c96:	d013      	beq.n	8003cc0 <_strtod_l+0x238>
 8003c98:	9904      	ldr	r1, [sp, #16]
 8003c9a:	1905      	adds	r5, r0, r4
 8003c9c:	4419      	add	r1, r3
 8003c9e:	9104      	str	r1, [sp, #16]
 8003ca0:	4623      	mov	r3, r4
 8003ca2:	210a      	movs	r1, #10
 8003ca4:	42ab      	cmp	r3, r5
 8003ca6:	d113      	bne.n	8003cd0 <_strtod_l+0x248>
 8003ca8:	1823      	adds	r3, r4, r0
 8003caa:	2b08      	cmp	r3, #8
 8003cac:	f104 0401 	add.w	r4, r4, #1
 8003cb0:	4404      	add	r4, r0
 8003cb2:	dc1b      	bgt.n	8003cec <_strtod_l+0x264>
 8003cb4:	230a      	movs	r3, #10
 8003cb6:	9906      	ldr	r1, [sp, #24]
 8003cb8:	fb03 2301 	mla	r3, r3, r1, r2
 8003cbc:	9306      	str	r3, [sp, #24]
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	1c51      	adds	r1, r2, #1
 8003cc6:	9119      	str	r1, [sp, #100]	; 0x64
 8003cc8:	7852      	ldrb	r2, [r2, #1]
 8003cca:	e7ca      	b.n	8003c62 <_strtod_l+0x1da>
 8003ccc:	4658      	mov	r0, fp
 8003cce:	e7d3      	b.n	8003c78 <_strtod_l+0x1f0>
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	dc04      	bgt.n	8003cde <_strtod_l+0x256>
 8003cd4:	9f06      	ldr	r7, [sp, #24]
 8003cd6:	434f      	muls	r7, r1
 8003cd8:	9706      	str	r7, [sp, #24]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	e7e2      	b.n	8003ca4 <_strtod_l+0x21c>
 8003cde:	1c5f      	adds	r7, r3, #1
 8003ce0:	2f10      	cmp	r7, #16
 8003ce2:	bfde      	ittt	le
 8003ce4:	9f05      	ldrle	r7, [sp, #20]
 8003ce6:	434f      	mulle	r7, r1
 8003ce8:	9705      	strle	r7, [sp, #20]
 8003cea:	e7f6      	b.n	8003cda <_strtod_l+0x252>
 8003cec:	2c10      	cmp	r4, #16
 8003cee:	bfdf      	itttt	le
 8003cf0:	230a      	movle	r3, #10
 8003cf2:	9905      	ldrle	r1, [sp, #20]
 8003cf4:	fb03 2301 	mlale	r3, r3, r1, r2
 8003cf8:	9305      	strle	r3, [sp, #20]
 8003cfa:	e7e0      	b.n	8003cbe <_strtod_l+0x236>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	9304      	str	r3, [sp, #16]
 8003d00:	2301      	movs	r3, #1
 8003d02:	e77b      	b.n	8003bfc <_strtod_l+0x174>
 8003d04:	2700      	movs	r7, #0
 8003d06:	1cb2      	adds	r2, r6, #2
 8003d08:	9219      	str	r2, [sp, #100]	; 0x64
 8003d0a:	78b2      	ldrb	r2, [r6, #2]
 8003d0c:	e784      	b.n	8003c18 <_strtod_l+0x190>
 8003d0e:	bf00      	nop
 8003d10:	08007860 	.word	0x08007860
 8003d14:	08007618 	.word	0x08007618
 8003d18:	7ff00000 	.word	0x7ff00000
 8003d1c:	2701      	movs	r7, #1
 8003d1e:	e7f2      	b.n	8003d06 <_strtod_l+0x27e>
 8003d20:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003d22:	1c51      	adds	r1, r2, #1
 8003d24:	9119      	str	r1, [sp, #100]	; 0x64
 8003d26:	7852      	ldrb	r2, [r2, #1]
 8003d28:	2a30      	cmp	r2, #48	; 0x30
 8003d2a:	d0f9      	beq.n	8003d20 <_strtod_l+0x298>
 8003d2c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8003d30:	2908      	cmp	r1, #8
 8003d32:	f63f af77 	bhi.w	8003c24 <_strtod_l+0x19c>
 8003d36:	f04f 0e0a 	mov.w	lr, #10
 8003d3a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8003d3e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003d40:	9209      	str	r2, [sp, #36]	; 0x24
 8003d42:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003d44:	1c51      	adds	r1, r2, #1
 8003d46:	9119      	str	r1, [sp, #100]	; 0x64
 8003d48:	7852      	ldrb	r2, [r2, #1]
 8003d4a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8003d4e:	2d09      	cmp	r5, #9
 8003d50:	d935      	bls.n	8003dbe <_strtod_l+0x336>
 8003d52:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003d54:	1b49      	subs	r1, r1, r5
 8003d56:	2908      	cmp	r1, #8
 8003d58:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8003d5c:	dc02      	bgt.n	8003d64 <_strtod_l+0x2dc>
 8003d5e:	4565      	cmp	r5, ip
 8003d60:	bfa8      	it	ge
 8003d62:	4665      	movge	r5, ip
 8003d64:	b107      	cbz	r7, 8003d68 <_strtod_l+0x2e0>
 8003d66:	426d      	negs	r5, r5
 8003d68:	2c00      	cmp	r4, #0
 8003d6a:	d14c      	bne.n	8003e06 <_strtod_l+0x37e>
 8003d6c:	9907      	ldr	r1, [sp, #28]
 8003d6e:	4301      	orrs	r1, r0
 8003d70:	f47f aecb 	bne.w	8003b0a <_strtod_l+0x82>
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f47f aee4 	bne.w	8003b42 <_strtod_l+0xba>
 8003d7a:	2a69      	cmp	r2, #105	; 0x69
 8003d7c:	d026      	beq.n	8003dcc <_strtod_l+0x344>
 8003d7e:	dc23      	bgt.n	8003dc8 <_strtod_l+0x340>
 8003d80:	2a49      	cmp	r2, #73	; 0x49
 8003d82:	d023      	beq.n	8003dcc <_strtod_l+0x344>
 8003d84:	2a4e      	cmp	r2, #78	; 0x4e
 8003d86:	f47f aedc 	bne.w	8003b42 <_strtod_l+0xba>
 8003d8a:	499d      	ldr	r1, [pc, #628]	; (8004000 <_strtod_l+0x578>)
 8003d8c:	a819      	add	r0, sp, #100	; 0x64
 8003d8e:	f001 fe17 	bl	80059c0 <__match>
 8003d92:	2800      	cmp	r0, #0
 8003d94:	f43f aed5 	beq.w	8003b42 <_strtod_l+0xba>
 8003d98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b28      	cmp	r3, #40	; 0x28
 8003d9e:	d12c      	bne.n	8003dfa <_strtod_l+0x372>
 8003da0:	4998      	ldr	r1, [pc, #608]	; (8004004 <_strtod_l+0x57c>)
 8003da2:	aa1c      	add	r2, sp, #112	; 0x70
 8003da4:	a819      	add	r0, sp, #100	; 0x64
 8003da6:	f001 fe1f 	bl	80059e8 <__hexnan>
 8003daa:	2805      	cmp	r0, #5
 8003dac:	d125      	bne.n	8003dfa <_strtod_l+0x372>
 8003dae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003db0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8003db4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8003db8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8003dbc:	e6a5      	b.n	8003b0a <_strtod_l+0x82>
 8003dbe:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8003dc2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8003dc6:	e7bc      	b.n	8003d42 <_strtod_l+0x2ba>
 8003dc8:	2a6e      	cmp	r2, #110	; 0x6e
 8003dca:	e7dc      	b.n	8003d86 <_strtod_l+0x2fe>
 8003dcc:	498e      	ldr	r1, [pc, #568]	; (8004008 <_strtod_l+0x580>)
 8003dce:	a819      	add	r0, sp, #100	; 0x64
 8003dd0:	f001 fdf6 	bl	80059c0 <__match>
 8003dd4:	2800      	cmp	r0, #0
 8003dd6:	f43f aeb4 	beq.w	8003b42 <_strtod_l+0xba>
 8003dda:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003ddc:	498b      	ldr	r1, [pc, #556]	; (800400c <_strtod_l+0x584>)
 8003dde:	3b01      	subs	r3, #1
 8003de0:	a819      	add	r0, sp, #100	; 0x64
 8003de2:	9319      	str	r3, [sp, #100]	; 0x64
 8003de4:	f001 fdec 	bl	80059c0 <__match>
 8003de8:	b910      	cbnz	r0, 8003df0 <_strtod_l+0x368>
 8003dea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003dec:	3301      	adds	r3, #1
 8003dee:	9319      	str	r3, [sp, #100]	; 0x64
 8003df0:	f04f 0800 	mov.w	r8, #0
 8003df4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8004010 <_strtod_l+0x588>
 8003df8:	e687      	b.n	8003b0a <_strtod_l+0x82>
 8003dfa:	4886      	ldr	r0, [pc, #536]	; (8004014 <_strtod_l+0x58c>)
 8003dfc:	f002 fdce 	bl	800699c <nan>
 8003e00:	4680      	mov	r8, r0
 8003e02:	4689      	mov	r9, r1
 8003e04:	e681      	b.n	8003b0a <_strtod_l+0x82>
 8003e06:	9b04      	ldr	r3, [sp, #16]
 8003e08:	f1bb 0f00 	cmp.w	fp, #0
 8003e0c:	bf08      	it	eq
 8003e0e:	46a3      	moveq	fp, r4
 8003e10:	1aeb      	subs	r3, r5, r3
 8003e12:	2c10      	cmp	r4, #16
 8003e14:	9806      	ldr	r0, [sp, #24]
 8003e16:	4626      	mov	r6, r4
 8003e18:	9307      	str	r3, [sp, #28]
 8003e1a:	bfa8      	it	ge
 8003e1c:	2610      	movge	r6, #16
 8003e1e:	f7fc fae1 	bl	80003e4 <__aeabi_ui2d>
 8003e22:	2c09      	cmp	r4, #9
 8003e24:	4680      	mov	r8, r0
 8003e26:	4689      	mov	r9, r1
 8003e28:	dd13      	ble.n	8003e52 <_strtod_l+0x3ca>
 8003e2a:	4b7b      	ldr	r3, [pc, #492]	; (8004018 <_strtod_l+0x590>)
 8003e2c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003e30:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003e34:	f7fc fb50 	bl	80004d8 <__aeabi_dmul>
 8003e38:	4680      	mov	r8, r0
 8003e3a:	9805      	ldr	r0, [sp, #20]
 8003e3c:	4689      	mov	r9, r1
 8003e3e:	f7fc fad1 	bl	80003e4 <__aeabi_ui2d>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	4640      	mov	r0, r8
 8003e48:	4649      	mov	r1, r9
 8003e4a:	f7fc f98f 	bl	800016c <__adddf3>
 8003e4e:	4680      	mov	r8, r0
 8003e50:	4689      	mov	r9, r1
 8003e52:	2c0f      	cmp	r4, #15
 8003e54:	dc36      	bgt.n	8003ec4 <_strtod_l+0x43c>
 8003e56:	9b07      	ldr	r3, [sp, #28]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f43f ae56 	beq.w	8003b0a <_strtod_l+0x82>
 8003e5e:	dd22      	ble.n	8003ea6 <_strtod_l+0x41e>
 8003e60:	2b16      	cmp	r3, #22
 8003e62:	dc09      	bgt.n	8003e78 <_strtod_l+0x3f0>
 8003e64:	496c      	ldr	r1, [pc, #432]	; (8004018 <_strtod_l+0x590>)
 8003e66:	4642      	mov	r2, r8
 8003e68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003e6c:	464b      	mov	r3, r9
 8003e6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e72:	f7fc fb31 	bl	80004d8 <__aeabi_dmul>
 8003e76:	e7c3      	b.n	8003e00 <_strtod_l+0x378>
 8003e78:	9a07      	ldr	r2, [sp, #28]
 8003e7a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	db20      	blt.n	8003ec4 <_strtod_l+0x43c>
 8003e82:	4d65      	ldr	r5, [pc, #404]	; (8004018 <_strtod_l+0x590>)
 8003e84:	f1c4 040f 	rsb	r4, r4, #15
 8003e88:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8003e8c:	4642      	mov	r2, r8
 8003e8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e92:	464b      	mov	r3, r9
 8003e94:	f7fc fb20 	bl	80004d8 <__aeabi_dmul>
 8003e98:	9b07      	ldr	r3, [sp, #28]
 8003e9a:	1b1c      	subs	r4, r3, r4
 8003e9c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8003ea0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003ea4:	e7e5      	b.n	8003e72 <_strtod_l+0x3ea>
 8003ea6:	9b07      	ldr	r3, [sp, #28]
 8003ea8:	3316      	adds	r3, #22
 8003eaa:	db0b      	blt.n	8003ec4 <_strtod_l+0x43c>
 8003eac:	9b04      	ldr	r3, [sp, #16]
 8003eae:	4640      	mov	r0, r8
 8003eb0:	1b5d      	subs	r5, r3, r5
 8003eb2:	4b59      	ldr	r3, [pc, #356]	; (8004018 <_strtod_l+0x590>)
 8003eb4:	4649      	mov	r1, r9
 8003eb6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003eba:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003ebe:	f7fc fc35 	bl	800072c <__aeabi_ddiv>
 8003ec2:	e79d      	b.n	8003e00 <_strtod_l+0x378>
 8003ec4:	9b07      	ldr	r3, [sp, #28]
 8003ec6:	1ba6      	subs	r6, r4, r6
 8003ec8:	441e      	add	r6, r3
 8003eca:	2e00      	cmp	r6, #0
 8003ecc:	dd74      	ble.n	8003fb8 <_strtod_l+0x530>
 8003ece:	f016 030f 	ands.w	r3, r6, #15
 8003ed2:	d00a      	beq.n	8003eea <_strtod_l+0x462>
 8003ed4:	4950      	ldr	r1, [pc, #320]	; (8004018 <_strtod_l+0x590>)
 8003ed6:	4642      	mov	r2, r8
 8003ed8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003edc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ee0:	464b      	mov	r3, r9
 8003ee2:	f7fc faf9 	bl	80004d8 <__aeabi_dmul>
 8003ee6:	4680      	mov	r8, r0
 8003ee8:	4689      	mov	r9, r1
 8003eea:	f036 060f 	bics.w	r6, r6, #15
 8003eee:	d052      	beq.n	8003f96 <_strtod_l+0x50e>
 8003ef0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8003ef4:	dd27      	ble.n	8003f46 <_strtod_l+0x4be>
 8003ef6:	f04f 0b00 	mov.w	fp, #0
 8003efa:	f8cd b010 	str.w	fp, [sp, #16]
 8003efe:	f8cd b020 	str.w	fp, [sp, #32]
 8003f02:	f8cd b018 	str.w	fp, [sp, #24]
 8003f06:	2322      	movs	r3, #34	; 0x22
 8003f08:	f04f 0800 	mov.w	r8, #0
 8003f0c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8004010 <_strtod_l+0x588>
 8003f10:	f8ca 3000 	str.w	r3, [sl]
 8003f14:	9b08      	ldr	r3, [sp, #32]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f43f adf7 	beq.w	8003b0a <_strtod_l+0x82>
 8003f1c:	4650      	mov	r0, sl
 8003f1e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003f20:	f001 fe78 	bl	8005c14 <_Bfree>
 8003f24:	4650      	mov	r0, sl
 8003f26:	9906      	ldr	r1, [sp, #24]
 8003f28:	f001 fe74 	bl	8005c14 <_Bfree>
 8003f2c:	4650      	mov	r0, sl
 8003f2e:	9904      	ldr	r1, [sp, #16]
 8003f30:	f001 fe70 	bl	8005c14 <_Bfree>
 8003f34:	4650      	mov	r0, sl
 8003f36:	9908      	ldr	r1, [sp, #32]
 8003f38:	f001 fe6c 	bl	8005c14 <_Bfree>
 8003f3c:	4659      	mov	r1, fp
 8003f3e:	4650      	mov	r0, sl
 8003f40:	f001 fe68 	bl	8005c14 <_Bfree>
 8003f44:	e5e1      	b.n	8003b0a <_strtod_l+0x82>
 8003f46:	4b35      	ldr	r3, [pc, #212]	; (800401c <_strtod_l+0x594>)
 8003f48:	4640      	mov	r0, r8
 8003f4a:	9305      	str	r3, [sp, #20]
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	4649      	mov	r1, r9
 8003f50:	461f      	mov	r7, r3
 8003f52:	1136      	asrs	r6, r6, #4
 8003f54:	2e01      	cmp	r6, #1
 8003f56:	dc21      	bgt.n	8003f9c <_strtod_l+0x514>
 8003f58:	b10b      	cbz	r3, 8003f5e <_strtod_l+0x4d6>
 8003f5a:	4680      	mov	r8, r0
 8003f5c:	4689      	mov	r9, r1
 8003f5e:	4b2f      	ldr	r3, [pc, #188]	; (800401c <_strtod_l+0x594>)
 8003f60:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8003f64:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8003f68:	4642      	mov	r2, r8
 8003f6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f6e:	464b      	mov	r3, r9
 8003f70:	f7fc fab2 	bl	80004d8 <__aeabi_dmul>
 8003f74:	4b26      	ldr	r3, [pc, #152]	; (8004010 <_strtod_l+0x588>)
 8003f76:	460a      	mov	r2, r1
 8003f78:	400b      	ands	r3, r1
 8003f7a:	4929      	ldr	r1, [pc, #164]	; (8004020 <_strtod_l+0x598>)
 8003f7c:	4680      	mov	r8, r0
 8003f7e:	428b      	cmp	r3, r1
 8003f80:	d8b9      	bhi.n	8003ef6 <_strtod_l+0x46e>
 8003f82:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003f86:	428b      	cmp	r3, r1
 8003f88:	bf86      	itte	hi
 8003f8a:	f04f 38ff 	movhi.w	r8, #4294967295
 8003f8e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8004024 <_strtod_l+0x59c>
 8003f92:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8003f96:	2300      	movs	r3, #0
 8003f98:	9305      	str	r3, [sp, #20]
 8003f9a:	e07f      	b.n	800409c <_strtod_l+0x614>
 8003f9c:	07f2      	lsls	r2, r6, #31
 8003f9e:	d505      	bpl.n	8003fac <_strtod_l+0x524>
 8003fa0:	9b05      	ldr	r3, [sp, #20]
 8003fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa6:	f7fc fa97 	bl	80004d8 <__aeabi_dmul>
 8003faa:	2301      	movs	r3, #1
 8003fac:	9a05      	ldr	r2, [sp, #20]
 8003fae:	3701      	adds	r7, #1
 8003fb0:	3208      	adds	r2, #8
 8003fb2:	1076      	asrs	r6, r6, #1
 8003fb4:	9205      	str	r2, [sp, #20]
 8003fb6:	e7cd      	b.n	8003f54 <_strtod_l+0x4cc>
 8003fb8:	d0ed      	beq.n	8003f96 <_strtod_l+0x50e>
 8003fba:	4276      	negs	r6, r6
 8003fbc:	f016 020f 	ands.w	r2, r6, #15
 8003fc0:	d00a      	beq.n	8003fd8 <_strtod_l+0x550>
 8003fc2:	4b15      	ldr	r3, [pc, #84]	; (8004018 <_strtod_l+0x590>)
 8003fc4:	4640      	mov	r0, r8
 8003fc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003fca:	4649      	mov	r1, r9
 8003fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd0:	f7fc fbac 	bl	800072c <__aeabi_ddiv>
 8003fd4:	4680      	mov	r8, r0
 8003fd6:	4689      	mov	r9, r1
 8003fd8:	1136      	asrs	r6, r6, #4
 8003fda:	d0dc      	beq.n	8003f96 <_strtod_l+0x50e>
 8003fdc:	2e1f      	cmp	r6, #31
 8003fde:	dd23      	ble.n	8004028 <_strtod_l+0x5a0>
 8003fe0:	f04f 0b00 	mov.w	fp, #0
 8003fe4:	f8cd b010 	str.w	fp, [sp, #16]
 8003fe8:	f8cd b020 	str.w	fp, [sp, #32]
 8003fec:	f8cd b018 	str.w	fp, [sp, #24]
 8003ff0:	2322      	movs	r3, #34	; 0x22
 8003ff2:	f04f 0800 	mov.w	r8, #0
 8003ff6:	f04f 0900 	mov.w	r9, #0
 8003ffa:	f8ca 3000 	str.w	r3, [sl]
 8003ffe:	e789      	b.n	8003f14 <_strtod_l+0x48c>
 8004000:	080075e9 	.word	0x080075e9
 8004004:	0800762c 	.word	0x0800762c
 8004008:	080075e1 	.word	0x080075e1
 800400c:	0800776c 	.word	0x0800776c
 8004010:	7ff00000 	.word	0x7ff00000
 8004014:	08007a18 	.word	0x08007a18
 8004018:	080078f8 	.word	0x080078f8
 800401c:	080078d0 	.word	0x080078d0
 8004020:	7ca00000 	.word	0x7ca00000
 8004024:	7fefffff 	.word	0x7fefffff
 8004028:	f016 0310 	ands.w	r3, r6, #16
 800402c:	bf18      	it	ne
 800402e:	236a      	movne	r3, #106	; 0x6a
 8004030:	4640      	mov	r0, r8
 8004032:	9305      	str	r3, [sp, #20]
 8004034:	4649      	mov	r1, r9
 8004036:	2300      	movs	r3, #0
 8004038:	4fb0      	ldr	r7, [pc, #704]	; (80042fc <_strtod_l+0x874>)
 800403a:	07f2      	lsls	r2, r6, #31
 800403c:	d504      	bpl.n	8004048 <_strtod_l+0x5c0>
 800403e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004042:	f7fc fa49 	bl	80004d8 <__aeabi_dmul>
 8004046:	2301      	movs	r3, #1
 8004048:	1076      	asrs	r6, r6, #1
 800404a:	f107 0708 	add.w	r7, r7, #8
 800404e:	d1f4      	bne.n	800403a <_strtod_l+0x5b2>
 8004050:	b10b      	cbz	r3, 8004056 <_strtod_l+0x5ce>
 8004052:	4680      	mov	r8, r0
 8004054:	4689      	mov	r9, r1
 8004056:	9b05      	ldr	r3, [sp, #20]
 8004058:	b1c3      	cbz	r3, 800408c <_strtod_l+0x604>
 800405a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800405e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004062:	2b00      	cmp	r3, #0
 8004064:	4649      	mov	r1, r9
 8004066:	dd11      	ble.n	800408c <_strtod_l+0x604>
 8004068:	2b1f      	cmp	r3, #31
 800406a:	f340 8127 	ble.w	80042bc <_strtod_l+0x834>
 800406e:	2b34      	cmp	r3, #52	; 0x34
 8004070:	bfd8      	it	le
 8004072:	f04f 33ff 	movle.w	r3, #4294967295
 8004076:	f04f 0800 	mov.w	r8, #0
 800407a:	bfcf      	iteee	gt
 800407c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004080:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004084:	fa03 f202 	lslle.w	r2, r3, r2
 8004088:	ea02 0901 	andle.w	r9, r2, r1
 800408c:	2200      	movs	r2, #0
 800408e:	2300      	movs	r3, #0
 8004090:	4640      	mov	r0, r8
 8004092:	4649      	mov	r1, r9
 8004094:	f7fc fc88 	bl	80009a8 <__aeabi_dcmpeq>
 8004098:	2800      	cmp	r0, #0
 800409a:	d1a1      	bne.n	8003fe0 <_strtod_l+0x558>
 800409c:	9b06      	ldr	r3, [sp, #24]
 800409e:	465a      	mov	r2, fp
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	4650      	mov	r0, sl
 80040a4:	4623      	mov	r3, r4
 80040a6:	9908      	ldr	r1, [sp, #32]
 80040a8:	f001 fe1c 	bl	8005ce4 <__s2b>
 80040ac:	9008      	str	r0, [sp, #32]
 80040ae:	2800      	cmp	r0, #0
 80040b0:	f43f af21 	beq.w	8003ef6 <_strtod_l+0x46e>
 80040b4:	9b04      	ldr	r3, [sp, #16]
 80040b6:	f04f 0b00 	mov.w	fp, #0
 80040ba:	1b5d      	subs	r5, r3, r5
 80040bc:	9b07      	ldr	r3, [sp, #28]
 80040be:	f8cd b010 	str.w	fp, [sp, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	bfb4      	ite	lt
 80040c6:	462b      	movlt	r3, r5
 80040c8:	2300      	movge	r3, #0
 80040ca:	930e      	str	r3, [sp, #56]	; 0x38
 80040cc:	9b07      	ldr	r3, [sp, #28]
 80040ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80040d2:	9314      	str	r3, [sp, #80]	; 0x50
 80040d4:	9b08      	ldr	r3, [sp, #32]
 80040d6:	4650      	mov	r0, sl
 80040d8:	6859      	ldr	r1, [r3, #4]
 80040da:	f001 fd5b 	bl	8005b94 <_Balloc>
 80040de:	9006      	str	r0, [sp, #24]
 80040e0:	2800      	cmp	r0, #0
 80040e2:	f43f af10 	beq.w	8003f06 <_strtod_l+0x47e>
 80040e6:	9b08      	ldr	r3, [sp, #32]
 80040e8:	300c      	adds	r0, #12
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	f103 010c 	add.w	r1, r3, #12
 80040f0:	3202      	adds	r2, #2
 80040f2:	0092      	lsls	r2, r2, #2
 80040f4:	f001 fd40 	bl	8005b78 <memcpy>
 80040f8:	ab1c      	add	r3, sp, #112	; 0x70
 80040fa:	9301      	str	r3, [sp, #4]
 80040fc:	ab1b      	add	r3, sp, #108	; 0x6c
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	4642      	mov	r2, r8
 8004102:	464b      	mov	r3, r9
 8004104:	4650      	mov	r0, sl
 8004106:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800410a:	f002 f92d 	bl	8006368 <__d2b>
 800410e:	901a      	str	r0, [sp, #104]	; 0x68
 8004110:	2800      	cmp	r0, #0
 8004112:	f43f aef8 	beq.w	8003f06 <_strtod_l+0x47e>
 8004116:	2101      	movs	r1, #1
 8004118:	4650      	mov	r0, sl
 800411a:	f001 fe7b 	bl	8005e14 <__i2b>
 800411e:	4603      	mov	r3, r0
 8004120:	9004      	str	r0, [sp, #16]
 8004122:	2800      	cmp	r0, #0
 8004124:	f43f aeef 	beq.w	8003f06 <_strtod_l+0x47e>
 8004128:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800412a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800412c:	2d00      	cmp	r5, #0
 800412e:	bfab      	itete	ge
 8004130:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004132:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8004134:	18ee      	addge	r6, r5, r3
 8004136:	1b5c      	sublt	r4, r3, r5
 8004138:	9b05      	ldr	r3, [sp, #20]
 800413a:	bfa8      	it	ge
 800413c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800413e:	eba5 0503 	sub.w	r5, r5, r3
 8004142:	4415      	add	r5, r2
 8004144:	4b6e      	ldr	r3, [pc, #440]	; (8004300 <_strtod_l+0x878>)
 8004146:	f105 35ff 	add.w	r5, r5, #4294967295
 800414a:	bfb8      	it	lt
 800414c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800414e:	429d      	cmp	r5, r3
 8004150:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004154:	f280 80c4 	bge.w	80042e0 <_strtod_l+0x858>
 8004158:	1b5b      	subs	r3, r3, r5
 800415a:	2b1f      	cmp	r3, #31
 800415c:	f04f 0701 	mov.w	r7, #1
 8004160:	eba2 0203 	sub.w	r2, r2, r3
 8004164:	f300 80b1 	bgt.w	80042ca <_strtod_l+0x842>
 8004168:	2500      	movs	r5, #0
 800416a:	fa07 f303 	lsl.w	r3, r7, r3
 800416e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004170:	18b7      	adds	r7, r6, r2
 8004172:	9b05      	ldr	r3, [sp, #20]
 8004174:	42be      	cmp	r6, r7
 8004176:	4414      	add	r4, r2
 8004178:	441c      	add	r4, r3
 800417a:	4633      	mov	r3, r6
 800417c:	bfa8      	it	ge
 800417e:	463b      	movge	r3, r7
 8004180:	42a3      	cmp	r3, r4
 8004182:	bfa8      	it	ge
 8004184:	4623      	movge	r3, r4
 8004186:	2b00      	cmp	r3, #0
 8004188:	bfc2      	ittt	gt
 800418a:	1aff      	subgt	r7, r7, r3
 800418c:	1ae4      	subgt	r4, r4, r3
 800418e:	1af6      	subgt	r6, r6, r3
 8004190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004192:	2b00      	cmp	r3, #0
 8004194:	dd17      	ble.n	80041c6 <_strtod_l+0x73e>
 8004196:	461a      	mov	r2, r3
 8004198:	4650      	mov	r0, sl
 800419a:	9904      	ldr	r1, [sp, #16]
 800419c:	f001 fef8 	bl	8005f90 <__pow5mult>
 80041a0:	9004      	str	r0, [sp, #16]
 80041a2:	2800      	cmp	r0, #0
 80041a4:	f43f aeaf 	beq.w	8003f06 <_strtod_l+0x47e>
 80041a8:	4601      	mov	r1, r0
 80041aa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80041ac:	4650      	mov	r0, sl
 80041ae:	f001 fe47 	bl	8005e40 <__multiply>
 80041b2:	9009      	str	r0, [sp, #36]	; 0x24
 80041b4:	2800      	cmp	r0, #0
 80041b6:	f43f aea6 	beq.w	8003f06 <_strtod_l+0x47e>
 80041ba:	4650      	mov	r0, sl
 80041bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80041be:	f001 fd29 	bl	8005c14 <_Bfree>
 80041c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041c4:	931a      	str	r3, [sp, #104]	; 0x68
 80041c6:	2f00      	cmp	r7, #0
 80041c8:	f300 808e 	bgt.w	80042e8 <_strtod_l+0x860>
 80041cc:	9b07      	ldr	r3, [sp, #28]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	dd08      	ble.n	80041e4 <_strtod_l+0x75c>
 80041d2:	4650      	mov	r0, sl
 80041d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80041d6:	9906      	ldr	r1, [sp, #24]
 80041d8:	f001 feda 	bl	8005f90 <__pow5mult>
 80041dc:	9006      	str	r0, [sp, #24]
 80041de:	2800      	cmp	r0, #0
 80041e0:	f43f ae91 	beq.w	8003f06 <_strtod_l+0x47e>
 80041e4:	2c00      	cmp	r4, #0
 80041e6:	dd08      	ble.n	80041fa <_strtod_l+0x772>
 80041e8:	4622      	mov	r2, r4
 80041ea:	4650      	mov	r0, sl
 80041ec:	9906      	ldr	r1, [sp, #24]
 80041ee:	f001 ff29 	bl	8006044 <__lshift>
 80041f2:	9006      	str	r0, [sp, #24]
 80041f4:	2800      	cmp	r0, #0
 80041f6:	f43f ae86 	beq.w	8003f06 <_strtod_l+0x47e>
 80041fa:	2e00      	cmp	r6, #0
 80041fc:	dd08      	ble.n	8004210 <_strtod_l+0x788>
 80041fe:	4632      	mov	r2, r6
 8004200:	4650      	mov	r0, sl
 8004202:	9904      	ldr	r1, [sp, #16]
 8004204:	f001 ff1e 	bl	8006044 <__lshift>
 8004208:	9004      	str	r0, [sp, #16]
 800420a:	2800      	cmp	r0, #0
 800420c:	f43f ae7b 	beq.w	8003f06 <_strtod_l+0x47e>
 8004210:	4650      	mov	r0, sl
 8004212:	9a06      	ldr	r2, [sp, #24]
 8004214:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004216:	f001 ffa1 	bl	800615c <__mdiff>
 800421a:	4683      	mov	fp, r0
 800421c:	2800      	cmp	r0, #0
 800421e:	f43f ae72 	beq.w	8003f06 <_strtod_l+0x47e>
 8004222:	2400      	movs	r4, #0
 8004224:	68c3      	ldr	r3, [r0, #12]
 8004226:	9904      	ldr	r1, [sp, #16]
 8004228:	60c4      	str	r4, [r0, #12]
 800422a:	930b      	str	r3, [sp, #44]	; 0x2c
 800422c:	f001 ff7a 	bl	8006124 <__mcmp>
 8004230:	42a0      	cmp	r0, r4
 8004232:	da6b      	bge.n	800430c <_strtod_l+0x884>
 8004234:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004236:	ea53 0308 	orrs.w	r3, r3, r8
 800423a:	f040 8091 	bne.w	8004360 <_strtod_l+0x8d8>
 800423e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004242:	2b00      	cmp	r3, #0
 8004244:	f040 808c 	bne.w	8004360 <_strtod_l+0x8d8>
 8004248:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800424c:	0d1b      	lsrs	r3, r3, #20
 800424e:	051b      	lsls	r3, r3, #20
 8004250:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004254:	f240 8084 	bls.w	8004360 <_strtod_l+0x8d8>
 8004258:	f8db 3014 	ldr.w	r3, [fp, #20]
 800425c:	b91b      	cbnz	r3, 8004266 <_strtod_l+0x7de>
 800425e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004262:	2b01      	cmp	r3, #1
 8004264:	dd7c      	ble.n	8004360 <_strtod_l+0x8d8>
 8004266:	4659      	mov	r1, fp
 8004268:	2201      	movs	r2, #1
 800426a:	4650      	mov	r0, sl
 800426c:	f001 feea 	bl	8006044 <__lshift>
 8004270:	9904      	ldr	r1, [sp, #16]
 8004272:	4683      	mov	fp, r0
 8004274:	f001 ff56 	bl	8006124 <__mcmp>
 8004278:	2800      	cmp	r0, #0
 800427a:	dd71      	ble.n	8004360 <_strtod_l+0x8d8>
 800427c:	9905      	ldr	r1, [sp, #20]
 800427e:	464b      	mov	r3, r9
 8004280:	4a20      	ldr	r2, [pc, #128]	; (8004304 <_strtod_l+0x87c>)
 8004282:	2900      	cmp	r1, #0
 8004284:	f000 808c 	beq.w	80043a0 <_strtod_l+0x918>
 8004288:	ea02 0109 	and.w	r1, r2, r9
 800428c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004290:	f300 8086 	bgt.w	80043a0 <_strtod_l+0x918>
 8004294:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004298:	f77f aeaa 	ble.w	8003ff0 <_strtod_l+0x568>
 800429c:	4640      	mov	r0, r8
 800429e:	4649      	mov	r1, r9
 80042a0:	4b19      	ldr	r3, [pc, #100]	; (8004308 <_strtod_l+0x880>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	f7fc f918 	bl	80004d8 <__aeabi_dmul>
 80042a8:	460b      	mov	r3, r1
 80042aa:	4303      	orrs	r3, r0
 80042ac:	bf08      	it	eq
 80042ae:	2322      	moveq	r3, #34	; 0x22
 80042b0:	4680      	mov	r8, r0
 80042b2:	4689      	mov	r9, r1
 80042b4:	bf08      	it	eq
 80042b6:	f8ca 3000 	streq.w	r3, [sl]
 80042ba:	e62f      	b.n	8003f1c <_strtod_l+0x494>
 80042bc:	f04f 32ff 	mov.w	r2, #4294967295
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	ea03 0808 	and.w	r8, r3, r8
 80042c8:	e6e0      	b.n	800408c <_strtod_l+0x604>
 80042ca:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80042ce:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80042d2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80042d6:	35e2      	adds	r5, #226	; 0xe2
 80042d8:	fa07 f505 	lsl.w	r5, r7, r5
 80042dc:	970f      	str	r7, [sp, #60]	; 0x3c
 80042de:	e747      	b.n	8004170 <_strtod_l+0x6e8>
 80042e0:	2301      	movs	r3, #1
 80042e2:	2500      	movs	r5, #0
 80042e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80042e6:	e743      	b.n	8004170 <_strtod_l+0x6e8>
 80042e8:	463a      	mov	r2, r7
 80042ea:	4650      	mov	r0, sl
 80042ec:	991a      	ldr	r1, [sp, #104]	; 0x68
 80042ee:	f001 fea9 	bl	8006044 <__lshift>
 80042f2:	901a      	str	r0, [sp, #104]	; 0x68
 80042f4:	2800      	cmp	r0, #0
 80042f6:	f47f af69 	bne.w	80041cc <_strtod_l+0x744>
 80042fa:	e604      	b.n	8003f06 <_strtod_l+0x47e>
 80042fc:	08007640 	.word	0x08007640
 8004300:	fffffc02 	.word	0xfffffc02
 8004304:	7ff00000 	.word	0x7ff00000
 8004308:	39500000 	.word	0x39500000
 800430c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004310:	d165      	bne.n	80043de <_strtod_l+0x956>
 8004312:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004314:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004318:	b35a      	cbz	r2, 8004372 <_strtod_l+0x8ea>
 800431a:	4a99      	ldr	r2, [pc, #612]	; (8004580 <_strtod_l+0xaf8>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d12b      	bne.n	8004378 <_strtod_l+0x8f0>
 8004320:	9b05      	ldr	r3, [sp, #20]
 8004322:	4641      	mov	r1, r8
 8004324:	b303      	cbz	r3, 8004368 <_strtod_l+0x8e0>
 8004326:	464a      	mov	r2, r9
 8004328:	4b96      	ldr	r3, [pc, #600]	; (8004584 <_strtod_l+0xafc>)
 800432a:	4013      	ands	r3, r2
 800432c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004330:	f04f 32ff 	mov.w	r2, #4294967295
 8004334:	d81b      	bhi.n	800436e <_strtod_l+0x8e6>
 8004336:	0d1b      	lsrs	r3, r3, #20
 8004338:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800433c:	fa02 f303 	lsl.w	r3, r2, r3
 8004340:	4299      	cmp	r1, r3
 8004342:	d119      	bne.n	8004378 <_strtod_l+0x8f0>
 8004344:	4b90      	ldr	r3, [pc, #576]	; (8004588 <_strtod_l+0xb00>)
 8004346:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004348:	429a      	cmp	r2, r3
 800434a:	d102      	bne.n	8004352 <_strtod_l+0x8ca>
 800434c:	3101      	adds	r1, #1
 800434e:	f43f adda 	beq.w	8003f06 <_strtod_l+0x47e>
 8004352:	f04f 0800 	mov.w	r8, #0
 8004356:	4b8b      	ldr	r3, [pc, #556]	; (8004584 <_strtod_l+0xafc>)
 8004358:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800435a:	401a      	ands	r2, r3
 800435c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004360:	9b05      	ldr	r3, [sp, #20]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d19a      	bne.n	800429c <_strtod_l+0x814>
 8004366:	e5d9      	b.n	8003f1c <_strtod_l+0x494>
 8004368:	f04f 33ff 	mov.w	r3, #4294967295
 800436c:	e7e8      	b.n	8004340 <_strtod_l+0x8b8>
 800436e:	4613      	mov	r3, r2
 8004370:	e7e6      	b.n	8004340 <_strtod_l+0x8b8>
 8004372:	ea53 0308 	orrs.w	r3, r3, r8
 8004376:	d081      	beq.n	800427c <_strtod_l+0x7f4>
 8004378:	b1e5      	cbz	r5, 80043b4 <_strtod_l+0x92c>
 800437a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800437c:	421d      	tst	r5, r3
 800437e:	d0ef      	beq.n	8004360 <_strtod_l+0x8d8>
 8004380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004382:	4640      	mov	r0, r8
 8004384:	4649      	mov	r1, r9
 8004386:	9a05      	ldr	r2, [sp, #20]
 8004388:	b1c3      	cbz	r3, 80043bc <_strtod_l+0x934>
 800438a:	f7ff fb59 	bl	8003a40 <sulp>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004396:	f7fb fee9 	bl	800016c <__adddf3>
 800439a:	4680      	mov	r8, r0
 800439c:	4689      	mov	r9, r1
 800439e:	e7df      	b.n	8004360 <_strtod_l+0x8d8>
 80043a0:	4013      	ands	r3, r2
 80043a2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80043a6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80043aa:	f04f 38ff 	mov.w	r8, #4294967295
 80043ae:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80043b2:	e7d5      	b.n	8004360 <_strtod_l+0x8d8>
 80043b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80043b6:	ea13 0f08 	tst.w	r3, r8
 80043ba:	e7e0      	b.n	800437e <_strtod_l+0x8f6>
 80043bc:	f7ff fb40 	bl	8003a40 <sulp>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80043c8:	f7fb fece 	bl	8000168 <__aeabi_dsub>
 80043cc:	2200      	movs	r2, #0
 80043ce:	2300      	movs	r3, #0
 80043d0:	4680      	mov	r8, r0
 80043d2:	4689      	mov	r9, r1
 80043d4:	f7fc fae8 	bl	80009a8 <__aeabi_dcmpeq>
 80043d8:	2800      	cmp	r0, #0
 80043da:	d0c1      	beq.n	8004360 <_strtod_l+0x8d8>
 80043dc:	e608      	b.n	8003ff0 <_strtod_l+0x568>
 80043de:	4658      	mov	r0, fp
 80043e0:	9904      	ldr	r1, [sp, #16]
 80043e2:	f002 f81d 	bl	8006420 <__ratio>
 80043e6:	2200      	movs	r2, #0
 80043e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043ec:	4606      	mov	r6, r0
 80043ee:	460f      	mov	r7, r1
 80043f0:	f7fc faee 	bl	80009d0 <__aeabi_dcmple>
 80043f4:	2800      	cmp	r0, #0
 80043f6:	d070      	beq.n	80044da <_strtod_l+0xa52>
 80043f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d042      	beq.n	8004484 <_strtod_l+0x9fc>
 80043fe:	2600      	movs	r6, #0
 8004400:	4f62      	ldr	r7, [pc, #392]	; (800458c <_strtod_l+0xb04>)
 8004402:	4d62      	ldr	r5, [pc, #392]	; (800458c <_strtod_l+0xb04>)
 8004404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004406:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800440a:	0d1b      	lsrs	r3, r3, #20
 800440c:	051b      	lsls	r3, r3, #20
 800440e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004410:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004412:	4b5f      	ldr	r3, [pc, #380]	; (8004590 <_strtod_l+0xb08>)
 8004414:	429a      	cmp	r2, r3
 8004416:	f040 80c3 	bne.w	80045a0 <_strtod_l+0xb18>
 800441a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800441c:	4640      	mov	r0, r8
 800441e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8004422:	4649      	mov	r1, r9
 8004424:	f001 ff26 	bl	8006274 <__ulp>
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	4630      	mov	r0, r6
 800442e:	4639      	mov	r1, r7
 8004430:	f7fc f852 	bl	80004d8 <__aeabi_dmul>
 8004434:	4642      	mov	r2, r8
 8004436:	464b      	mov	r3, r9
 8004438:	f7fb fe98 	bl	800016c <__adddf3>
 800443c:	460b      	mov	r3, r1
 800443e:	4951      	ldr	r1, [pc, #324]	; (8004584 <_strtod_l+0xafc>)
 8004440:	4a54      	ldr	r2, [pc, #336]	; (8004594 <_strtod_l+0xb0c>)
 8004442:	4019      	ands	r1, r3
 8004444:	4291      	cmp	r1, r2
 8004446:	4680      	mov	r8, r0
 8004448:	d95d      	bls.n	8004506 <_strtod_l+0xa7e>
 800444a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800444c:	4b4e      	ldr	r3, [pc, #312]	; (8004588 <_strtod_l+0xb00>)
 800444e:	429a      	cmp	r2, r3
 8004450:	d103      	bne.n	800445a <_strtod_l+0x9d2>
 8004452:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004454:	3301      	adds	r3, #1
 8004456:	f43f ad56 	beq.w	8003f06 <_strtod_l+0x47e>
 800445a:	f04f 38ff 	mov.w	r8, #4294967295
 800445e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8004588 <_strtod_l+0xb00>
 8004462:	4650      	mov	r0, sl
 8004464:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004466:	f001 fbd5 	bl	8005c14 <_Bfree>
 800446a:	4650      	mov	r0, sl
 800446c:	9906      	ldr	r1, [sp, #24]
 800446e:	f001 fbd1 	bl	8005c14 <_Bfree>
 8004472:	4650      	mov	r0, sl
 8004474:	9904      	ldr	r1, [sp, #16]
 8004476:	f001 fbcd 	bl	8005c14 <_Bfree>
 800447a:	4659      	mov	r1, fp
 800447c:	4650      	mov	r0, sl
 800447e:	f001 fbc9 	bl	8005c14 <_Bfree>
 8004482:	e627      	b.n	80040d4 <_strtod_l+0x64c>
 8004484:	f1b8 0f00 	cmp.w	r8, #0
 8004488:	d119      	bne.n	80044be <_strtod_l+0xa36>
 800448a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800448c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004490:	b9e3      	cbnz	r3, 80044cc <_strtod_l+0xa44>
 8004492:	2200      	movs	r2, #0
 8004494:	4630      	mov	r0, r6
 8004496:	4639      	mov	r1, r7
 8004498:	4b3c      	ldr	r3, [pc, #240]	; (800458c <_strtod_l+0xb04>)
 800449a:	f7fc fa8f 	bl	80009bc <__aeabi_dcmplt>
 800449e:	b9c8      	cbnz	r0, 80044d4 <_strtod_l+0xa4c>
 80044a0:	2200      	movs	r2, #0
 80044a2:	4630      	mov	r0, r6
 80044a4:	4639      	mov	r1, r7
 80044a6:	4b3c      	ldr	r3, [pc, #240]	; (8004598 <_strtod_l+0xb10>)
 80044a8:	f7fc f816 	bl	80004d8 <__aeabi_dmul>
 80044ac:	4604      	mov	r4, r0
 80044ae:	460d      	mov	r5, r1
 80044b0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80044b4:	9416      	str	r4, [sp, #88]	; 0x58
 80044b6:	9317      	str	r3, [sp, #92]	; 0x5c
 80044b8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80044bc:	e7a2      	b.n	8004404 <_strtod_l+0x97c>
 80044be:	f1b8 0f01 	cmp.w	r8, #1
 80044c2:	d103      	bne.n	80044cc <_strtod_l+0xa44>
 80044c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f43f ad92 	beq.w	8003ff0 <_strtod_l+0x568>
 80044cc:	2600      	movs	r6, #0
 80044ce:	2400      	movs	r4, #0
 80044d0:	4f32      	ldr	r7, [pc, #200]	; (800459c <_strtod_l+0xb14>)
 80044d2:	e796      	b.n	8004402 <_strtod_l+0x97a>
 80044d4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80044d6:	4d30      	ldr	r5, [pc, #192]	; (8004598 <_strtod_l+0xb10>)
 80044d8:	e7ea      	b.n	80044b0 <_strtod_l+0xa28>
 80044da:	4b2f      	ldr	r3, [pc, #188]	; (8004598 <_strtod_l+0xb10>)
 80044dc:	2200      	movs	r2, #0
 80044de:	4630      	mov	r0, r6
 80044e0:	4639      	mov	r1, r7
 80044e2:	f7fb fff9 	bl	80004d8 <__aeabi_dmul>
 80044e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044e8:	4604      	mov	r4, r0
 80044ea:	460d      	mov	r5, r1
 80044ec:	b933      	cbnz	r3, 80044fc <_strtod_l+0xa74>
 80044ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80044f2:	9010      	str	r0, [sp, #64]	; 0x40
 80044f4:	9311      	str	r3, [sp, #68]	; 0x44
 80044f6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80044fa:	e783      	b.n	8004404 <_strtod_l+0x97c>
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004504:	e7f7      	b.n	80044f6 <_strtod_l+0xa6e>
 8004506:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800450a:	9b05      	ldr	r3, [sp, #20]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1a8      	bne.n	8004462 <_strtod_l+0x9da>
 8004510:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004514:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004516:	0d1b      	lsrs	r3, r3, #20
 8004518:	051b      	lsls	r3, r3, #20
 800451a:	429a      	cmp	r2, r3
 800451c:	d1a1      	bne.n	8004462 <_strtod_l+0x9da>
 800451e:	4620      	mov	r0, r4
 8004520:	4629      	mov	r1, r5
 8004522:	f7fc fb21 	bl	8000b68 <__aeabi_d2lz>
 8004526:	f7fb ffa9 	bl	800047c <__aeabi_l2d>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4620      	mov	r0, r4
 8004530:	4629      	mov	r1, r5
 8004532:	f7fb fe19 	bl	8000168 <__aeabi_dsub>
 8004536:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004538:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800453c:	ea43 0308 	orr.w	r3, r3, r8
 8004540:	4313      	orrs	r3, r2
 8004542:	4604      	mov	r4, r0
 8004544:	460d      	mov	r5, r1
 8004546:	d066      	beq.n	8004616 <_strtod_l+0xb8e>
 8004548:	a309      	add	r3, pc, #36	; (adr r3, 8004570 <_strtod_l+0xae8>)
 800454a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454e:	f7fc fa35 	bl	80009bc <__aeabi_dcmplt>
 8004552:	2800      	cmp	r0, #0
 8004554:	f47f ace2 	bne.w	8003f1c <_strtod_l+0x494>
 8004558:	a307      	add	r3, pc, #28	; (adr r3, 8004578 <_strtod_l+0xaf0>)
 800455a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455e:	4620      	mov	r0, r4
 8004560:	4629      	mov	r1, r5
 8004562:	f7fc fa49 	bl	80009f8 <__aeabi_dcmpgt>
 8004566:	2800      	cmp	r0, #0
 8004568:	f43f af7b 	beq.w	8004462 <_strtod_l+0x9da>
 800456c:	e4d6      	b.n	8003f1c <_strtod_l+0x494>
 800456e:	bf00      	nop
 8004570:	94a03595 	.word	0x94a03595
 8004574:	3fdfffff 	.word	0x3fdfffff
 8004578:	35afe535 	.word	0x35afe535
 800457c:	3fe00000 	.word	0x3fe00000
 8004580:	000fffff 	.word	0x000fffff
 8004584:	7ff00000 	.word	0x7ff00000
 8004588:	7fefffff 	.word	0x7fefffff
 800458c:	3ff00000 	.word	0x3ff00000
 8004590:	7fe00000 	.word	0x7fe00000
 8004594:	7c9fffff 	.word	0x7c9fffff
 8004598:	3fe00000 	.word	0x3fe00000
 800459c:	bff00000 	.word	0xbff00000
 80045a0:	9b05      	ldr	r3, [sp, #20]
 80045a2:	b313      	cbz	r3, 80045ea <_strtod_l+0xb62>
 80045a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80045a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80045aa:	d81e      	bhi.n	80045ea <_strtod_l+0xb62>
 80045ac:	a326      	add	r3, pc, #152	; (adr r3, 8004648 <_strtod_l+0xbc0>)
 80045ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b2:	4620      	mov	r0, r4
 80045b4:	4629      	mov	r1, r5
 80045b6:	f7fc fa0b 	bl	80009d0 <__aeabi_dcmple>
 80045ba:	b190      	cbz	r0, 80045e2 <_strtod_l+0xb5a>
 80045bc:	4629      	mov	r1, r5
 80045be:	4620      	mov	r0, r4
 80045c0:	f7fc fa62 	bl	8000a88 <__aeabi_d2uiz>
 80045c4:	2801      	cmp	r0, #1
 80045c6:	bf38      	it	cc
 80045c8:	2001      	movcc	r0, #1
 80045ca:	f7fb ff0b 	bl	80003e4 <__aeabi_ui2d>
 80045ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045d0:	4604      	mov	r4, r0
 80045d2:	460d      	mov	r5, r1
 80045d4:	b9d3      	cbnz	r3, 800460c <_strtod_l+0xb84>
 80045d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80045da:	9012      	str	r0, [sp, #72]	; 0x48
 80045dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80045de:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80045e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80045e4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80045e8:	1a9f      	subs	r7, r3, r2
 80045ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80045ee:	f001 fe41 	bl	8006274 <__ulp>
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	4630      	mov	r0, r6
 80045f8:	4639      	mov	r1, r7
 80045fa:	f7fb ff6d 	bl	80004d8 <__aeabi_dmul>
 80045fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004602:	f7fb fdb3 	bl	800016c <__adddf3>
 8004606:	4680      	mov	r8, r0
 8004608:	4689      	mov	r9, r1
 800460a:	e77e      	b.n	800450a <_strtod_l+0xa82>
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004614:	e7e3      	b.n	80045de <_strtod_l+0xb56>
 8004616:	a30e      	add	r3, pc, #56	; (adr r3, 8004650 <_strtod_l+0xbc8>)
 8004618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461c:	f7fc f9ce 	bl	80009bc <__aeabi_dcmplt>
 8004620:	e7a1      	b.n	8004566 <_strtod_l+0xade>
 8004622:	2300      	movs	r3, #0
 8004624:	930a      	str	r3, [sp, #40]	; 0x28
 8004626:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004628:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800462a:	6013      	str	r3, [r2, #0]
 800462c:	f7ff ba71 	b.w	8003b12 <_strtod_l+0x8a>
 8004630:	2a65      	cmp	r2, #101	; 0x65
 8004632:	f43f ab63 	beq.w	8003cfc <_strtod_l+0x274>
 8004636:	2a45      	cmp	r2, #69	; 0x45
 8004638:	f43f ab60 	beq.w	8003cfc <_strtod_l+0x274>
 800463c:	2301      	movs	r3, #1
 800463e:	f7ff bb95 	b.w	8003d6c <_strtod_l+0x2e4>
 8004642:	bf00      	nop
 8004644:	f3af 8000 	nop.w
 8004648:	ffc00000 	.word	0xffc00000
 800464c:	41dfffff 	.word	0x41dfffff
 8004650:	94a03595 	.word	0x94a03595
 8004654:	3fcfffff 	.word	0x3fcfffff

08004658 <_strtod_r>:
 8004658:	4b01      	ldr	r3, [pc, #4]	; (8004660 <_strtod_r+0x8>)
 800465a:	f7ff ba15 	b.w	8003a88 <_strtod_l>
 800465e:	bf00      	nop
 8004660:	20000074 	.word	0x20000074

08004664 <_strtol_l.constprop.0>:
 8004664:	2b01      	cmp	r3, #1
 8004666:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800466a:	4680      	mov	r8, r0
 800466c:	d001      	beq.n	8004672 <_strtol_l.constprop.0+0xe>
 800466e:	2b24      	cmp	r3, #36	; 0x24
 8004670:	d906      	bls.n	8004680 <_strtol_l.constprop.0+0x1c>
 8004672:	f7fe fb21 	bl	8002cb8 <__errno>
 8004676:	2316      	movs	r3, #22
 8004678:	6003      	str	r3, [r0, #0]
 800467a:	2000      	movs	r0, #0
 800467c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004680:	460d      	mov	r5, r1
 8004682:	4f35      	ldr	r7, [pc, #212]	; (8004758 <_strtol_l.constprop.0+0xf4>)
 8004684:	4628      	mov	r0, r5
 8004686:	f815 4b01 	ldrb.w	r4, [r5], #1
 800468a:	5de6      	ldrb	r6, [r4, r7]
 800468c:	f016 0608 	ands.w	r6, r6, #8
 8004690:	d1f8      	bne.n	8004684 <_strtol_l.constprop.0+0x20>
 8004692:	2c2d      	cmp	r4, #45	; 0x2d
 8004694:	d12f      	bne.n	80046f6 <_strtol_l.constprop.0+0x92>
 8004696:	2601      	movs	r6, #1
 8004698:	782c      	ldrb	r4, [r5, #0]
 800469a:	1c85      	adds	r5, r0, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d057      	beq.n	8004750 <_strtol_l.constprop.0+0xec>
 80046a0:	2b10      	cmp	r3, #16
 80046a2:	d109      	bne.n	80046b8 <_strtol_l.constprop.0+0x54>
 80046a4:	2c30      	cmp	r4, #48	; 0x30
 80046a6:	d107      	bne.n	80046b8 <_strtol_l.constprop.0+0x54>
 80046a8:	7828      	ldrb	r0, [r5, #0]
 80046aa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80046ae:	2858      	cmp	r0, #88	; 0x58
 80046b0:	d149      	bne.n	8004746 <_strtol_l.constprop.0+0xe2>
 80046b2:	2310      	movs	r3, #16
 80046b4:	786c      	ldrb	r4, [r5, #1]
 80046b6:	3502      	adds	r5, #2
 80046b8:	2700      	movs	r7, #0
 80046ba:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80046be:	f10e 3eff 	add.w	lr, lr, #4294967295
 80046c2:	fbbe f9f3 	udiv	r9, lr, r3
 80046c6:	4638      	mov	r0, r7
 80046c8:	fb03 ea19 	mls	sl, r3, r9, lr
 80046cc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80046d0:	f1bc 0f09 	cmp.w	ip, #9
 80046d4:	d814      	bhi.n	8004700 <_strtol_l.constprop.0+0x9c>
 80046d6:	4664      	mov	r4, ip
 80046d8:	42a3      	cmp	r3, r4
 80046da:	dd22      	ble.n	8004722 <_strtol_l.constprop.0+0xbe>
 80046dc:	2f00      	cmp	r7, #0
 80046de:	db1d      	blt.n	800471c <_strtol_l.constprop.0+0xb8>
 80046e0:	4581      	cmp	r9, r0
 80046e2:	d31b      	bcc.n	800471c <_strtol_l.constprop.0+0xb8>
 80046e4:	d101      	bne.n	80046ea <_strtol_l.constprop.0+0x86>
 80046e6:	45a2      	cmp	sl, r4
 80046e8:	db18      	blt.n	800471c <_strtol_l.constprop.0+0xb8>
 80046ea:	2701      	movs	r7, #1
 80046ec:	fb00 4003 	mla	r0, r0, r3, r4
 80046f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80046f4:	e7ea      	b.n	80046cc <_strtol_l.constprop.0+0x68>
 80046f6:	2c2b      	cmp	r4, #43	; 0x2b
 80046f8:	bf04      	itt	eq
 80046fa:	782c      	ldrbeq	r4, [r5, #0]
 80046fc:	1c85      	addeq	r5, r0, #2
 80046fe:	e7cd      	b.n	800469c <_strtol_l.constprop.0+0x38>
 8004700:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004704:	f1bc 0f19 	cmp.w	ip, #25
 8004708:	d801      	bhi.n	800470e <_strtol_l.constprop.0+0xaa>
 800470a:	3c37      	subs	r4, #55	; 0x37
 800470c:	e7e4      	b.n	80046d8 <_strtol_l.constprop.0+0x74>
 800470e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004712:	f1bc 0f19 	cmp.w	ip, #25
 8004716:	d804      	bhi.n	8004722 <_strtol_l.constprop.0+0xbe>
 8004718:	3c57      	subs	r4, #87	; 0x57
 800471a:	e7dd      	b.n	80046d8 <_strtol_l.constprop.0+0x74>
 800471c:	f04f 37ff 	mov.w	r7, #4294967295
 8004720:	e7e6      	b.n	80046f0 <_strtol_l.constprop.0+0x8c>
 8004722:	2f00      	cmp	r7, #0
 8004724:	da07      	bge.n	8004736 <_strtol_l.constprop.0+0xd2>
 8004726:	2322      	movs	r3, #34	; 0x22
 8004728:	4670      	mov	r0, lr
 800472a:	f8c8 3000 	str.w	r3, [r8]
 800472e:	2a00      	cmp	r2, #0
 8004730:	d0a4      	beq.n	800467c <_strtol_l.constprop.0+0x18>
 8004732:	1e69      	subs	r1, r5, #1
 8004734:	e005      	b.n	8004742 <_strtol_l.constprop.0+0xde>
 8004736:	b106      	cbz	r6, 800473a <_strtol_l.constprop.0+0xd6>
 8004738:	4240      	negs	r0, r0
 800473a:	2a00      	cmp	r2, #0
 800473c:	d09e      	beq.n	800467c <_strtol_l.constprop.0+0x18>
 800473e:	2f00      	cmp	r7, #0
 8004740:	d1f7      	bne.n	8004732 <_strtol_l.constprop.0+0xce>
 8004742:	6011      	str	r1, [r2, #0]
 8004744:	e79a      	b.n	800467c <_strtol_l.constprop.0+0x18>
 8004746:	2430      	movs	r4, #48	; 0x30
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1b5      	bne.n	80046b8 <_strtol_l.constprop.0+0x54>
 800474c:	2308      	movs	r3, #8
 800474e:	e7b3      	b.n	80046b8 <_strtol_l.constprop.0+0x54>
 8004750:	2c30      	cmp	r4, #48	; 0x30
 8004752:	d0a9      	beq.n	80046a8 <_strtol_l.constprop.0+0x44>
 8004754:	230a      	movs	r3, #10
 8004756:	e7af      	b.n	80046b8 <_strtol_l.constprop.0+0x54>
 8004758:	08007669 	.word	0x08007669

0800475c <_strtol_r>:
 800475c:	f7ff bf82 	b.w	8004664 <_strtol_l.constprop.0>

08004760 <quorem>:
 8004760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004764:	6903      	ldr	r3, [r0, #16]
 8004766:	690c      	ldr	r4, [r1, #16]
 8004768:	4607      	mov	r7, r0
 800476a:	42a3      	cmp	r3, r4
 800476c:	f2c0 8082 	blt.w	8004874 <quorem+0x114>
 8004770:	3c01      	subs	r4, #1
 8004772:	f100 0514 	add.w	r5, r0, #20
 8004776:	f101 0814 	add.w	r8, r1, #20
 800477a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800477e:	9301      	str	r3, [sp, #4]
 8004780:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004784:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004788:	3301      	adds	r3, #1
 800478a:	429a      	cmp	r2, r3
 800478c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004790:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004794:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004798:	d331      	bcc.n	80047fe <quorem+0x9e>
 800479a:	f04f 0e00 	mov.w	lr, #0
 800479e:	4640      	mov	r0, r8
 80047a0:	46ac      	mov	ip, r5
 80047a2:	46f2      	mov	sl, lr
 80047a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80047a8:	b293      	uxth	r3, r2
 80047aa:	fb06 e303 	mla	r3, r6, r3, lr
 80047ae:	0c12      	lsrs	r2, r2, #16
 80047b0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	fb06 e202 	mla	r2, r6, r2, lr
 80047ba:	ebaa 0303 	sub.w	r3, sl, r3
 80047be:	f8dc a000 	ldr.w	sl, [ip]
 80047c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80047c6:	fa1f fa8a 	uxth.w	sl, sl
 80047ca:	4453      	add	r3, sl
 80047cc:	f8dc a000 	ldr.w	sl, [ip]
 80047d0:	b292      	uxth	r2, r2
 80047d2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80047d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80047da:	b29b      	uxth	r3, r3
 80047dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047e0:	4581      	cmp	r9, r0
 80047e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80047e6:	f84c 3b04 	str.w	r3, [ip], #4
 80047ea:	d2db      	bcs.n	80047a4 <quorem+0x44>
 80047ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80047f0:	b92b      	cbnz	r3, 80047fe <quorem+0x9e>
 80047f2:	9b01      	ldr	r3, [sp, #4]
 80047f4:	3b04      	subs	r3, #4
 80047f6:	429d      	cmp	r5, r3
 80047f8:	461a      	mov	r2, r3
 80047fa:	d32f      	bcc.n	800485c <quorem+0xfc>
 80047fc:	613c      	str	r4, [r7, #16]
 80047fe:	4638      	mov	r0, r7
 8004800:	f001 fc90 	bl	8006124 <__mcmp>
 8004804:	2800      	cmp	r0, #0
 8004806:	db25      	blt.n	8004854 <quorem+0xf4>
 8004808:	4628      	mov	r0, r5
 800480a:	f04f 0c00 	mov.w	ip, #0
 800480e:	3601      	adds	r6, #1
 8004810:	f858 1b04 	ldr.w	r1, [r8], #4
 8004814:	f8d0 e000 	ldr.w	lr, [r0]
 8004818:	b28b      	uxth	r3, r1
 800481a:	ebac 0303 	sub.w	r3, ip, r3
 800481e:	fa1f f28e 	uxth.w	r2, lr
 8004822:	4413      	add	r3, r2
 8004824:	0c0a      	lsrs	r2, r1, #16
 8004826:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800482a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800482e:	b29b      	uxth	r3, r3
 8004830:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004834:	45c1      	cmp	r9, r8
 8004836:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800483a:	f840 3b04 	str.w	r3, [r0], #4
 800483e:	d2e7      	bcs.n	8004810 <quorem+0xb0>
 8004840:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004844:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004848:	b922      	cbnz	r2, 8004854 <quorem+0xf4>
 800484a:	3b04      	subs	r3, #4
 800484c:	429d      	cmp	r5, r3
 800484e:	461a      	mov	r2, r3
 8004850:	d30a      	bcc.n	8004868 <quorem+0x108>
 8004852:	613c      	str	r4, [r7, #16]
 8004854:	4630      	mov	r0, r6
 8004856:	b003      	add	sp, #12
 8004858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800485c:	6812      	ldr	r2, [r2, #0]
 800485e:	3b04      	subs	r3, #4
 8004860:	2a00      	cmp	r2, #0
 8004862:	d1cb      	bne.n	80047fc <quorem+0x9c>
 8004864:	3c01      	subs	r4, #1
 8004866:	e7c6      	b.n	80047f6 <quorem+0x96>
 8004868:	6812      	ldr	r2, [r2, #0]
 800486a:	3b04      	subs	r3, #4
 800486c:	2a00      	cmp	r2, #0
 800486e:	d1f0      	bne.n	8004852 <quorem+0xf2>
 8004870:	3c01      	subs	r4, #1
 8004872:	e7eb      	b.n	800484c <quorem+0xec>
 8004874:	2000      	movs	r0, #0
 8004876:	e7ee      	b.n	8004856 <quorem+0xf6>

08004878 <_dtoa_r>:
 8004878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800487c:	4616      	mov	r6, r2
 800487e:	461f      	mov	r7, r3
 8004880:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004882:	b099      	sub	sp, #100	; 0x64
 8004884:	4605      	mov	r5, r0
 8004886:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800488a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800488e:	b974      	cbnz	r4, 80048ae <_dtoa_r+0x36>
 8004890:	2010      	movs	r0, #16
 8004892:	f001 f949 	bl	8005b28 <malloc>
 8004896:	4602      	mov	r2, r0
 8004898:	6268      	str	r0, [r5, #36]	; 0x24
 800489a:	b920      	cbnz	r0, 80048a6 <_dtoa_r+0x2e>
 800489c:	21ea      	movs	r1, #234	; 0xea
 800489e:	4ba8      	ldr	r3, [pc, #672]	; (8004b40 <_dtoa_r+0x2c8>)
 80048a0:	48a8      	ldr	r0, [pc, #672]	; (8004b44 <_dtoa_r+0x2cc>)
 80048a2:	f002 f8b3 	bl	8006a0c <__assert_func>
 80048a6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80048aa:	6004      	str	r4, [r0, #0]
 80048ac:	60c4      	str	r4, [r0, #12]
 80048ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80048b0:	6819      	ldr	r1, [r3, #0]
 80048b2:	b151      	cbz	r1, 80048ca <_dtoa_r+0x52>
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	2301      	movs	r3, #1
 80048b8:	4093      	lsls	r3, r2
 80048ba:	604a      	str	r2, [r1, #4]
 80048bc:	608b      	str	r3, [r1, #8]
 80048be:	4628      	mov	r0, r5
 80048c0:	f001 f9a8 	bl	8005c14 <_Bfree>
 80048c4:	2200      	movs	r2, #0
 80048c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	1e3b      	subs	r3, r7, #0
 80048cc:	bfaf      	iteee	ge
 80048ce:	2300      	movge	r3, #0
 80048d0:	2201      	movlt	r2, #1
 80048d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80048d6:	9305      	strlt	r3, [sp, #20]
 80048d8:	bfa8      	it	ge
 80048da:	f8c8 3000 	strge.w	r3, [r8]
 80048de:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80048e2:	4b99      	ldr	r3, [pc, #612]	; (8004b48 <_dtoa_r+0x2d0>)
 80048e4:	bfb8      	it	lt
 80048e6:	f8c8 2000 	strlt.w	r2, [r8]
 80048ea:	ea33 0309 	bics.w	r3, r3, r9
 80048ee:	d119      	bne.n	8004924 <_dtoa_r+0xac>
 80048f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80048f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80048f6:	6013      	str	r3, [r2, #0]
 80048f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80048fc:	4333      	orrs	r3, r6
 80048fe:	f000 857f 	beq.w	8005400 <_dtoa_r+0xb88>
 8004902:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004904:	b953      	cbnz	r3, 800491c <_dtoa_r+0xa4>
 8004906:	4b91      	ldr	r3, [pc, #580]	; (8004b4c <_dtoa_r+0x2d4>)
 8004908:	e022      	b.n	8004950 <_dtoa_r+0xd8>
 800490a:	4b91      	ldr	r3, [pc, #580]	; (8004b50 <_dtoa_r+0x2d8>)
 800490c:	9303      	str	r3, [sp, #12]
 800490e:	3308      	adds	r3, #8
 8004910:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	9803      	ldr	r0, [sp, #12]
 8004916:	b019      	add	sp, #100	; 0x64
 8004918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800491c:	4b8b      	ldr	r3, [pc, #556]	; (8004b4c <_dtoa_r+0x2d4>)
 800491e:	9303      	str	r3, [sp, #12]
 8004920:	3303      	adds	r3, #3
 8004922:	e7f5      	b.n	8004910 <_dtoa_r+0x98>
 8004924:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004928:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800492c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004930:	2200      	movs	r2, #0
 8004932:	2300      	movs	r3, #0
 8004934:	f7fc f838 	bl	80009a8 <__aeabi_dcmpeq>
 8004938:	4680      	mov	r8, r0
 800493a:	b158      	cbz	r0, 8004954 <_dtoa_r+0xdc>
 800493c:	2301      	movs	r3, #1
 800493e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004940:	6013      	str	r3, [r2, #0]
 8004942:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 8558 	beq.w	80053fa <_dtoa_r+0xb82>
 800494a:	4882      	ldr	r0, [pc, #520]	; (8004b54 <_dtoa_r+0x2dc>)
 800494c:	6018      	str	r0, [r3, #0]
 800494e:	1e43      	subs	r3, r0, #1
 8004950:	9303      	str	r3, [sp, #12]
 8004952:	e7df      	b.n	8004914 <_dtoa_r+0x9c>
 8004954:	ab16      	add	r3, sp, #88	; 0x58
 8004956:	9301      	str	r3, [sp, #4]
 8004958:	ab17      	add	r3, sp, #92	; 0x5c
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	4628      	mov	r0, r5
 800495e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004962:	f001 fd01 	bl	8006368 <__d2b>
 8004966:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800496a:	4683      	mov	fp, r0
 800496c:	2c00      	cmp	r4, #0
 800496e:	d07f      	beq.n	8004a70 <_dtoa_r+0x1f8>
 8004970:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004974:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004976:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800497a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800497e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004982:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004986:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800498a:	2200      	movs	r2, #0
 800498c:	4b72      	ldr	r3, [pc, #456]	; (8004b58 <_dtoa_r+0x2e0>)
 800498e:	f7fb fbeb 	bl	8000168 <__aeabi_dsub>
 8004992:	a365      	add	r3, pc, #404	; (adr r3, 8004b28 <_dtoa_r+0x2b0>)
 8004994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004998:	f7fb fd9e 	bl	80004d8 <__aeabi_dmul>
 800499c:	a364      	add	r3, pc, #400	; (adr r3, 8004b30 <_dtoa_r+0x2b8>)
 800499e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a2:	f7fb fbe3 	bl	800016c <__adddf3>
 80049a6:	4606      	mov	r6, r0
 80049a8:	4620      	mov	r0, r4
 80049aa:	460f      	mov	r7, r1
 80049ac:	f7fb fd2a 	bl	8000404 <__aeabi_i2d>
 80049b0:	a361      	add	r3, pc, #388	; (adr r3, 8004b38 <_dtoa_r+0x2c0>)
 80049b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b6:	f7fb fd8f 	bl	80004d8 <__aeabi_dmul>
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	4630      	mov	r0, r6
 80049c0:	4639      	mov	r1, r7
 80049c2:	f7fb fbd3 	bl	800016c <__adddf3>
 80049c6:	4606      	mov	r6, r0
 80049c8:	460f      	mov	r7, r1
 80049ca:	f7fc f835 	bl	8000a38 <__aeabi_d2iz>
 80049ce:	2200      	movs	r2, #0
 80049d0:	4682      	mov	sl, r0
 80049d2:	2300      	movs	r3, #0
 80049d4:	4630      	mov	r0, r6
 80049d6:	4639      	mov	r1, r7
 80049d8:	f7fb fff0 	bl	80009bc <__aeabi_dcmplt>
 80049dc:	b148      	cbz	r0, 80049f2 <_dtoa_r+0x17a>
 80049de:	4650      	mov	r0, sl
 80049e0:	f7fb fd10 	bl	8000404 <__aeabi_i2d>
 80049e4:	4632      	mov	r2, r6
 80049e6:	463b      	mov	r3, r7
 80049e8:	f7fb ffde 	bl	80009a8 <__aeabi_dcmpeq>
 80049ec:	b908      	cbnz	r0, 80049f2 <_dtoa_r+0x17a>
 80049ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049f2:	f1ba 0f16 	cmp.w	sl, #22
 80049f6:	d858      	bhi.n	8004aaa <_dtoa_r+0x232>
 80049f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80049fc:	4b57      	ldr	r3, [pc, #348]	; (8004b5c <_dtoa_r+0x2e4>)
 80049fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a06:	f7fb ffd9 	bl	80009bc <__aeabi_dcmplt>
 8004a0a:	2800      	cmp	r0, #0
 8004a0c:	d04f      	beq.n	8004aae <_dtoa_r+0x236>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a14:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a16:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004a18:	1b1c      	subs	r4, r3, r4
 8004a1a:	1e63      	subs	r3, r4, #1
 8004a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a1e:	bf49      	itett	mi
 8004a20:	f1c4 0301 	rsbmi	r3, r4, #1
 8004a24:	2300      	movpl	r3, #0
 8004a26:	9306      	strmi	r3, [sp, #24]
 8004a28:	2300      	movmi	r3, #0
 8004a2a:	bf54      	ite	pl
 8004a2c:	9306      	strpl	r3, [sp, #24]
 8004a2e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004a30:	f1ba 0f00 	cmp.w	sl, #0
 8004a34:	db3d      	blt.n	8004ab2 <_dtoa_r+0x23a>
 8004a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a38:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004a3c:	4453      	add	r3, sl
 8004a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a40:	2300      	movs	r3, #0
 8004a42:	930a      	str	r3, [sp, #40]	; 0x28
 8004a44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a46:	2b09      	cmp	r3, #9
 8004a48:	f200 808c 	bhi.w	8004b64 <_dtoa_r+0x2ec>
 8004a4c:	2b05      	cmp	r3, #5
 8004a4e:	bfc4      	itt	gt
 8004a50:	3b04      	subgt	r3, #4
 8004a52:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004a54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a56:	bfc8      	it	gt
 8004a58:	2400      	movgt	r4, #0
 8004a5a:	f1a3 0302 	sub.w	r3, r3, #2
 8004a5e:	bfd8      	it	le
 8004a60:	2401      	movle	r4, #1
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	f200 808a 	bhi.w	8004b7c <_dtoa_r+0x304>
 8004a68:	e8df f003 	tbb	[pc, r3]
 8004a6c:	5b4d4f2d 	.word	0x5b4d4f2d
 8004a70:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004a74:	441c      	add	r4, r3
 8004a76:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004a7a:	2b20      	cmp	r3, #32
 8004a7c:	bfc3      	ittte	gt
 8004a7e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004a82:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004a86:	fa09 f303 	lslgt.w	r3, r9, r3
 8004a8a:	f1c3 0320 	rsble	r3, r3, #32
 8004a8e:	bfc6      	itte	gt
 8004a90:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004a94:	4318      	orrgt	r0, r3
 8004a96:	fa06 f003 	lslle.w	r0, r6, r3
 8004a9a:	f7fb fca3 	bl	80003e4 <__aeabi_ui2d>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004aa4:	3c01      	subs	r4, #1
 8004aa6:	9313      	str	r3, [sp, #76]	; 0x4c
 8004aa8:	e76f      	b.n	800498a <_dtoa_r+0x112>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e7b2      	b.n	8004a14 <_dtoa_r+0x19c>
 8004aae:	900f      	str	r0, [sp, #60]	; 0x3c
 8004ab0:	e7b1      	b.n	8004a16 <_dtoa_r+0x19e>
 8004ab2:	9b06      	ldr	r3, [sp, #24]
 8004ab4:	eba3 030a 	sub.w	r3, r3, sl
 8004ab8:	9306      	str	r3, [sp, #24]
 8004aba:	f1ca 0300 	rsb	r3, sl, #0
 8004abe:	930a      	str	r3, [sp, #40]	; 0x28
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	930e      	str	r3, [sp, #56]	; 0x38
 8004ac4:	e7be      	b.n	8004a44 <_dtoa_r+0x1cc>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004aca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	dc58      	bgt.n	8004b82 <_dtoa_r+0x30a>
 8004ad0:	f04f 0901 	mov.w	r9, #1
 8004ad4:	464b      	mov	r3, r9
 8004ad6:	f8cd 9020 	str.w	r9, [sp, #32]
 8004ada:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004ade:	2200      	movs	r2, #0
 8004ae0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004ae2:	6042      	str	r2, [r0, #4]
 8004ae4:	2204      	movs	r2, #4
 8004ae6:	f102 0614 	add.w	r6, r2, #20
 8004aea:	429e      	cmp	r6, r3
 8004aec:	6841      	ldr	r1, [r0, #4]
 8004aee:	d94e      	bls.n	8004b8e <_dtoa_r+0x316>
 8004af0:	4628      	mov	r0, r5
 8004af2:	f001 f84f 	bl	8005b94 <_Balloc>
 8004af6:	9003      	str	r0, [sp, #12]
 8004af8:	2800      	cmp	r0, #0
 8004afa:	d14c      	bne.n	8004b96 <_dtoa_r+0x31e>
 8004afc:	4602      	mov	r2, r0
 8004afe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004b02:	4b17      	ldr	r3, [pc, #92]	; (8004b60 <_dtoa_r+0x2e8>)
 8004b04:	e6cc      	b.n	80048a0 <_dtoa_r+0x28>
 8004b06:	2301      	movs	r3, #1
 8004b08:	e7de      	b.n	8004ac8 <_dtoa_r+0x250>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004b10:	eb0a 0903 	add.w	r9, sl, r3
 8004b14:	f109 0301 	add.w	r3, r9, #1
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	9308      	str	r3, [sp, #32]
 8004b1c:	bfb8      	it	lt
 8004b1e:	2301      	movlt	r3, #1
 8004b20:	e7dd      	b.n	8004ade <_dtoa_r+0x266>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e7f2      	b.n	8004b0c <_dtoa_r+0x294>
 8004b26:	bf00      	nop
 8004b28:	636f4361 	.word	0x636f4361
 8004b2c:	3fd287a7 	.word	0x3fd287a7
 8004b30:	8b60c8b3 	.word	0x8b60c8b3
 8004b34:	3fc68a28 	.word	0x3fc68a28
 8004b38:	509f79fb 	.word	0x509f79fb
 8004b3c:	3fd34413 	.word	0x3fd34413
 8004b40:	08007776 	.word	0x08007776
 8004b44:	0800778d 	.word	0x0800778d
 8004b48:	7ff00000 	.word	0x7ff00000
 8004b4c:	08007772 	.word	0x08007772
 8004b50:	08007769 	.word	0x08007769
 8004b54:	080075ed 	.word	0x080075ed
 8004b58:	3ff80000 	.word	0x3ff80000
 8004b5c:	080078f8 	.word	0x080078f8
 8004b60:	080077e8 	.word	0x080077e8
 8004b64:	2401      	movs	r4, #1
 8004b66:	2300      	movs	r3, #0
 8004b68:	940b      	str	r4, [sp, #44]	; 0x2c
 8004b6a:	9322      	str	r3, [sp, #136]	; 0x88
 8004b6c:	f04f 39ff 	mov.w	r9, #4294967295
 8004b70:	2200      	movs	r2, #0
 8004b72:	2312      	movs	r3, #18
 8004b74:	f8cd 9020 	str.w	r9, [sp, #32]
 8004b78:	9223      	str	r2, [sp, #140]	; 0x8c
 8004b7a:	e7b0      	b.n	8004ade <_dtoa_r+0x266>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b80:	e7f4      	b.n	8004b6c <_dtoa_r+0x2f4>
 8004b82:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004b86:	464b      	mov	r3, r9
 8004b88:	f8cd 9020 	str.w	r9, [sp, #32]
 8004b8c:	e7a7      	b.n	8004ade <_dtoa_r+0x266>
 8004b8e:	3101      	adds	r1, #1
 8004b90:	6041      	str	r1, [r0, #4]
 8004b92:	0052      	lsls	r2, r2, #1
 8004b94:	e7a7      	b.n	8004ae6 <_dtoa_r+0x26e>
 8004b96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004b98:	9a03      	ldr	r2, [sp, #12]
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	9b08      	ldr	r3, [sp, #32]
 8004b9e:	2b0e      	cmp	r3, #14
 8004ba0:	f200 80a8 	bhi.w	8004cf4 <_dtoa_r+0x47c>
 8004ba4:	2c00      	cmp	r4, #0
 8004ba6:	f000 80a5 	beq.w	8004cf4 <_dtoa_r+0x47c>
 8004baa:	f1ba 0f00 	cmp.w	sl, #0
 8004bae:	dd34      	ble.n	8004c1a <_dtoa_r+0x3a2>
 8004bb0:	4a9a      	ldr	r2, [pc, #616]	; (8004e1c <_dtoa_r+0x5a4>)
 8004bb2:	f00a 030f 	and.w	r3, sl, #15
 8004bb6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004bba:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004bbe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004bc2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004bc6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004bca:	d016      	beq.n	8004bfa <_dtoa_r+0x382>
 8004bcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004bd0:	4b93      	ldr	r3, [pc, #588]	; (8004e20 <_dtoa_r+0x5a8>)
 8004bd2:	2703      	movs	r7, #3
 8004bd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004bd8:	f7fb fda8 	bl	800072c <__aeabi_ddiv>
 8004bdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004be0:	f004 040f 	and.w	r4, r4, #15
 8004be4:	4e8e      	ldr	r6, [pc, #568]	; (8004e20 <_dtoa_r+0x5a8>)
 8004be6:	b954      	cbnz	r4, 8004bfe <_dtoa_r+0x386>
 8004be8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004bec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bf0:	f7fb fd9c 	bl	800072c <__aeabi_ddiv>
 8004bf4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bf8:	e029      	b.n	8004c4e <_dtoa_r+0x3d6>
 8004bfa:	2702      	movs	r7, #2
 8004bfc:	e7f2      	b.n	8004be4 <_dtoa_r+0x36c>
 8004bfe:	07e1      	lsls	r1, r4, #31
 8004c00:	d508      	bpl.n	8004c14 <_dtoa_r+0x39c>
 8004c02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c06:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004c0a:	f7fb fc65 	bl	80004d8 <__aeabi_dmul>
 8004c0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c12:	3701      	adds	r7, #1
 8004c14:	1064      	asrs	r4, r4, #1
 8004c16:	3608      	adds	r6, #8
 8004c18:	e7e5      	b.n	8004be6 <_dtoa_r+0x36e>
 8004c1a:	f000 80a5 	beq.w	8004d68 <_dtoa_r+0x4f0>
 8004c1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c22:	f1ca 0400 	rsb	r4, sl, #0
 8004c26:	4b7d      	ldr	r3, [pc, #500]	; (8004e1c <_dtoa_r+0x5a4>)
 8004c28:	f004 020f 	and.w	r2, r4, #15
 8004c2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c34:	f7fb fc50 	bl	80004d8 <__aeabi_dmul>
 8004c38:	2702      	movs	r7, #2
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c40:	4e77      	ldr	r6, [pc, #476]	; (8004e20 <_dtoa_r+0x5a8>)
 8004c42:	1124      	asrs	r4, r4, #4
 8004c44:	2c00      	cmp	r4, #0
 8004c46:	f040 8084 	bne.w	8004d52 <_dtoa_r+0x4da>
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1d2      	bne.n	8004bf4 <_dtoa_r+0x37c>
 8004c4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 808b 	beq.w	8004d6c <_dtoa_r+0x4f4>
 8004c56:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004c5a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004c5e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c62:	2200      	movs	r2, #0
 8004c64:	4b6f      	ldr	r3, [pc, #444]	; (8004e24 <_dtoa_r+0x5ac>)
 8004c66:	f7fb fea9 	bl	80009bc <__aeabi_dcmplt>
 8004c6a:	2800      	cmp	r0, #0
 8004c6c:	d07e      	beq.n	8004d6c <_dtoa_r+0x4f4>
 8004c6e:	9b08      	ldr	r3, [sp, #32]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d07b      	beq.n	8004d6c <_dtoa_r+0x4f4>
 8004c74:	f1b9 0f00 	cmp.w	r9, #0
 8004c78:	dd38      	ble.n	8004cec <_dtoa_r+0x474>
 8004c7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c7e:	2200      	movs	r2, #0
 8004c80:	4b69      	ldr	r3, [pc, #420]	; (8004e28 <_dtoa_r+0x5b0>)
 8004c82:	f7fb fc29 	bl	80004d8 <__aeabi_dmul>
 8004c86:	464c      	mov	r4, r9
 8004c88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c8c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004c90:	3701      	adds	r7, #1
 8004c92:	4638      	mov	r0, r7
 8004c94:	f7fb fbb6 	bl	8000404 <__aeabi_i2d>
 8004c98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c9c:	f7fb fc1c 	bl	80004d8 <__aeabi_dmul>
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	4b62      	ldr	r3, [pc, #392]	; (8004e2c <_dtoa_r+0x5b4>)
 8004ca4:	f7fb fa62 	bl	800016c <__adddf3>
 8004ca8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004cac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004cb0:	9611      	str	r6, [sp, #68]	; 0x44
 8004cb2:	2c00      	cmp	r4, #0
 8004cb4:	d15d      	bne.n	8004d72 <_dtoa_r+0x4fa>
 8004cb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	4b5c      	ldr	r3, [pc, #368]	; (8004e30 <_dtoa_r+0x5b8>)
 8004cbe:	f7fb fa53 	bl	8000168 <__aeabi_dsub>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004cca:	4633      	mov	r3, r6
 8004ccc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004cce:	f7fb fe93 	bl	80009f8 <__aeabi_dcmpgt>
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	f040 829c 	bne.w	8005210 <_dtoa_r+0x998>
 8004cd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004cde:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004ce2:	f7fb fe6b 	bl	80009bc <__aeabi_dcmplt>
 8004ce6:	2800      	cmp	r0, #0
 8004ce8:	f040 8290 	bne.w	800520c <_dtoa_r+0x994>
 8004cec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004cf0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004cf4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f2c0 8152 	blt.w	8004fa0 <_dtoa_r+0x728>
 8004cfc:	f1ba 0f0e 	cmp.w	sl, #14
 8004d00:	f300 814e 	bgt.w	8004fa0 <_dtoa_r+0x728>
 8004d04:	4b45      	ldr	r3, [pc, #276]	; (8004e1c <_dtoa_r+0x5a4>)
 8004d06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004d0a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d0e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004d12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f280 80db 	bge.w	8004ed0 <_dtoa_r+0x658>
 8004d1a:	9b08      	ldr	r3, [sp, #32]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f300 80d7 	bgt.w	8004ed0 <_dtoa_r+0x658>
 8004d22:	f040 8272 	bne.w	800520a <_dtoa_r+0x992>
 8004d26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	4b40      	ldr	r3, [pc, #256]	; (8004e30 <_dtoa_r+0x5b8>)
 8004d2e:	f7fb fbd3 	bl	80004d8 <__aeabi_dmul>
 8004d32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d36:	f7fb fe55 	bl	80009e4 <__aeabi_dcmpge>
 8004d3a:	9c08      	ldr	r4, [sp, #32]
 8004d3c:	4626      	mov	r6, r4
 8004d3e:	2800      	cmp	r0, #0
 8004d40:	f040 8248 	bne.w	80051d4 <_dtoa_r+0x95c>
 8004d44:	2331      	movs	r3, #49	; 0x31
 8004d46:	9f03      	ldr	r7, [sp, #12]
 8004d48:	f10a 0a01 	add.w	sl, sl, #1
 8004d4c:	f807 3b01 	strb.w	r3, [r7], #1
 8004d50:	e244      	b.n	80051dc <_dtoa_r+0x964>
 8004d52:	07e2      	lsls	r2, r4, #31
 8004d54:	d505      	bpl.n	8004d62 <_dtoa_r+0x4ea>
 8004d56:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004d5a:	f7fb fbbd 	bl	80004d8 <__aeabi_dmul>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	3701      	adds	r7, #1
 8004d62:	1064      	asrs	r4, r4, #1
 8004d64:	3608      	adds	r6, #8
 8004d66:	e76d      	b.n	8004c44 <_dtoa_r+0x3cc>
 8004d68:	2702      	movs	r7, #2
 8004d6a:	e770      	b.n	8004c4e <_dtoa_r+0x3d6>
 8004d6c:	46d0      	mov	r8, sl
 8004d6e:	9c08      	ldr	r4, [sp, #32]
 8004d70:	e78f      	b.n	8004c92 <_dtoa_r+0x41a>
 8004d72:	9903      	ldr	r1, [sp, #12]
 8004d74:	4b29      	ldr	r3, [pc, #164]	; (8004e1c <_dtoa_r+0x5a4>)
 8004d76:	4421      	add	r1, r4
 8004d78:	9112      	str	r1, [sp, #72]	; 0x48
 8004d7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d7c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004d80:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004d84:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004d88:	2900      	cmp	r1, #0
 8004d8a:	d055      	beq.n	8004e38 <_dtoa_r+0x5c0>
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	4929      	ldr	r1, [pc, #164]	; (8004e34 <_dtoa_r+0x5bc>)
 8004d90:	f7fb fccc 	bl	800072c <__aeabi_ddiv>
 8004d94:	463b      	mov	r3, r7
 8004d96:	4632      	mov	r2, r6
 8004d98:	f7fb f9e6 	bl	8000168 <__aeabi_dsub>
 8004d9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004da0:	9f03      	ldr	r7, [sp, #12]
 8004da2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004da6:	f7fb fe47 	bl	8000a38 <__aeabi_d2iz>
 8004daa:	4604      	mov	r4, r0
 8004dac:	f7fb fb2a 	bl	8000404 <__aeabi_i2d>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004db8:	f7fb f9d6 	bl	8000168 <__aeabi_dsub>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	3430      	adds	r4, #48	; 0x30
 8004dc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004dc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004dca:	f807 4b01 	strb.w	r4, [r7], #1
 8004dce:	f7fb fdf5 	bl	80009bc <__aeabi_dcmplt>
 8004dd2:	2800      	cmp	r0, #0
 8004dd4:	d174      	bne.n	8004ec0 <_dtoa_r+0x648>
 8004dd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dda:	2000      	movs	r0, #0
 8004ddc:	4911      	ldr	r1, [pc, #68]	; (8004e24 <_dtoa_r+0x5ac>)
 8004dde:	f7fb f9c3 	bl	8000168 <__aeabi_dsub>
 8004de2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004de6:	f7fb fde9 	bl	80009bc <__aeabi_dcmplt>
 8004dea:	2800      	cmp	r0, #0
 8004dec:	f040 80b7 	bne.w	8004f5e <_dtoa_r+0x6e6>
 8004df0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004df2:	429f      	cmp	r7, r3
 8004df4:	f43f af7a 	beq.w	8004cec <_dtoa_r+0x474>
 8004df8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	4b0a      	ldr	r3, [pc, #40]	; (8004e28 <_dtoa_r+0x5b0>)
 8004e00:	f7fb fb6a 	bl	80004d8 <__aeabi_dmul>
 8004e04:	2200      	movs	r2, #0
 8004e06:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004e0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e0e:	4b06      	ldr	r3, [pc, #24]	; (8004e28 <_dtoa_r+0x5b0>)
 8004e10:	f7fb fb62 	bl	80004d8 <__aeabi_dmul>
 8004e14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e18:	e7c3      	b.n	8004da2 <_dtoa_r+0x52a>
 8004e1a:	bf00      	nop
 8004e1c:	080078f8 	.word	0x080078f8
 8004e20:	080078d0 	.word	0x080078d0
 8004e24:	3ff00000 	.word	0x3ff00000
 8004e28:	40240000 	.word	0x40240000
 8004e2c:	401c0000 	.word	0x401c0000
 8004e30:	40140000 	.word	0x40140000
 8004e34:	3fe00000 	.word	0x3fe00000
 8004e38:	4630      	mov	r0, r6
 8004e3a:	4639      	mov	r1, r7
 8004e3c:	f7fb fb4c 	bl	80004d8 <__aeabi_dmul>
 8004e40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e42:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004e46:	9c03      	ldr	r4, [sp, #12]
 8004e48:	9314      	str	r3, [sp, #80]	; 0x50
 8004e4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e4e:	f7fb fdf3 	bl	8000a38 <__aeabi_d2iz>
 8004e52:	9015      	str	r0, [sp, #84]	; 0x54
 8004e54:	f7fb fad6 	bl	8000404 <__aeabi_i2d>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e60:	f7fb f982 	bl	8000168 <__aeabi_dsub>
 8004e64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004e66:	4606      	mov	r6, r0
 8004e68:	3330      	adds	r3, #48	; 0x30
 8004e6a:	f804 3b01 	strb.w	r3, [r4], #1
 8004e6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e70:	460f      	mov	r7, r1
 8004e72:	429c      	cmp	r4, r3
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	d124      	bne.n	8004ec4 <_dtoa_r+0x64c>
 8004e7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e7e:	4bb0      	ldr	r3, [pc, #704]	; (8005140 <_dtoa_r+0x8c8>)
 8004e80:	f7fb f974 	bl	800016c <__adddf3>
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	4630      	mov	r0, r6
 8004e8a:	4639      	mov	r1, r7
 8004e8c:	f7fb fdb4 	bl	80009f8 <__aeabi_dcmpgt>
 8004e90:	2800      	cmp	r0, #0
 8004e92:	d163      	bne.n	8004f5c <_dtoa_r+0x6e4>
 8004e94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004e98:	2000      	movs	r0, #0
 8004e9a:	49a9      	ldr	r1, [pc, #676]	; (8005140 <_dtoa_r+0x8c8>)
 8004e9c:	f7fb f964 	bl	8000168 <__aeabi_dsub>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4630      	mov	r0, r6
 8004ea6:	4639      	mov	r1, r7
 8004ea8:	f7fb fd88 	bl	80009bc <__aeabi_dcmplt>
 8004eac:	2800      	cmp	r0, #0
 8004eae:	f43f af1d 	beq.w	8004cec <_dtoa_r+0x474>
 8004eb2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004eb4:	1e7b      	subs	r3, r7, #1
 8004eb6:	9314      	str	r3, [sp, #80]	; 0x50
 8004eb8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004ebc:	2b30      	cmp	r3, #48	; 0x30
 8004ebe:	d0f8      	beq.n	8004eb2 <_dtoa_r+0x63a>
 8004ec0:	46c2      	mov	sl, r8
 8004ec2:	e03b      	b.n	8004f3c <_dtoa_r+0x6c4>
 8004ec4:	4b9f      	ldr	r3, [pc, #636]	; (8005144 <_dtoa_r+0x8cc>)
 8004ec6:	f7fb fb07 	bl	80004d8 <__aeabi_dmul>
 8004eca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ece:	e7bc      	b.n	8004e4a <_dtoa_r+0x5d2>
 8004ed0:	9f03      	ldr	r7, [sp, #12]
 8004ed2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004ed6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004eda:	4640      	mov	r0, r8
 8004edc:	4649      	mov	r1, r9
 8004ede:	f7fb fc25 	bl	800072c <__aeabi_ddiv>
 8004ee2:	f7fb fda9 	bl	8000a38 <__aeabi_d2iz>
 8004ee6:	4604      	mov	r4, r0
 8004ee8:	f7fb fa8c 	bl	8000404 <__aeabi_i2d>
 8004eec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ef0:	f7fb faf2 	bl	80004d8 <__aeabi_dmul>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4640      	mov	r0, r8
 8004efa:	4649      	mov	r1, r9
 8004efc:	f7fb f934 	bl	8000168 <__aeabi_dsub>
 8004f00:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004f04:	f807 6b01 	strb.w	r6, [r7], #1
 8004f08:	9e03      	ldr	r6, [sp, #12]
 8004f0a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004f0e:	1bbe      	subs	r6, r7, r6
 8004f10:	45b4      	cmp	ip, r6
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	d136      	bne.n	8004f86 <_dtoa_r+0x70e>
 8004f18:	f7fb f928 	bl	800016c <__adddf3>
 8004f1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f20:	4680      	mov	r8, r0
 8004f22:	4689      	mov	r9, r1
 8004f24:	f7fb fd68 	bl	80009f8 <__aeabi_dcmpgt>
 8004f28:	bb58      	cbnz	r0, 8004f82 <_dtoa_r+0x70a>
 8004f2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f2e:	4640      	mov	r0, r8
 8004f30:	4649      	mov	r1, r9
 8004f32:	f7fb fd39 	bl	80009a8 <__aeabi_dcmpeq>
 8004f36:	b108      	cbz	r0, 8004f3c <_dtoa_r+0x6c4>
 8004f38:	07e1      	lsls	r1, r4, #31
 8004f3a:	d422      	bmi.n	8004f82 <_dtoa_r+0x70a>
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	4659      	mov	r1, fp
 8004f40:	f000 fe68 	bl	8005c14 <_Bfree>
 8004f44:	2300      	movs	r3, #0
 8004f46:	703b      	strb	r3, [r7, #0]
 8004f48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004f4a:	f10a 0001 	add.w	r0, sl, #1
 8004f4e:	6018      	str	r0, [r3, #0]
 8004f50:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f43f acde 	beq.w	8004914 <_dtoa_r+0x9c>
 8004f58:	601f      	str	r7, [r3, #0]
 8004f5a:	e4db      	b.n	8004914 <_dtoa_r+0x9c>
 8004f5c:	4627      	mov	r7, r4
 8004f5e:	463b      	mov	r3, r7
 8004f60:	461f      	mov	r7, r3
 8004f62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f66:	2a39      	cmp	r2, #57	; 0x39
 8004f68:	d107      	bne.n	8004f7a <_dtoa_r+0x702>
 8004f6a:	9a03      	ldr	r2, [sp, #12]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d1f7      	bne.n	8004f60 <_dtoa_r+0x6e8>
 8004f70:	2230      	movs	r2, #48	; 0x30
 8004f72:	9903      	ldr	r1, [sp, #12]
 8004f74:	f108 0801 	add.w	r8, r8, #1
 8004f78:	700a      	strb	r2, [r1, #0]
 8004f7a:	781a      	ldrb	r2, [r3, #0]
 8004f7c:	3201      	adds	r2, #1
 8004f7e:	701a      	strb	r2, [r3, #0]
 8004f80:	e79e      	b.n	8004ec0 <_dtoa_r+0x648>
 8004f82:	46d0      	mov	r8, sl
 8004f84:	e7eb      	b.n	8004f5e <_dtoa_r+0x6e6>
 8004f86:	2200      	movs	r2, #0
 8004f88:	4b6e      	ldr	r3, [pc, #440]	; (8005144 <_dtoa_r+0x8cc>)
 8004f8a:	f7fb faa5 	bl	80004d8 <__aeabi_dmul>
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2300      	movs	r3, #0
 8004f92:	4680      	mov	r8, r0
 8004f94:	4689      	mov	r9, r1
 8004f96:	f7fb fd07 	bl	80009a8 <__aeabi_dcmpeq>
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	d09b      	beq.n	8004ed6 <_dtoa_r+0x65e>
 8004f9e:	e7cd      	b.n	8004f3c <_dtoa_r+0x6c4>
 8004fa0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004fa2:	2a00      	cmp	r2, #0
 8004fa4:	f000 80d0 	beq.w	8005148 <_dtoa_r+0x8d0>
 8004fa8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004faa:	2a01      	cmp	r2, #1
 8004fac:	f300 80ae 	bgt.w	800510c <_dtoa_r+0x894>
 8004fb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004fb2:	2a00      	cmp	r2, #0
 8004fb4:	f000 80a6 	beq.w	8005104 <_dtoa_r+0x88c>
 8004fb8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004fbc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004fbe:	9f06      	ldr	r7, [sp, #24]
 8004fc0:	9a06      	ldr	r2, [sp, #24]
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	441a      	add	r2, r3
 8004fc6:	9206      	str	r2, [sp, #24]
 8004fc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fca:	4628      	mov	r0, r5
 8004fcc:	441a      	add	r2, r3
 8004fce:	9209      	str	r2, [sp, #36]	; 0x24
 8004fd0:	f000 ff20 	bl	8005e14 <__i2b>
 8004fd4:	4606      	mov	r6, r0
 8004fd6:	2f00      	cmp	r7, #0
 8004fd8:	dd0c      	ble.n	8004ff4 <_dtoa_r+0x77c>
 8004fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	dd09      	ble.n	8004ff4 <_dtoa_r+0x77c>
 8004fe0:	42bb      	cmp	r3, r7
 8004fe2:	bfa8      	it	ge
 8004fe4:	463b      	movge	r3, r7
 8004fe6:	9a06      	ldr	r2, [sp, #24]
 8004fe8:	1aff      	subs	r7, r7, r3
 8004fea:	1ad2      	subs	r2, r2, r3
 8004fec:	9206      	str	r2, [sp, #24]
 8004fee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ff6:	b1f3      	cbz	r3, 8005036 <_dtoa_r+0x7be>
 8004ff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 80a8 	beq.w	8005150 <_dtoa_r+0x8d8>
 8005000:	2c00      	cmp	r4, #0
 8005002:	dd10      	ble.n	8005026 <_dtoa_r+0x7ae>
 8005004:	4631      	mov	r1, r6
 8005006:	4622      	mov	r2, r4
 8005008:	4628      	mov	r0, r5
 800500a:	f000 ffc1 	bl	8005f90 <__pow5mult>
 800500e:	465a      	mov	r2, fp
 8005010:	4601      	mov	r1, r0
 8005012:	4606      	mov	r6, r0
 8005014:	4628      	mov	r0, r5
 8005016:	f000 ff13 	bl	8005e40 <__multiply>
 800501a:	4680      	mov	r8, r0
 800501c:	4659      	mov	r1, fp
 800501e:	4628      	mov	r0, r5
 8005020:	f000 fdf8 	bl	8005c14 <_Bfree>
 8005024:	46c3      	mov	fp, r8
 8005026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005028:	1b1a      	subs	r2, r3, r4
 800502a:	d004      	beq.n	8005036 <_dtoa_r+0x7be>
 800502c:	4659      	mov	r1, fp
 800502e:	4628      	mov	r0, r5
 8005030:	f000 ffae 	bl	8005f90 <__pow5mult>
 8005034:	4683      	mov	fp, r0
 8005036:	2101      	movs	r1, #1
 8005038:	4628      	mov	r0, r5
 800503a:	f000 feeb 	bl	8005e14 <__i2b>
 800503e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005040:	4604      	mov	r4, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	f340 8086 	ble.w	8005154 <_dtoa_r+0x8dc>
 8005048:	461a      	mov	r2, r3
 800504a:	4601      	mov	r1, r0
 800504c:	4628      	mov	r0, r5
 800504e:	f000 ff9f 	bl	8005f90 <__pow5mult>
 8005052:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005054:	4604      	mov	r4, r0
 8005056:	2b01      	cmp	r3, #1
 8005058:	dd7f      	ble.n	800515a <_dtoa_r+0x8e2>
 800505a:	f04f 0800 	mov.w	r8, #0
 800505e:	6923      	ldr	r3, [r4, #16]
 8005060:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005064:	6918      	ldr	r0, [r3, #16]
 8005066:	f000 fe87 	bl	8005d78 <__hi0bits>
 800506a:	f1c0 0020 	rsb	r0, r0, #32
 800506e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005070:	4418      	add	r0, r3
 8005072:	f010 001f 	ands.w	r0, r0, #31
 8005076:	f000 8092 	beq.w	800519e <_dtoa_r+0x926>
 800507a:	f1c0 0320 	rsb	r3, r0, #32
 800507e:	2b04      	cmp	r3, #4
 8005080:	f340 808a 	ble.w	8005198 <_dtoa_r+0x920>
 8005084:	f1c0 001c 	rsb	r0, r0, #28
 8005088:	9b06      	ldr	r3, [sp, #24]
 800508a:	4407      	add	r7, r0
 800508c:	4403      	add	r3, r0
 800508e:	9306      	str	r3, [sp, #24]
 8005090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005092:	4403      	add	r3, r0
 8005094:	9309      	str	r3, [sp, #36]	; 0x24
 8005096:	9b06      	ldr	r3, [sp, #24]
 8005098:	2b00      	cmp	r3, #0
 800509a:	dd05      	ble.n	80050a8 <_dtoa_r+0x830>
 800509c:	4659      	mov	r1, fp
 800509e:	461a      	mov	r2, r3
 80050a0:	4628      	mov	r0, r5
 80050a2:	f000 ffcf 	bl	8006044 <__lshift>
 80050a6:	4683      	mov	fp, r0
 80050a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	dd05      	ble.n	80050ba <_dtoa_r+0x842>
 80050ae:	4621      	mov	r1, r4
 80050b0:	461a      	mov	r2, r3
 80050b2:	4628      	mov	r0, r5
 80050b4:	f000 ffc6 	bl	8006044 <__lshift>
 80050b8:	4604      	mov	r4, r0
 80050ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d070      	beq.n	80051a2 <_dtoa_r+0x92a>
 80050c0:	4621      	mov	r1, r4
 80050c2:	4658      	mov	r0, fp
 80050c4:	f001 f82e 	bl	8006124 <__mcmp>
 80050c8:	2800      	cmp	r0, #0
 80050ca:	da6a      	bge.n	80051a2 <_dtoa_r+0x92a>
 80050cc:	2300      	movs	r3, #0
 80050ce:	4659      	mov	r1, fp
 80050d0:	220a      	movs	r2, #10
 80050d2:	4628      	mov	r0, r5
 80050d4:	f000 fdc0 	bl	8005c58 <__multadd>
 80050d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050da:	4683      	mov	fp, r0
 80050dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 8194 	beq.w	800540e <_dtoa_r+0xb96>
 80050e6:	4631      	mov	r1, r6
 80050e8:	2300      	movs	r3, #0
 80050ea:	220a      	movs	r2, #10
 80050ec:	4628      	mov	r0, r5
 80050ee:	f000 fdb3 	bl	8005c58 <__multadd>
 80050f2:	f1b9 0f00 	cmp.w	r9, #0
 80050f6:	4606      	mov	r6, r0
 80050f8:	f300 8093 	bgt.w	8005222 <_dtoa_r+0x9aa>
 80050fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050fe:	2b02      	cmp	r3, #2
 8005100:	dc57      	bgt.n	80051b2 <_dtoa_r+0x93a>
 8005102:	e08e      	b.n	8005222 <_dtoa_r+0x9aa>
 8005104:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005106:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800510a:	e757      	b.n	8004fbc <_dtoa_r+0x744>
 800510c:	9b08      	ldr	r3, [sp, #32]
 800510e:	1e5c      	subs	r4, r3, #1
 8005110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005112:	42a3      	cmp	r3, r4
 8005114:	bfb7      	itett	lt
 8005116:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005118:	1b1c      	subge	r4, r3, r4
 800511a:	1ae2      	sublt	r2, r4, r3
 800511c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800511e:	bfbe      	ittt	lt
 8005120:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005122:	189b      	addlt	r3, r3, r2
 8005124:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005126:	9b08      	ldr	r3, [sp, #32]
 8005128:	bfb8      	it	lt
 800512a:	2400      	movlt	r4, #0
 800512c:	2b00      	cmp	r3, #0
 800512e:	bfbb      	ittet	lt
 8005130:	9b06      	ldrlt	r3, [sp, #24]
 8005132:	9a08      	ldrlt	r2, [sp, #32]
 8005134:	9f06      	ldrge	r7, [sp, #24]
 8005136:	1a9f      	sublt	r7, r3, r2
 8005138:	bfac      	ite	ge
 800513a:	9b08      	ldrge	r3, [sp, #32]
 800513c:	2300      	movlt	r3, #0
 800513e:	e73f      	b.n	8004fc0 <_dtoa_r+0x748>
 8005140:	3fe00000 	.word	0x3fe00000
 8005144:	40240000 	.word	0x40240000
 8005148:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800514a:	9f06      	ldr	r7, [sp, #24]
 800514c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800514e:	e742      	b.n	8004fd6 <_dtoa_r+0x75e>
 8005150:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005152:	e76b      	b.n	800502c <_dtoa_r+0x7b4>
 8005154:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005156:	2b01      	cmp	r3, #1
 8005158:	dc19      	bgt.n	800518e <_dtoa_r+0x916>
 800515a:	9b04      	ldr	r3, [sp, #16]
 800515c:	b9bb      	cbnz	r3, 800518e <_dtoa_r+0x916>
 800515e:	9b05      	ldr	r3, [sp, #20]
 8005160:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005164:	b99b      	cbnz	r3, 800518e <_dtoa_r+0x916>
 8005166:	9b05      	ldr	r3, [sp, #20]
 8005168:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800516c:	0d1b      	lsrs	r3, r3, #20
 800516e:	051b      	lsls	r3, r3, #20
 8005170:	b183      	cbz	r3, 8005194 <_dtoa_r+0x91c>
 8005172:	f04f 0801 	mov.w	r8, #1
 8005176:	9b06      	ldr	r3, [sp, #24]
 8005178:	3301      	adds	r3, #1
 800517a:	9306      	str	r3, [sp, #24]
 800517c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800517e:	3301      	adds	r3, #1
 8005180:	9309      	str	r3, [sp, #36]	; 0x24
 8005182:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005184:	2b00      	cmp	r3, #0
 8005186:	f47f af6a 	bne.w	800505e <_dtoa_r+0x7e6>
 800518a:	2001      	movs	r0, #1
 800518c:	e76f      	b.n	800506e <_dtoa_r+0x7f6>
 800518e:	f04f 0800 	mov.w	r8, #0
 8005192:	e7f6      	b.n	8005182 <_dtoa_r+0x90a>
 8005194:	4698      	mov	r8, r3
 8005196:	e7f4      	b.n	8005182 <_dtoa_r+0x90a>
 8005198:	f43f af7d 	beq.w	8005096 <_dtoa_r+0x81e>
 800519c:	4618      	mov	r0, r3
 800519e:	301c      	adds	r0, #28
 80051a0:	e772      	b.n	8005088 <_dtoa_r+0x810>
 80051a2:	9b08      	ldr	r3, [sp, #32]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	dc36      	bgt.n	8005216 <_dtoa_r+0x99e>
 80051a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	dd33      	ble.n	8005216 <_dtoa_r+0x99e>
 80051ae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051b2:	f1b9 0f00 	cmp.w	r9, #0
 80051b6:	d10d      	bne.n	80051d4 <_dtoa_r+0x95c>
 80051b8:	4621      	mov	r1, r4
 80051ba:	464b      	mov	r3, r9
 80051bc:	2205      	movs	r2, #5
 80051be:	4628      	mov	r0, r5
 80051c0:	f000 fd4a 	bl	8005c58 <__multadd>
 80051c4:	4601      	mov	r1, r0
 80051c6:	4604      	mov	r4, r0
 80051c8:	4658      	mov	r0, fp
 80051ca:	f000 ffab 	bl	8006124 <__mcmp>
 80051ce:	2800      	cmp	r0, #0
 80051d0:	f73f adb8 	bgt.w	8004d44 <_dtoa_r+0x4cc>
 80051d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051d6:	9f03      	ldr	r7, [sp, #12]
 80051d8:	ea6f 0a03 	mvn.w	sl, r3
 80051dc:	f04f 0800 	mov.w	r8, #0
 80051e0:	4621      	mov	r1, r4
 80051e2:	4628      	mov	r0, r5
 80051e4:	f000 fd16 	bl	8005c14 <_Bfree>
 80051e8:	2e00      	cmp	r6, #0
 80051ea:	f43f aea7 	beq.w	8004f3c <_dtoa_r+0x6c4>
 80051ee:	f1b8 0f00 	cmp.w	r8, #0
 80051f2:	d005      	beq.n	8005200 <_dtoa_r+0x988>
 80051f4:	45b0      	cmp	r8, r6
 80051f6:	d003      	beq.n	8005200 <_dtoa_r+0x988>
 80051f8:	4641      	mov	r1, r8
 80051fa:	4628      	mov	r0, r5
 80051fc:	f000 fd0a 	bl	8005c14 <_Bfree>
 8005200:	4631      	mov	r1, r6
 8005202:	4628      	mov	r0, r5
 8005204:	f000 fd06 	bl	8005c14 <_Bfree>
 8005208:	e698      	b.n	8004f3c <_dtoa_r+0x6c4>
 800520a:	2400      	movs	r4, #0
 800520c:	4626      	mov	r6, r4
 800520e:	e7e1      	b.n	80051d4 <_dtoa_r+0x95c>
 8005210:	46c2      	mov	sl, r8
 8005212:	4626      	mov	r6, r4
 8005214:	e596      	b.n	8004d44 <_dtoa_r+0x4cc>
 8005216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005218:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 80fd 	beq.w	800541c <_dtoa_r+0xba4>
 8005222:	2f00      	cmp	r7, #0
 8005224:	dd05      	ble.n	8005232 <_dtoa_r+0x9ba>
 8005226:	4631      	mov	r1, r6
 8005228:	463a      	mov	r2, r7
 800522a:	4628      	mov	r0, r5
 800522c:	f000 ff0a 	bl	8006044 <__lshift>
 8005230:	4606      	mov	r6, r0
 8005232:	f1b8 0f00 	cmp.w	r8, #0
 8005236:	d05c      	beq.n	80052f2 <_dtoa_r+0xa7a>
 8005238:	4628      	mov	r0, r5
 800523a:	6871      	ldr	r1, [r6, #4]
 800523c:	f000 fcaa 	bl	8005b94 <_Balloc>
 8005240:	4607      	mov	r7, r0
 8005242:	b928      	cbnz	r0, 8005250 <_dtoa_r+0x9d8>
 8005244:	4602      	mov	r2, r0
 8005246:	f240 21ea 	movw	r1, #746	; 0x2ea
 800524a:	4b7f      	ldr	r3, [pc, #508]	; (8005448 <_dtoa_r+0xbd0>)
 800524c:	f7ff bb28 	b.w	80048a0 <_dtoa_r+0x28>
 8005250:	6932      	ldr	r2, [r6, #16]
 8005252:	f106 010c 	add.w	r1, r6, #12
 8005256:	3202      	adds	r2, #2
 8005258:	0092      	lsls	r2, r2, #2
 800525a:	300c      	adds	r0, #12
 800525c:	f000 fc8c 	bl	8005b78 <memcpy>
 8005260:	2201      	movs	r2, #1
 8005262:	4639      	mov	r1, r7
 8005264:	4628      	mov	r0, r5
 8005266:	f000 feed 	bl	8006044 <__lshift>
 800526a:	46b0      	mov	r8, r6
 800526c:	4606      	mov	r6, r0
 800526e:	9b03      	ldr	r3, [sp, #12]
 8005270:	3301      	adds	r3, #1
 8005272:	9308      	str	r3, [sp, #32]
 8005274:	9b03      	ldr	r3, [sp, #12]
 8005276:	444b      	add	r3, r9
 8005278:	930a      	str	r3, [sp, #40]	; 0x28
 800527a:	9b04      	ldr	r3, [sp, #16]
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	9309      	str	r3, [sp, #36]	; 0x24
 8005282:	9b08      	ldr	r3, [sp, #32]
 8005284:	4621      	mov	r1, r4
 8005286:	3b01      	subs	r3, #1
 8005288:	4658      	mov	r0, fp
 800528a:	9304      	str	r3, [sp, #16]
 800528c:	f7ff fa68 	bl	8004760 <quorem>
 8005290:	4603      	mov	r3, r0
 8005292:	4641      	mov	r1, r8
 8005294:	3330      	adds	r3, #48	; 0x30
 8005296:	9006      	str	r0, [sp, #24]
 8005298:	4658      	mov	r0, fp
 800529a:	930b      	str	r3, [sp, #44]	; 0x2c
 800529c:	f000 ff42 	bl	8006124 <__mcmp>
 80052a0:	4632      	mov	r2, r6
 80052a2:	4681      	mov	r9, r0
 80052a4:	4621      	mov	r1, r4
 80052a6:	4628      	mov	r0, r5
 80052a8:	f000 ff58 	bl	800615c <__mdiff>
 80052ac:	68c2      	ldr	r2, [r0, #12]
 80052ae:	4607      	mov	r7, r0
 80052b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052b2:	bb02      	cbnz	r2, 80052f6 <_dtoa_r+0xa7e>
 80052b4:	4601      	mov	r1, r0
 80052b6:	4658      	mov	r0, fp
 80052b8:	f000 ff34 	bl	8006124 <__mcmp>
 80052bc:	4602      	mov	r2, r0
 80052be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052c0:	4639      	mov	r1, r7
 80052c2:	4628      	mov	r0, r5
 80052c4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80052c8:	f000 fca4 	bl	8005c14 <_Bfree>
 80052cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052d0:	9f08      	ldr	r7, [sp, #32]
 80052d2:	ea43 0102 	orr.w	r1, r3, r2
 80052d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052d8:	430b      	orrs	r3, r1
 80052da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052dc:	d10d      	bne.n	80052fa <_dtoa_r+0xa82>
 80052de:	2b39      	cmp	r3, #57	; 0x39
 80052e0:	d029      	beq.n	8005336 <_dtoa_r+0xabe>
 80052e2:	f1b9 0f00 	cmp.w	r9, #0
 80052e6:	dd01      	ble.n	80052ec <_dtoa_r+0xa74>
 80052e8:	9b06      	ldr	r3, [sp, #24]
 80052ea:	3331      	adds	r3, #49	; 0x31
 80052ec:	9a04      	ldr	r2, [sp, #16]
 80052ee:	7013      	strb	r3, [r2, #0]
 80052f0:	e776      	b.n	80051e0 <_dtoa_r+0x968>
 80052f2:	4630      	mov	r0, r6
 80052f4:	e7b9      	b.n	800526a <_dtoa_r+0x9f2>
 80052f6:	2201      	movs	r2, #1
 80052f8:	e7e2      	b.n	80052c0 <_dtoa_r+0xa48>
 80052fa:	f1b9 0f00 	cmp.w	r9, #0
 80052fe:	db06      	blt.n	800530e <_dtoa_r+0xa96>
 8005300:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005302:	ea41 0909 	orr.w	r9, r1, r9
 8005306:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005308:	ea59 0101 	orrs.w	r1, r9, r1
 800530c:	d120      	bne.n	8005350 <_dtoa_r+0xad8>
 800530e:	2a00      	cmp	r2, #0
 8005310:	ddec      	ble.n	80052ec <_dtoa_r+0xa74>
 8005312:	4659      	mov	r1, fp
 8005314:	2201      	movs	r2, #1
 8005316:	4628      	mov	r0, r5
 8005318:	9308      	str	r3, [sp, #32]
 800531a:	f000 fe93 	bl	8006044 <__lshift>
 800531e:	4621      	mov	r1, r4
 8005320:	4683      	mov	fp, r0
 8005322:	f000 feff 	bl	8006124 <__mcmp>
 8005326:	2800      	cmp	r0, #0
 8005328:	9b08      	ldr	r3, [sp, #32]
 800532a:	dc02      	bgt.n	8005332 <_dtoa_r+0xaba>
 800532c:	d1de      	bne.n	80052ec <_dtoa_r+0xa74>
 800532e:	07da      	lsls	r2, r3, #31
 8005330:	d5dc      	bpl.n	80052ec <_dtoa_r+0xa74>
 8005332:	2b39      	cmp	r3, #57	; 0x39
 8005334:	d1d8      	bne.n	80052e8 <_dtoa_r+0xa70>
 8005336:	2339      	movs	r3, #57	; 0x39
 8005338:	9a04      	ldr	r2, [sp, #16]
 800533a:	7013      	strb	r3, [r2, #0]
 800533c:	463b      	mov	r3, r7
 800533e:	461f      	mov	r7, r3
 8005340:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005344:	3b01      	subs	r3, #1
 8005346:	2a39      	cmp	r2, #57	; 0x39
 8005348:	d050      	beq.n	80053ec <_dtoa_r+0xb74>
 800534a:	3201      	adds	r2, #1
 800534c:	701a      	strb	r2, [r3, #0]
 800534e:	e747      	b.n	80051e0 <_dtoa_r+0x968>
 8005350:	2a00      	cmp	r2, #0
 8005352:	dd03      	ble.n	800535c <_dtoa_r+0xae4>
 8005354:	2b39      	cmp	r3, #57	; 0x39
 8005356:	d0ee      	beq.n	8005336 <_dtoa_r+0xabe>
 8005358:	3301      	adds	r3, #1
 800535a:	e7c7      	b.n	80052ec <_dtoa_r+0xa74>
 800535c:	9a08      	ldr	r2, [sp, #32]
 800535e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005360:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005364:	428a      	cmp	r2, r1
 8005366:	d02a      	beq.n	80053be <_dtoa_r+0xb46>
 8005368:	4659      	mov	r1, fp
 800536a:	2300      	movs	r3, #0
 800536c:	220a      	movs	r2, #10
 800536e:	4628      	mov	r0, r5
 8005370:	f000 fc72 	bl	8005c58 <__multadd>
 8005374:	45b0      	cmp	r8, r6
 8005376:	4683      	mov	fp, r0
 8005378:	f04f 0300 	mov.w	r3, #0
 800537c:	f04f 020a 	mov.w	r2, #10
 8005380:	4641      	mov	r1, r8
 8005382:	4628      	mov	r0, r5
 8005384:	d107      	bne.n	8005396 <_dtoa_r+0xb1e>
 8005386:	f000 fc67 	bl	8005c58 <__multadd>
 800538a:	4680      	mov	r8, r0
 800538c:	4606      	mov	r6, r0
 800538e:	9b08      	ldr	r3, [sp, #32]
 8005390:	3301      	adds	r3, #1
 8005392:	9308      	str	r3, [sp, #32]
 8005394:	e775      	b.n	8005282 <_dtoa_r+0xa0a>
 8005396:	f000 fc5f 	bl	8005c58 <__multadd>
 800539a:	4631      	mov	r1, r6
 800539c:	4680      	mov	r8, r0
 800539e:	2300      	movs	r3, #0
 80053a0:	220a      	movs	r2, #10
 80053a2:	4628      	mov	r0, r5
 80053a4:	f000 fc58 	bl	8005c58 <__multadd>
 80053a8:	4606      	mov	r6, r0
 80053aa:	e7f0      	b.n	800538e <_dtoa_r+0xb16>
 80053ac:	f1b9 0f00 	cmp.w	r9, #0
 80053b0:	bfcc      	ite	gt
 80053b2:	464f      	movgt	r7, r9
 80053b4:	2701      	movle	r7, #1
 80053b6:	f04f 0800 	mov.w	r8, #0
 80053ba:	9a03      	ldr	r2, [sp, #12]
 80053bc:	4417      	add	r7, r2
 80053be:	4659      	mov	r1, fp
 80053c0:	2201      	movs	r2, #1
 80053c2:	4628      	mov	r0, r5
 80053c4:	9308      	str	r3, [sp, #32]
 80053c6:	f000 fe3d 	bl	8006044 <__lshift>
 80053ca:	4621      	mov	r1, r4
 80053cc:	4683      	mov	fp, r0
 80053ce:	f000 fea9 	bl	8006124 <__mcmp>
 80053d2:	2800      	cmp	r0, #0
 80053d4:	dcb2      	bgt.n	800533c <_dtoa_r+0xac4>
 80053d6:	d102      	bne.n	80053de <_dtoa_r+0xb66>
 80053d8:	9b08      	ldr	r3, [sp, #32]
 80053da:	07db      	lsls	r3, r3, #31
 80053dc:	d4ae      	bmi.n	800533c <_dtoa_r+0xac4>
 80053de:	463b      	mov	r3, r7
 80053e0:	461f      	mov	r7, r3
 80053e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80053e6:	2a30      	cmp	r2, #48	; 0x30
 80053e8:	d0fa      	beq.n	80053e0 <_dtoa_r+0xb68>
 80053ea:	e6f9      	b.n	80051e0 <_dtoa_r+0x968>
 80053ec:	9a03      	ldr	r2, [sp, #12]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d1a5      	bne.n	800533e <_dtoa_r+0xac6>
 80053f2:	2331      	movs	r3, #49	; 0x31
 80053f4:	f10a 0a01 	add.w	sl, sl, #1
 80053f8:	e779      	b.n	80052ee <_dtoa_r+0xa76>
 80053fa:	4b14      	ldr	r3, [pc, #80]	; (800544c <_dtoa_r+0xbd4>)
 80053fc:	f7ff baa8 	b.w	8004950 <_dtoa_r+0xd8>
 8005400:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005402:	2b00      	cmp	r3, #0
 8005404:	f47f aa81 	bne.w	800490a <_dtoa_r+0x92>
 8005408:	4b11      	ldr	r3, [pc, #68]	; (8005450 <_dtoa_r+0xbd8>)
 800540a:	f7ff baa1 	b.w	8004950 <_dtoa_r+0xd8>
 800540e:	f1b9 0f00 	cmp.w	r9, #0
 8005412:	dc03      	bgt.n	800541c <_dtoa_r+0xba4>
 8005414:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005416:	2b02      	cmp	r3, #2
 8005418:	f73f aecb 	bgt.w	80051b2 <_dtoa_r+0x93a>
 800541c:	9f03      	ldr	r7, [sp, #12]
 800541e:	4621      	mov	r1, r4
 8005420:	4658      	mov	r0, fp
 8005422:	f7ff f99d 	bl	8004760 <quorem>
 8005426:	9a03      	ldr	r2, [sp, #12]
 8005428:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800542c:	f807 3b01 	strb.w	r3, [r7], #1
 8005430:	1aba      	subs	r2, r7, r2
 8005432:	4591      	cmp	r9, r2
 8005434:	ddba      	ble.n	80053ac <_dtoa_r+0xb34>
 8005436:	4659      	mov	r1, fp
 8005438:	2300      	movs	r3, #0
 800543a:	220a      	movs	r2, #10
 800543c:	4628      	mov	r0, r5
 800543e:	f000 fc0b 	bl	8005c58 <__multadd>
 8005442:	4683      	mov	fp, r0
 8005444:	e7eb      	b.n	800541e <_dtoa_r+0xba6>
 8005446:	bf00      	nop
 8005448:	080077e8 	.word	0x080077e8
 800544c:	080075ec 	.word	0x080075ec
 8005450:	08007769 	.word	0x08007769

08005454 <rshift>:
 8005454:	6903      	ldr	r3, [r0, #16]
 8005456:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800545a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800545e:	f100 0414 	add.w	r4, r0, #20
 8005462:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005466:	dd46      	ble.n	80054f6 <rshift+0xa2>
 8005468:	f011 011f 	ands.w	r1, r1, #31
 800546c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005470:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005474:	d10c      	bne.n	8005490 <rshift+0x3c>
 8005476:	4629      	mov	r1, r5
 8005478:	f100 0710 	add.w	r7, r0, #16
 800547c:	42b1      	cmp	r1, r6
 800547e:	d335      	bcc.n	80054ec <rshift+0x98>
 8005480:	1a9b      	subs	r3, r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	1eea      	subs	r2, r5, #3
 8005486:	4296      	cmp	r6, r2
 8005488:	bf38      	it	cc
 800548a:	2300      	movcc	r3, #0
 800548c:	4423      	add	r3, r4
 800548e:	e015      	b.n	80054bc <rshift+0x68>
 8005490:	46a1      	mov	r9, r4
 8005492:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005496:	f1c1 0820 	rsb	r8, r1, #32
 800549a:	40cf      	lsrs	r7, r1
 800549c:	f105 0e04 	add.w	lr, r5, #4
 80054a0:	4576      	cmp	r6, lr
 80054a2:	46f4      	mov	ip, lr
 80054a4:	d816      	bhi.n	80054d4 <rshift+0x80>
 80054a6:	1a9a      	subs	r2, r3, r2
 80054a8:	0092      	lsls	r2, r2, #2
 80054aa:	3a04      	subs	r2, #4
 80054ac:	3501      	adds	r5, #1
 80054ae:	42ae      	cmp	r6, r5
 80054b0:	bf38      	it	cc
 80054b2:	2200      	movcc	r2, #0
 80054b4:	18a3      	adds	r3, r4, r2
 80054b6:	50a7      	str	r7, [r4, r2]
 80054b8:	b107      	cbz	r7, 80054bc <rshift+0x68>
 80054ba:	3304      	adds	r3, #4
 80054bc:	42a3      	cmp	r3, r4
 80054be:	eba3 0204 	sub.w	r2, r3, r4
 80054c2:	bf08      	it	eq
 80054c4:	2300      	moveq	r3, #0
 80054c6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80054ca:	6102      	str	r2, [r0, #16]
 80054cc:	bf08      	it	eq
 80054ce:	6143      	streq	r3, [r0, #20]
 80054d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054d4:	f8dc c000 	ldr.w	ip, [ip]
 80054d8:	fa0c fc08 	lsl.w	ip, ip, r8
 80054dc:	ea4c 0707 	orr.w	r7, ip, r7
 80054e0:	f849 7b04 	str.w	r7, [r9], #4
 80054e4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80054e8:	40cf      	lsrs	r7, r1
 80054ea:	e7d9      	b.n	80054a0 <rshift+0x4c>
 80054ec:	f851 cb04 	ldr.w	ip, [r1], #4
 80054f0:	f847 cf04 	str.w	ip, [r7, #4]!
 80054f4:	e7c2      	b.n	800547c <rshift+0x28>
 80054f6:	4623      	mov	r3, r4
 80054f8:	e7e0      	b.n	80054bc <rshift+0x68>

080054fa <__hexdig_fun>:
 80054fa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80054fe:	2b09      	cmp	r3, #9
 8005500:	d802      	bhi.n	8005508 <__hexdig_fun+0xe>
 8005502:	3820      	subs	r0, #32
 8005504:	b2c0      	uxtb	r0, r0
 8005506:	4770      	bx	lr
 8005508:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800550c:	2b05      	cmp	r3, #5
 800550e:	d801      	bhi.n	8005514 <__hexdig_fun+0x1a>
 8005510:	3847      	subs	r0, #71	; 0x47
 8005512:	e7f7      	b.n	8005504 <__hexdig_fun+0xa>
 8005514:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005518:	2b05      	cmp	r3, #5
 800551a:	d801      	bhi.n	8005520 <__hexdig_fun+0x26>
 800551c:	3827      	subs	r0, #39	; 0x27
 800551e:	e7f1      	b.n	8005504 <__hexdig_fun+0xa>
 8005520:	2000      	movs	r0, #0
 8005522:	4770      	bx	lr

08005524 <__gethex>:
 8005524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005528:	b08b      	sub	sp, #44	; 0x2c
 800552a:	9305      	str	r3, [sp, #20]
 800552c:	4bb2      	ldr	r3, [pc, #712]	; (80057f8 <__gethex+0x2d4>)
 800552e:	9002      	str	r0, [sp, #8]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	468b      	mov	fp, r1
 8005534:	4618      	mov	r0, r3
 8005536:	4690      	mov	r8, r2
 8005538:	9303      	str	r3, [sp, #12]
 800553a:	f7fa fe09 	bl	8000150 <strlen>
 800553e:	4682      	mov	sl, r0
 8005540:	9b03      	ldr	r3, [sp, #12]
 8005542:	f8db 2000 	ldr.w	r2, [fp]
 8005546:	4403      	add	r3, r0
 8005548:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800554c:	9306      	str	r3, [sp, #24]
 800554e:	1c93      	adds	r3, r2, #2
 8005550:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005554:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005558:	32fe      	adds	r2, #254	; 0xfe
 800555a:	18d1      	adds	r1, r2, r3
 800555c:	461f      	mov	r7, r3
 800555e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005562:	9101      	str	r1, [sp, #4]
 8005564:	2830      	cmp	r0, #48	; 0x30
 8005566:	d0f8      	beq.n	800555a <__gethex+0x36>
 8005568:	f7ff ffc7 	bl	80054fa <__hexdig_fun>
 800556c:	4604      	mov	r4, r0
 800556e:	2800      	cmp	r0, #0
 8005570:	d13a      	bne.n	80055e8 <__gethex+0xc4>
 8005572:	4652      	mov	r2, sl
 8005574:	4638      	mov	r0, r7
 8005576:	9903      	ldr	r1, [sp, #12]
 8005578:	f001 fa26 	bl	80069c8 <strncmp>
 800557c:	4605      	mov	r5, r0
 800557e:	2800      	cmp	r0, #0
 8005580:	d166      	bne.n	8005650 <__gethex+0x12c>
 8005582:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005586:	eb07 060a 	add.w	r6, r7, sl
 800558a:	f7ff ffb6 	bl	80054fa <__hexdig_fun>
 800558e:	2800      	cmp	r0, #0
 8005590:	d060      	beq.n	8005654 <__gethex+0x130>
 8005592:	4633      	mov	r3, r6
 8005594:	7818      	ldrb	r0, [r3, #0]
 8005596:	461f      	mov	r7, r3
 8005598:	2830      	cmp	r0, #48	; 0x30
 800559a:	f103 0301 	add.w	r3, r3, #1
 800559e:	d0f9      	beq.n	8005594 <__gethex+0x70>
 80055a0:	f7ff ffab 	bl	80054fa <__hexdig_fun>
 80055a4:	2301      	movs	r3, #1
 80055a6:	fab0 f480 	clz	r4, r0
 80055aa:	4635      	mov	r5, r6
 80055ac:	0964      	lsrs	r4, r4, #5
 80055ae:	9301      	str	r3, [sp, #4]
 80055b0:	463a      	mov	r2, r7
 80055b2:	4616      	mov	r6, r2
 80055b4:	7830      	ldrb	r0, [r6, #0]
 80055b6:	3201      	adds	r2, #1
 80055b8:	f7ff ff9f 	bl	80054fa <__hexdig_fun>
 80055bc:	2800      	cmp	r0, #0
 80055be:	d1f8      	bne.n	80055b2 <__gethex+0x8e>
 80055c0:	4652      	mov	r2, sl
 80055c2:	4630      	mov	r0, r6
 80055c4:	9903      	ldr	r1, [sp, #12]
 80055c6:	f001 f9ff 	bl	80069c8 <strncmp>
 80055ca:	b980      	cbnz	r0, 80055ee <__gethex+0xca>
 80055cc:	b94d      	cbnz	r5, 80055e2 <__gethex+0xbe>
 80055ce:	eb06 050a 	add.w	r5, r6, sl
 80055d2:	462a      	mov	r2, r5
 80055d4:	4616      	mov	r6, r2
 80055d6:	7830      	ldrb	r0, [r6, #0]
 80055d8:	3201      	adds	r2, #1
 80055da:	f7ff ff8e 	bl	80054fa <__hexdig_fun>
 80055de:	2800      	cmp	r0, #0
 80055e0:	d1f8      	bne.n	80055d4 <__gethex+0xb0>
 80055e2:	1bad      	subs	r5, r5, r6
 80055e4:	00ad      	lsls	r5, r5, #2
 80055e6:	e004      	b.n	80055f2 <__gethex+0xce>
 80055e8:	2400      	movs	r4, #0
 80055ea:	4625      	mov	r5, r4
 80055ec:	e7e0      	b.n	80055b0 <__gethex+0x8c>
 80055ee:	2d00      	cmp	r5, #0
 80055f0:	d1f7      	bne.n	80055e2 <__gethex+0xbe>
 80055f2:	7833      	ldrb	r3, [r6, #0]
 80055f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80055f8:	2b50      	cmp	r3, #80	; 0x50
 80055fa:	d139      	bne.n	8005670 <__gethex+0x14c>
 80055fc:	7873      	ldrb	r3, [r6, #1]
 80055fe:	2b2b      	cmp	r3, #43	; 0x2b
 8005600:	d02a      	beq.n	8005658 <__gethex+0x134>
 8005602:	2b2d      	cmp	r3, #45	; 0x2d
 8005604:	d02c      	beq.n	8005660 <__gethex+0x13c>
 8005606:	f04f 0900 	mov.w	r9, #0
 800560a:	1c71      	adds	r1, r6, #1
 800560c:	7808      	ldrb	r0, [r1, #0]
 800560e:	f7ff ff74 	bl	80054fa <__hexdig_fun>
 8005612:	1e43      	subs	r3, r0, #1
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b18      	cmp	r3, #24
 8005618:	d82a      	bhi.n	8005670 <__gethex+0x14c>
 800561a:	f1a0 0210 	sub.w	r2, r0, #16
 800561e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005622:	f7ff ff6a 	bl	80054fa <__hexdig_fun>
 8005626:	1e43      	subs	r3, r0, #1
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b18      	cmp	r3, #24
 800562c:	d91b      	bls.n	8005666 <__gethex+0x142>
 800562e:	f1b9 0f00 	cmp.w	r9, #0
 8005632:	d000      	beq.n	8005636 <__gethex+0x112>
 8005634:	4252      	negs	r2, r2
 8005636:	4415      	add	r5, r2
 8005638:	f8cb 1000 	str.w	r1, [fp]
 800563c:	b1d4      	cbz	r4, 8005674 <__gethex+0x150>
 800563e:	9b01      	ldr	r3, [sp, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	bf14      	ite	ne
 8005644:	2700      	movne	r7, #0
 8005646:	2706      	moveq	r7, #6
 8005648:	4638      	mov	r0, r7
 800564a:	b00b      	add	sp, #44	; 0x2c
 800564c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005650:	463e      	mov	r6, r7
 8005652:	4625      	mov	r5, r4
 8005654:	2401      	movs	r4, #1
 8005656:	e7cc      	b.n	80055f2 <__gethex+0xce>
 8005658:	f04f 0900 	mov.w	r9, #0
 800565c:	1cb1      	adds	r1, r6, #2
 800565e:	e7d5      	b.n	800560c <__gethex+0xe8>
 8005660:	f04f 0901 	mov.w	r9, #1
 8005664:	e7fa      	b.n	800565c <__gethex+0x138>
 8005666:	230a      	movs	r3, #10
 8005668:	fb03 0202 	mla	r2, r3, r2, r0
 800566c:	3a10      	subs	r2, #16
 800566e:	e7d6      	b.n	800561e <__gethex+0xfa>
 8005670:	4631      	mov	r1, r6
 8005672:	e7e1      	b.n	8005638 <__gethex+0x114>
 8005674:	4621      	mov	r1, r4
 8005676:	1bf3      	subs	r3, r6, r7
 8005678:	3b01      	subs	r3, #1
 800567a:	2b07      	cmp	r3, #7
 800567c:	dc0a      	bgt.n	8005694 <__gethex+0x170>
 800567e:	9802      	ldr	r0, [sp, #8]
 8005680:	f000 fa88 	bl	8005b94 <_Balloc>
 8005684:	4604      	mov	r4, r0
 8005686:	b940      	cbnz	r0, 800569a <__gethex+0x176>
 8005688:	4602      	mov	r2, r0
 800568a:	21de      	movs	r1, #222	; 0xde
 800568c:	4b5b      	ldr	r3, [pc, #364]	; (80057fc <__gethex+0x2d8>)
 800568e:	485c      	ldr	r0, [pc, #368]	; (8005800 <__gethex+0x2dc>)
 8005690:	f001 f9bc 	bl	8006a0c <__assert_func>
 8005694:	3101      	adds	r1, #1
 8005696:	105b      	asrs	r3, r3, #1
 8005698:	e7ef      	b.n	800567a <__gethex+0x156>
 800569a:	f04f 0b00 	mov.w	fp, #0
 800569e:	f100 0914 	add.w	r9, r0, #20
 80056a2:	f1ca 0301 	rsb	r3, sl, #1
 80056a6:	f8cd 9010 	str.w	r9, [sp, #16]
 80056aa:	f8cd b004 	str.w	fp, [sp, #4]
 80056ae:	9308      	str	r3, [sp, #32]
 80056b0:	42b7      	cmp	r7, r6
 80056b2:	d33f      	bcc.n	8005734 <__gethex+0x210>
 80056b4:	9f04      	ldr	r7, [sp, #16]
 80056b6:	9b01      	ldr	r3, [sp, #4]
 80056b8:	f847 3b04 	str.w	r3, [r7], #4
 80056bc:	eba7 0709 	sub.w	r7, r7, r9
 80056c0:	10bf      	asrs	r7, r7, #2
 80056c2:	6127      	str	r7, [r4, #16]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 fb57 	bl	8005d78 <__hi0bits>
 80056ca:	017f      	lsls	r7, r7, #5
 80056cc:	f8d8 6000 	ldr.w	r6, [r8]
 80056d0:	1a3f      	subs	r7, r7, r0
 80056d2:	42b7      	cmp	r7, r6
 80056d4:	dd62      	ble.n	800579c <__gethex+0x278>
 80056d6:	1bbf      	subs	r7, r7, r6
 80056d8:	4639      	mov	r1, r7
 80056da:	4620      	mov	r0, r4
 80056dc:	f000 fef1 	bl	80064c2 <__any_on>
 80056e0:	4682      	mov	sl, r0
 80056e2:	b1a8      	cbz	r0, 8005710 <__gethex+0x1ec>
 80056e4:	f04f 0a01 	mov.w	sl, #1
 80056e8:	1e7b      	subs	r3, r7, #1
 80056ea:	1159      	asrs	r1, r3, #5
 80056ec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80056f0:	f003 021f 	and.w	r2, r3, #31
 80056f4:	fa0a f202 	lsl.w	r2, sl, r2
 80056f8:	420a      	tst	r2, r1
 80056fa:	d009      	beq.n	8005710 <__gethex+0x1ec>
 80056fc:	4553      	cmp	r3, sl
 80056fe:	dd05      	ble.n	800570c <__gethex+0x1e8>
 8005700:	4620      	mov	r0, r4
 8005702:	1eb9      	subs	r1, r7, #2
 8005704:	f000 fedd 	bl	80064c2 <__any_on>
 8005708:	2800      	cmp	r0, #0
 800570a:	d144      	bne.n	8005796 <__gethex+0x272>
 800570c:	f04f 0a02 	mov.w	sl, #2
 8005710:	4639      	mov	r1, r7
 8005712:	4620      	mov	r0, r4
 8005714:	f7ff fe9e 	bl	8005454 <rshift>
 8005718:	443d      	add	r5, r7
 800571a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800571e:	42ab      	cmp	r3, r5
 8005720:	da4a      	bge.n	80057b8 <__gethex+0x294>
 8005722:	4621      	mov	r1, r4
 8005724:	9802      	ldr	r0, [sp, #8]
 8005726:	f000 fa75 	bl	8005c14 <_Bfree>
 800572a:	2300      	movs	r3, #0
 800572c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800572e:	27a3      	movs	r7, #163	; 0xa3
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	e789      	b.n	8005648 <__gethex+0x124>
 8005734:	1e73      	subs	r3, r6, #1
 8005736:	9a06      	ldr	r2, [sp, #24]
 8005738:	9307      	str	r3, [sp, #28]
 800573a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800573e:	4293      	cmp	r3, r2
 8005740:	d019      	beq.n	8005776 <__gethex+0x252>
 8005742:	f1bb 0f20 	cmp.w	fp, #32
 8005746:	d107      	bne.n	8005758 <__gethex+0x234>
 8005748:	9b04      	ldr	r3, [sp, #16]
 800574a:	9a01      	ldr	r2, [sp, #4]
 800574c:	f843 2b04 	str.w	r2, [r3], #4
 8005750:	9304      	str	r3, [sp, #16]
 8005752:	2300      	movs	r3, #0
 8005754:	469b      	mov	fp, r3
 8005756:	9301      	str	r3, [sp, #4]
 8005758:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800575c:	f7ff fecd 	bl	80054fa <__hexdig_fun>
 8005760:	9b01      	ldr	r3, [sp, #4]
 8005762:	f000 000f 	and.w	r0, r0, #15
 8005766:	fa00 f00b 	lsl.w	r0, r0, fp
 800576a:	4303      	orrs	r3, r0
 800576c:	9301      	str	r3, [sp, #4]
 800576e:	f10b 0b04 	add.w	fp, fp, #4
 8005772:	9b07      	ldr	r3, [sp, #28]
 8005774:	e00d      	b.n	8005792 <__gethex+0x26e>
 8005776:	9a08      	ldr	r2, [sp, #32]
 8005778:	1e73      	subs	r3, r6, #1
 800577a:	4413      	add	r3, r2
 800577c:	42bb      	cmp	r3, r7
 800577e:	d3e0      	bcc.n	8005742 <__gethex+0x21e>
 8005780:	4618      	mov	r0, r3
 8005782:	4652      	mov	r2, sl
 8005784:	9903      	ldr	r1, [sp, #12]
 8005786:	9309      	str	r3, [sp, #36]	; 0x24
 8005788:	f001 f91e 	bl	80069c8 <strncmp>
 800578c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800578e:	2800      	cmp	r0, #0
 8005790:	d1d7      	bne.n	8005742 <__gethex+0x21e>
 8005792:	461e      	mov	r6, r3
 8005794:	e78c      	b.n	80056b0 <__gethex+0x18c>
 8005796:	f04f 0a03 	mov.w	sl, #3
 800579a:	e7b9      	b.n	8005710 <__gethex+0x1ec>
 800579c:	da09      	bge.n	80057b2 <__gethex+0x28e>
 800579e:	1bf7      	subs	r7, r6, r7
 80057a0:	4621      	mov	r1, r4
 80057a2:	463a      	mov	r2, r7
 80057a4:	9802      	ldr	r0, [sp, #8]
 80057a6:	f000 fc4d 	bl	8006044 <__lshift>
 80057aa:	4604      	mov	r4, r0
 80057ac:	1bed      	subs	r5, r5, r7
 80057ae:	f100 0914 	add.w	r9, r0, #20
 80057b2:	f04f 0a00 	mov.w	sl, #0
 80057b6:	e7b0      	b.n	800571a <__gethex+0x1f6>
 80057b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80057bc:	42a8      	cmp	r0, r5
 80057be:	dd72      	ble.n	80058a6 <__gethex+0x382>
 80057c0:	1b45      	subs	r5, r0, r5
 80057c2:	42ae      	cmp	r6, r5
 80057c4:	dc35      	bgt.n	8005832 <__gethex+0x30e>
 80057c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d029      	beq.n	8005822 <__gethex+0x2fe>
 80057ce:	2b03      	cmp	r3, #3
 80057d0:	d02b      	beq.n	800582a <__gethex+0x306>
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d11c      	bne.n	8005810 <__gethex+0x2ec>
 80057d6:	42ae      	cmp	r6, r5
 80057d8:	d11a      	bne.n	8005810 <__gethex+0x2ec>
 80057da:	2e01      	cmp	r6, #1
 80057dc:	d112      	bne.n	8005804 <__gethex+0x2e0>
 80057de:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80057e2:	9a05      	ldr	r2, [sp, #20]
 80057e4:	2762      	movs	r7, #98	; 0x62
 80057e6:	6013      	str	r3, [r2, #0]
 80057e8:	2301      	movs	r3, #1
 80057ea:	6123      	str	r3, [r4, #16]
 80057ec:	f8c9 3000 	str.w	r3, [r9]
 80057f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80057f2:	601c      	str	r4, [r3, #0]
 80057f4:	e728      	b.n	8005648 <__gethex+0x124>
 80057f6:	bf00      	nop
 80057f8:	08007860 	.word	0x08007860
 80057fc:	080077e8 	.word	0x080077e8
 8005800:	080077f9 	.word	0x080077f9
 8005804:	4620      	mov	r0, r4
 8005806:	1e71      	subs	r1, r6, #1
 8005808:	f000 fe5b 	bl	80064c2 <__any_on>
 800580c:	2800      	cmp	r0, #0
 800580e:	d1e6      	bne.n	80057de <__gethex+0x2ba>
 8005810:	4621      	mov	r1, r4
 8005812:	9802      	ldr	r0, [sp, #8]
 8005814:	f000 f9fe 	bl	8005c14 <_Bfree>
 8005818:	2300      	movs	r3, #0
 800581a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800581c:	2750      	movs	r7, #80	; 0x50
 800581e:	6013      	str	r3, [r2, #0]
 8005820:	e712      	b.n	8005648 <__gethex+0x124>
 8005822:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1f3      	bne.n	8005810 <__gethex+0x2ec>
 8005828:	e7d9      	b.n	80057de <__gethex+0x2ba>
 800582a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1d6      	bne.n	80057de <__gethex+0x2ba>
 8005830:	e7ee      	b.n	8005810 <__gethex+0x2ec>
 8005832:	1e6f      	subs	r7, r5, #1
 8005834:	f1ba 0f00 	cmp.w	sl, #0
 8005838:	d132      	bne.n	80058a0 <__gethex+0x37c>
 800583a:	b127      	cbz	r7, 8005846 <__gethex+0x322>
 800583c:	4639      	mov	r1, r7
 800583e:	4620      	mov	r0, r4
 8005840:	f000 fe3f 	bl	80064c2 <__any_on>
 8005844:	4682      	mov	sl, r0
 8005846:	2101      	movs	r1, #1
 8005848:	117b      	asrs	r3, r7, #5
 800584a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800584e:	f007 071f 	and.w	r7, r7, #31
 8005852:	fa01 f707 	lsl.w	r7, r1, r7
 8005856:	421f      	tst	r7, r3
 8005858:	f04f 0702 	mov.w	r7, #2
 800585c:	4629      	mov	r1, r5
 800585e:	4620      	mov	r0, r4
 8005860:	bf18      	it	ne
 8005862:	f04a 0a02 	orrne.w	sl, sl, #2
 8005866:	1b76      	subs	r6, r6, r5
 8005868:	f7ff fdf4 	bl	8005454 <rshift>
 800586c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005870:	f1ba 0f00 	cmp.w	sl, #0
 8005874:	d048      	beq.n	8005908 <__gethex+0x3e4>
 8005876:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800587a:	2b02      	cmp	r3, #2
 800587c:	d015      	beq.n	80058aa <__gethex+0x386>
 800587e:	2b03      	cmp	r3, #3
 8005880:	d017      	beq.n	80058b2 <__gethex+0x38e>
 8005882:	2b01      	cmp	r3, #1
 8005884:	d109      	bne.n	800589a <__gethex+0x376>
 8005886:	f01a 0f02 	tst.w	sl, #2
 800588a:	d006      	beq.n	800589a <__gethex+0x376>
 800588c:	f8d9 0000 	ldr.w	r0, [r9]
 8005890:	ea4a 0a00 	orr.w	sl, sl, r0
 8005894:	f01a 0f01 	tst.w	sl, #1
 8005898:	d10e      	bne.n	80058b8 <__gethex+0x394>
 800589a:	f047 0710 	orr.w	r7, r7, #16
 800589e:	e033      	b.n	8005908 <__gethex+0x3e4>
 80058a0:	f04f 0a01 	mov.w	sl, #1
 80058a4:	e7cf      	b.n	8005846 <__gethex+0x322>
 80058a6:	2701      	movs	r7, #1
 80058a8:	e7e2      	b.n	8005870 <__gethex+0x34c>
 80058aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80058ac:	f1c3 0301 	rsb	r3, r3, #1
 80058b0:	9315      	str	r3, [sp, #84]	; 0x54
 80058b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0f0      	beq.n	800589a <__gethex+0x376>
 80058b8:	f04f 0c00 	mov.w	ip, #0
 80058bc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80058c0:	f104 0314 	add.w	r3, r4, #20
 80058c4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80058c8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80058cc:	4618      	mov	r0, r3
 80058ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80058d2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80058d6:	d01c      	beq.n	8005912 <__gethex+0x3ee>
 80058d8:	3201      	adds	r2, #1
 80058da:	6002      	str	r2, [r0, #0]
 80058dc:	2f02      	cmp	r7, #2
 80058de:	f104 0314 	add.w	r3, r4, #20
 80058e2:	d13d      	bne.n	8005960 <__gethex+0x43c>
 80058e4:	f8d8 2000 	ldr.w	r2, [r8]
 80058e8:	3a01      	subs	r2, #1
 80058ea:	42b2      	cmp	r2, r6
 80058ec:	d10a      	bne.n	8005904 <__gethex+0x3e0>
 80058ee:	2201      	movs	r2, #1
 80058f0:	1171      	asrs	r1, r6, #5
 80058f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80058f6:	f006 061f 	and.w	r6, r6, #31
 80058fa:	fa02 f606 	lsl.w	r6, r2, r6
 80058fe:	421e      	tst	r6, r3
 8005900:	bf18      	it	ne
 8005902:	4617      	movne	r7, r2
 8005904:	f047 0720 	orr.w	r7, r7, #32
 8005908:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800590a:	601c      	str	r4, [r3, #0]
 800590c:	9b05      	ldr	r3, [sp, #20]
 800590e:	601d      	str	r5, [r3, #0]
 8005910:	e69a      	b.n	8005648 <__gethex+0x124>
 8005912:	4299      	cmp	r1, r3
 8005914:	f843 cc04 	str.w	ip, [r3, #-4]
 8005918:	d8d8      	bhi.n	80058cc <__gethex+0x3a8>
 800591a:	68a3      	ldr	r3, [r4, #8]
 800591c:	459b      	cmp	fp, r3
 800591e:	db17      	blt.n	8005950 <__gethex+0x42c>
 8005920:	6861      	ldr	r1, [r4, #4]
 8005922:	9802      	ldr	r0, [sp, #8]
 8005924:	3101      	adds	r1, #1
 8005926:	f000 f935 	bl	8005b94 <_Balloc>
 800592a:	4681      	mov	r9, r0
 800592c:	b918      	cbnz	r0, 8005936 <__gethex+0x412>
 800592e:	4602      	mov	r2, r0
 8005930:	2184      	movs	r1, #132	; 0x84
 8005932:	4b19      	ldr	r3, [pc, #100]	; (8005998 <__gethex+0x474>)
 8005934:	e6ab      	b.n	800568e <__gethex+0x16a>
 8005936:	6922      	ldr	r2, [r4, #16]
 8005938:	f104 010c 	add.w	r1, r4, #12
 800593c:	3202      	adds	r2, #2
 800593e:	0092      	lsls	r2, r2, #2
 8005940:	300c      	adds	r0, #12
 8005942:	f000 f919 	bl	8005b78 <memcpy>
 8005946:	4621      	mov	r1, r4
 8005948:	9802      	ldr	r0, [sp, #8]
 800594a:	f000 f963 	bl	8005c14 <_Bfree>
 800594e:	464c      	mov	r4, r9
 8005950:	6923      	ldr	r3, [r4, #16]
 8005952:	1c5a      	adds	r2, r3, #1
 8005954:	6122      	str	r2, [r4, #16]
 8005956:	2201      	movs	r2, #1
 8005958:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800595c:	615a      	str	r2, [r3, #20]
 800595e:	e7bd      	b.n	80058dc <__gethex+0x3b8>
 8005960:	6922      	ldr	r2, [r4, #16]
 8005962:	455a      	cmp	r2, fp
 8005964:	dd0b      	ble.n	800597e <__gethex+0x45a>
 8005966:	2101      	movs	r1, #1
 8005968:	4620      	mov	r0, r4
 800596a:	f7ff fd73 	bl	8005454 <rshift>
 800596e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005972:	3501      	adds	r5, #1
 8005974:	42ab      	cmp	r3, r5
 8005976:	f6ff aed4 	blt.w	8005722 <__gethex+0x1fe>
 800597a:	2701      	movs	r7, #1
 800597c:	e7c2      	b.n	8005904 <__gethex+0x3e0>
 800597e:	f016 061f 	ands.w	r6, r6, #31
 8005982:	d0fa      	beq.n	800597a <__gethex+0x456>
 8005984:	4453      	add	r3, sl
 8005986:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800598a:	f000 f9f5 	bl	8005d78 <__hi0bits>
 800598e:	f1c6 0620 	rsb	r6, r6, #32
 8005992:	42b0      	cmp	r0, r6
 8005994:	dbe7      	blt.n	8005966 <__gethex+0x442>
 8005996:	e7f0      	b.n	800597a <__gethex+0x456>
 8005998:	080077e8 	.word	0x080077e8

0800599c <L_shift>:
 800599c:	f1c2 0208 	rsb	r2, r2, #8
 80059a0:	0092      	lsls	r2, r2, #2
 80059a2:	b570      	push	{r4, r5, r6, lr}
 80059a4:	f1c2 0620 	rsb	r6, r2, #32
 80059a8:	6843      	ldr	r3, [r0, #4]
 80059aa:	6804      	ldr	r4, [r0, #0]
 80059ac:	fa03 f506 	lsl.w	r5, r3, r6
 80059b0:	432c      	orrs	r4, r5
 80059b2:	40d3      	lsrs	r3, r2
 80059b4:	6004      	str	r4, [r0, #0]
 80059b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80059ba:	4288      	cmp	r0, r1
 80059bc:	d3f4      	bcc.n	80059a8 <L_shift+0xc>
 80059be:	bd70      	pop	{r4, r5, r6, pc}

080059c0 <__match>:
 80059c0:	b530      	push	{r4, r5, lr}
 80059c2:	6803      	ldr	r3, [r0, #0]
 80059c4:	3301      	adds	r3, #1
 80059c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059ca:	b914      	cbnz	r4, 80059d2 <__match+0x12>
 80059cc:	6003      	str	r3, [r0, #0]
 80059ce:	2001      	movs	r0, #1
 80059d0:	bd30      	pop	{r4, r5, pc}
 80059d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80059da:	2d19      	cmp	r5, #25
 80059dc:	bf98      	it	ls
 80059de:	3220      	addls	r2, #32
 80059e0:	42a2      	cmp	r2, r4
 80059e2:	d0f0      	beq.n	80059c6 <__match+0x6>
 80059e4:	2000      	movs	r0, #0
 80059e6:	e7f3      	b.n	80059d0 <__match+0x10>

080059e8 <__hexnan>:
 80059e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ec:	2500      	movs	r5, #0
 80059ee:	680b      	ldr	r3, [r1, #0]
 80059f0:	4682      	mov	sl, r0
 80059f2:	115e      	asrs	r6, r3, #5
 80059f4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80059f8:	f013 031f 	ands.w	r3, r3, #31
 80059fc:	bf18      	it	ne
 80059fe:	3604      	addne	r6, #4
 8005a00:	1f37      	subs	r7, r6, #4
 8005a02:	46b9      	mov	r9, r7
 8005a04:	463c      	mov	r4, r7
 8005a06:	46ab      	mov	fp, r5
 8005a08:	b087      	sub	sp, #28
 8005a0a:	4690      	mov	r8, r2
 8005a0c:	6802      	ldr	r2, [r0, #0]
 8005a0e:	9301      	str	r3, [sp, #4]
 8005a10:	f846 5c04 	str.w	r5, [r6, #-4]
 8005a14:	9502      	str	r5, [sp, #8]
 8005a16:	7851      	ldrb	r1, [r2, #1]
 8005a18:	1c53      	adds	r3, r2, #1
 8005a1a:	9303      	str	r3, [sp, #12]
 8005a1c:	b341      	cbz	r1, 8005a70 <__hexnan+0x88>
 8005a1e:	4608      	mov	r0, r1
 8005a20:	9205      	str	r2, [sp, #20]
 8005a22:	9104      	str	r1, [sp, #16]
 8005a24:	f7ff fd69 	bl	80054fa <__hexdig_fun>
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	d14f      	bne.n	8005acc <__hexnan+0xe4>
 8005a2c:	9904      	ldr	r1, [sp, #16]
 8005a2e:	9a05      	ldr	r2, [sp, #20]
 8005a30:	2920      	cmp	r1, #32
 8005a32:	d818      	bhi.n	8005a66 <__hexnan+0x7e>
 8005a34:	9b02      	ldr	r3, [sp, #8]
 8005a36:	459b      	cmp	fp, r3
 8005a38:	dd13      	ble.n	8005a62 <__hexnan+0x7a>
 8005a3a:	454c      	cmp	r4, r9
 8005a3c:	d206      	bcs.n	8005a4c <__hexnan+0x64>
 8005a3e:	2d07      	cmp	r5, #7
 8005a40:	dc04      	bgt.n	8005a4c <__hexnan+0x64>
 8005a42:	462a      	mov	r2, r5
 8005a44:	4649      	mov	r1, r9
 8005a46:	4620      	mov	r0, r4
 8005a48:	f7ff ffa8 	bl	800599c <L_shift>
 8005a4c:	4544      	cmp	r4, r8
 8005a4e:	d950      	bls.n	8005af2 <__hexnan+0x10a>
 8005a50:	2300      	movs	r3, #0
 8005a52:	f1a4 0904 	sub.w	r9, r4, #4
 8005a56:	f844 3c04 	str.w	r3, [r4, #-4]
 8005a5a:	461d      	mov	r5, r3
 8005a5c:	464c      	mov	r4, r9
 8005a5e:	f8cd b008 	str.w	fp, [sp, #8]
 8005a62:	9a03      	ldr	r2, [sp, #12]
 8005a64:	e7d7      	b.n	8005a16 <__hexnan+0x2e>
 8005a66:	2929      	cmp	r1, #41	; 0x29
 8005a68:	d156      	bne.n	8005b18 <__hexnan+0x130>
 8005a6a:	3202      	adds	r2, #2
 8005a6c:	f8ca 2000 	str.w	r2, [sl]
 8005a70:	f1bb 0f00 	cmp.w	fp, #0
 8005a74:	d050      	beq.n	8005b18 <__hexnan+0x130>
 8005a76:	454c      	cmp	r4, r9
 8005a78:	d206      	bcs.n	8005a88 <__hexnan+0xa0>
 8005a7a:	2d07      	cmp	r5, #7
 8005a7c:	dc04      	bgt.n	8005a88 <__hexnan+0xa0>
 8005a7e:	462a      	mov	r2, r5
 8005a80:	4649      	mov	r1, r9
 8005a82:	4620      	mov	r0, r4
 8005a84:	f7ff ff8a 	bl	800599c <L_shift>
 8005a88:	4544      	cmp	r4, r8
 8005a8a:	d934      	bls.n	8005af6 <__hexnan+0x10e>
 8005a8c:	4623      	mov	r3, r4
 8005a8e:	f1a8 0204 	sub.w	r2, r8, #4
 8005a92:	f853 1b04 	ldr.w	r1, [r3], #4
 8005a96:	429f      	cmp	r7, r3
 8005a98:	f842 1f04 	str.w	r1, [r2, #4]!
 8005a9c:	d2f9      	bcs.n	8005a92 <__hexnan+0xaa>
 8005a9e:	1b3b      	subs	r3, r7, r4
 8005aa0:	f023 0303 	bic.w	r3, r3, #3
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	3401      	adds	r4, #1
 8005aa8:	3e03      	subs	r6, #3
 8005aaa:	42b4      	cmp	r4, r6
 8005aac:	bf88      	it	hi
 8005aae:	2304      	movhi	r3, #4
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	4443      	add	r3, r8
 8005ab4:	f843 2b04 	str.w	r2, [r3], #4
 8005ab8:	429f      	cmp	r7, r3
 8005aba:	d2fb      	bcs.n	8005ab4 <__hexnan+0xcc>
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	b91b      	cbnz	r3, 8005ac8 <__hexnan+0xe0>
 8005ac0:	4547      	cmp	r7, r8
 8005ac2:	d127      	bne.n	8005b14 <__hexnan+0x12c>
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	603b      	str	r3, [r7, #0]
 8005ac8:	2005      	movs	r0, #5
 8005aca:	e026      	b.n	8005b1a <__hexnan+0x132>
 8005acc:	3501      	adds	r5, #1
 8005ace:	2d08      	cmp	r5, #8
 8005ad0:	f10b 0b01 	add.w	fp, fp, #1
 8005ad4:	dd06      	ble.n	8005ae4 <__hexnan+0xfc>
 8005ad6:	4544      	cmp	r4, r8
 8005ad8:	d9c3      	bls.n	8005a62 <__hexnan+0x7a>
 8005ada:	2300      	movs	r3, #0
 8005adc:	2501      	movs	r5, #1
 8005ade:	f844 3c04 	str.w	r3, [r4, #-4]
 8005ae2:	3c04      	subs	r4, #4
 8005ae4:	6822      	ldr	r2, [r4, #0]
 8005ae6:	f000 000f 	and.w	r0, r0, #15
 8005aea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005aee:	6022      	str	r2, [r4, #0]
 8005af0:	e7b7      	b.n	8005a62 <__hexnan+0x7a>
 8005af2:	2508      	movs	r5, #8
 8005af4:	e7b5      	b.n	8005a62 <__hexnan+0x7a>
 8005af6:	9b01      	ldr	r3, [sp, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d0df      	beq.n	8005abc <__hexnan+0xd4>
 8005afc:	f04f 32ff 	mov.w	r2, #4294967295
 8005b00:	f1c3 0320 	rsb	r3, r3, #32
 8005b04:	fa22 f303 	lsr.w	r3, r2, r3
 8005b08:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005b0c:	401a      	ands	r2, r3
 8005b0e:	f846 2c04 	str.w	r2, [r6, #-4]
 8005b12:	e7d3      	b.n	8005abc <__hexnan+0xd4>
 8005b14:	3f04      	subs	r7, #4
 8005b16:	e7d1      	b.n	8005abc <__hexnan+0xd4>
 8005b18:	2004      	movs	r0, #4
 8005b1a:	b007      	add	sp, #28
 8005b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005b20 <_localeconv_r>:
 8005b20:	4800      	ldr	r0, [pc, #0]	; (8005b24 <_localeconv_r+0x4>)
 8005b22:	4770      	bx	lr
 8005b24:	20000164 	.word	0x20000164

08005b28 <malloc>:
 8005b28:	4b02      	ldr	r3, [pc, #8]	; (8005b34 <malloc+0xc>)
 8005b2a:	4601      	mov	r1, r0
 8005b2c:	6818      	ldr	r0, [r3, #0]
 8005b2e:	f000 bd65 	b.w	80065fc <_malloc_r>
 8005b32:	bf00      	nop
 8005b34:	2000000c 	.word	0x2000000c

08005b38 <__ascii_mbtowc>:
 8005b38:	b082      	sub	sp, #8
 8005b3a:	b901      	cbnz	r1, 8005b3e <__ascii_mbtowc+0x6>
 8005b3c:	a901      	add	r1, sp, #4
 8005b3e:	b142      	cbz	r2, 8005b52 <__ascii_mbtowc+0x1a>
 8005b40:	b14b      	cbz	r3, 8005b56 <__ascii_mbtowc+0x1e>
 8005b42:	7813      	ldrb	r3, [r2, #0]
 8005b44:	600b      	str	r3, [r1, #0]
 8005b46:	7812      	ldrb	r2, [r2, #0]
 8005b48:	1e10      	subs	r0, r2, #0
 8005b4a:	bf18      	it	ne
 8005b4c:	2001      	movne	r0, #1
 8005b4e:	b002      	add	sp, #8
 8005b50:	4770      	bx	lr
 8005b52:	4610      	mov	r0, r2
 8005b54:	e7fb      	b.n	8005b4e <__ascii_mbtowc+0x16>
 8005b56:	f06f 0001 	mvn.w	r0, #1
 8005b5a:	e7f8      	b.n	8005b4e <__ascii_mbtowc+0x16>

08005b5c <memchr>:
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	b510      	push	{r4, lr}
 8005b60:	b2c9      	uxtb	r1, r1
 8005b62:	4402      	add	r2, r0
 8005b64:	4293      	cmp	r3, r2
 8005b66:	4618      	mov	r0, r3
 8005b68:	d101      	bne.n	8005b6e <memchr+0x12>
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	e003      	b.n	8005b76 <memchr+0x1a>
 8005b6e:	7804      	ldrb	r4, [r0, #0]
 8005b70:	3301      	adds	r3, #1
 8005b72:	428c      	cmp	r4, r1
 8005b74:	d1f6      	bne.n	8005b64 <memchr+0x8>
 8005b76:	bd10      	pop	{r4, pc}

08005b78 <memcpy>:
 8005b78:	440a      	add	r2, r1
 8005b7a:	4291      	cmp	r1, r2
 8005b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b80:	d100      	bne.n	8005b84 <memcpy+0xc>
 8005b82:	4770      	bx	lr
 8005b84:	b510      	push	{r4, lr}
 8005b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b8a:	4291      	cmp	r1, r2
 8005b8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b90:	d1f9      	bne.n	8005b86 <memcpy+0xe>
 8005b92:	bd10      	pop	{r4, pc}

08005b94 <_Balloc>:
 8005b94:	b570      	push	{r4, r5, r6, lr}
 8005b96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b98:	4604      	mov	r4, r0
 8005b9a:	460d      	mov	r5, r1
 8005b9c:	b976      	cbnz	r6, 8005bbc <_Balloc+0x28>
 8005b9e:	2010      	movs	r0, #16
 8005ba0:	f7ff ffc2 	bl	8005b28 <malloc>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	6260      	str	r0, [r4, #36]	; 0x24
 8005ba8:	b920      	cbnz	r0, 8005bb4 <_Balloc+0x20>
 8005baa:	2166      	movs	r1, #102	; 0x66
 8005bac:	4b17      	ldr	r3, [pc, #92]	; (8005c0c <_Balloc+0x78>)
 8005bae:	4818      	ldr	r0, [pc, #96]	; (8005c10 <_Balloc+0x7c>)
 8005bb0:	f000 ff2c 	bl	8006a0c <__assert_func>
 8005bb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005bb8:	6006      	str	r6, [r0, #0]
 8005bba:	60c6      	str	r6, [r0, #12]
 8005bbc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005bbe:	68f3      	ldr	r3, [r6, #12]
 8005bc0:	b183      	cbz	r3, 8005be4 <_Balloc+0x50>
 8005bc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005bca:	b9b8      	cbnz	r0, 8005bfc <_Balloc+0x68>
 8005bcc:	2101      	movs	r1, #1
 8005bce:	fa01 f605 	lsl.w	r6, r1, r5
 8005bd2:	1d72      	adds	r2, r6, #5
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	0092      	lsls	r2, r2, #2
 8005bd8:	f000 fc94 	bl	8006504 <_calloc_r>
 8005bdc:	b160      	cbz	r0, 8005bf8 <_Balloc+0x64>
 8005bde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005be2:	e00e      	b.n	8005c02 <_Balloc+0x6e>
 8005be4:	2221      	movs	r2, #33	; 0x21
 8005be6:	2104      	movs	r1, #4
 8005be8:	4620      	mov	r0, r4
 8005bea:	f000 fc8b 	bl	8006504 <_calloc_r>
 8005bee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bf0:	60f0      	str	r0, [r6, #12]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1e4      	bne.n	8005bc2 <_Balloc+0x2e>
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	bd70      	pop	{r4, r5, r6, pc}
 8005bfc:	6802      	ldr	r2, [r0, #0]
 8005bfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c02:	2300      	movs	r3, #0
 8005c04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c08:	e7f7      	b.n	8005bfa <_Balloc+0x66>
 8005c0a:	bf00      	nop
 8005c0c:	08007776 	.word	0x08007776
 8005c10:	08007874 	.word	0x08007874

08005c14 <_Bfree>:
 8005c14:	b570      	push	{r4, r5, r6, lr}
 8005c16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005c18:	4605      	mov	r5, r0
 8005c1a:	460c      	mov	r4, r1
 8005c1c:	b976      	cbnz	r6, 8005c3c <_Bfree+0x28>
 8005c1e:	2010      	movs	r0, #16
 8005c20:	f7ff ff82 	bl	8005b28 <malloc>
 8005c24:	4602      	mov	r2, r0
 8005c26:	6268      	str	r0, [r5, #36]	; 0x24
 8005c28:	b920      	cbnz	r0, 8005c34 <_Bfree+0x20>
 8005c2a:	218a      	movs	r1, #138	; 0x8a
 8005c2c:	4b08      	ldr	r3, [pc, #32]	; (8005c50 <_Bfree+0x3c>)
 8005c2e:	4809      	ldr	r0, [pc, #36]	; (8005c54 <_Bfree+0x40>)
 8005c30:	f000 feec 	bl	8006a0c <__assert_func>
 8005c34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c38:	6006      	str	r6, [r0, #0]
 8005c3a:	60c6      	str	r6, [r0, #12]
 8005c3c:	b13c      	cbz	r4, 8005c4e <_Bfree+0x3a>
 8005c3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005c40:	6862      	ldr	r2, [r4, #4]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c48:	6021      	str	r1, [r4, #0]
 8005c4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005c4e:	bd70      	pop	{r4, r5, r6, pc}
 8005c50:	08007776 	.word	0x08007776
 8005c54:	08007874 	.word	0x08007874

08005c58 <__multadd>:
 8005c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c5c:	4607      	mov	r7, r0
 8005c5e:	460c      	mov	r4, r1
 8005c60:	461e      	mov	r6, r3
 8005c62:	2000      	movs	r0, #0
 8005c64:	690d      	ldr	r5, [r1, #16]
 8005c66:	f101 0c14 	add.w	ip, r1, #20
 8005c6a:	f8dc 3000 	ldr.w	r3, [ip]
 8005c6e:	3001      	adds	r0, #1
 8005c70:	b299      	uxth	r1, r3
 8005c72:	fb02 6101 	mla	r1, r2, r1, r6
 8005c76:	0c1e      	lsrs	r6, r3, #16
 8005c78:	0c0b      	lsrs	r3, r1, #16
 8005c7a:	fb02 3306 	mla	r3, r2, r6, r3
 8005c7e:	b289      	uxth	r1, r1
 8005c80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005c84:	4285      	cmp	r5, r0
 8005c86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005c8a:	f84c 1b04 	str.w	r1, [ip], #4
 8005c8e:	dcec      	bgt.n	8005c6a <__multadd+0x12>
 8005c90:	b30e      	cbz	r6, 8005cd6 <__multadd+0x7e>
 8005c92:	68a3      	ldr	r3, [r4, #8]
 8005c94:	42ab      	cmp	r3, r5
 8005c96:	dc19      	bgt.n	8005ccc <__multadd+0x74>
 8005c98:	6861      	ldr	r1, [r4, #4]
 8005c9a:	4638      	mov	r0, r7
 8005c9c:	3101      	adds	r1, #1
 8005c9e:	f7ff ff79 	bl	8005b94 <_Balloc>
 8005ca2:	4680      	mov	r8, r0
 8005ca4:	b928      	cbnz	r0, 8005cb2 <__multadd+0x5a>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	21b5      	movs	r1, #181	; 0xb5
 8005caa:	4b0c      	ldr	r3, [pc, #48]	; (8005cdc <__multadd+0x84>)
 8005cac:	480c      	ldr	r0, [pc, #48]	; (8005ce0 <__multadd+0x88>)
 8005cae:	f000 fead 	bl	8006a0c <__assert_func>
 8005cb2:	6922      	ldr	r2, [r4, #16]
 8005cb4:	f104 010c 	add.w	r1, r4, #12
 8005cb8:	3202      	adds	r2, #2
 8005cba:	0092      	lsls	r2, r2, #2
 8005cbc:	300c      	adds	r0, #12
 8005cbe:	f7ff ff5b 	bl	8005b78 <memcpy>
 8005cc2:	4621      	mov	r1, r4
 8005cc4:	4638      	mov	r0, r7
 8005cc6:	f7ff ffa5 	bl	8005c14 <_Bfree>
 8005cca:	4644      	mov	r4, r8
 8005ccc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005cd0:	3501      	adds	r5, #1
 8005cd2:	615e      	str	r6, [r3, #20]
 8005cd4:	6125      	str	r5, [r4, #16]
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cdc:	080077e8 	.word	0x080077e8
 8005ce0:	08007874 	.word	0x08007874

08005ce4 <__s2b>:
 8005ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ce8:	4615      	mov	r5, r2
 8005cea:	2209      	movs	r2, #9
 8005cec:	461f      	mov	r7, r3
 8005cee:	3308      	adds	r3, #8
 8005cf0:	460c      	mov	r4, r1
 8005cf2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cf6:	4606      	mov	r6, r0
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	db09      	blt.n	8005d14 <__s2b+0x30>
 8005d00:	4630      	mov	r0, r6
 8005d02:	f7ff ff47 	bl	8005b94 <_Balloc>
 8005d06:	b940      	cbnz	r0, 8005d1a <__s2b+0x36>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	21ce      	movs	r1, #206	; 0xce
 8005d0c:	4b18      	ldr	r3, [pc, #96]	; (8005d70 <__s2b+0x8c>)
 8005d0e:	4819      	ldr	r0, [pc, #100]	; (8005d74 <__s2b+0x90>)
 8005d10:	f000 fe7c 	bl	8006a0c <__assert_func>
 8005d14:	0052      	lsls	r2, r2, #1
 8005d16:	3101      	adds	r1, #1
 8005d18:	e7f0      	b.n	8005cfc <__s2b+0x18>
 8005d1a:	9b08      	ldr	r3, [sp, #32]
 8005d1c:	2d09      	cmp	r5, #9
 8005d1e:	6143      	str	r3, [r0, #20]
 8005d20:	f04f 0301 	mov.w	r3, #1
 8005d24:	6103      	str	r3, [r0, #16]
 8005d26:	dd16      	ble.n	8005d56 <__s2b+0x72>
 8005d28:	f104 0909 	add.w	r9, r4, #9
 8005d2c:	46c8      	mov	r8, r9
 8005d2e:	442c      	add	r4, r5
 8005d30:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005d34:	4601      	mov	r1, r0
 8005d36:	220a      	movs	r2, #10
 8005d38:	4630      	mov	r0, r6
 8005d3a:	3b30      	subs	r3, #48	; 0x30
 8005d3c:	f7ff ff8c 	bl	8005c58 <__multadd>
 8005d40:	45a0      	cmp	r8, r4
 8005d42:	d1f5      	bne.n	8005d30 <__s2b+0x4c>
 8005d44:	f1a5 0408 	sub.w	r4, r5, #8
 8005d48:	444c      	add	r4, r9
 8005d4a:	1b2d      	subs	r5, r5, r4
 8005d4c:	1963      	adds	r3, r4, r5
 8005d4e:	42bb      	cmp	r3, r7
 8005d50:	db04      	blt.n	8005d5c <__s2b+0x78>
 8005d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d56:	2509      	movs	r5, #9
 8005d58:	340a      	adds	r4, #10
 8005d5a:	e7f6      	b.n	8005d4a <__s2b+0x66>
 8005d5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005d60:	4601      	mov	r1, r0
 8005d62:	220a      	movs	r2, #10
 8005d64:	4630      	mov	r0, r6
 8005d66:	3b30      	subs	r3, #48	; 0x30
 8005d68:	f7ff ff76 	bl	8005c58 <__multadd>
 8005d6c:	e7ee      	b.n	8005d4c <__s2b+0x68>
 8005d6e:	bf00      	nop
 8005d70:	080077e8 	.word	0x080077e8
 8005d74:	08007874 	.word	0x08007874

08005d78 <__hi0bits>:
 8005d78:	0c02      	lsrs	r2, r0, #16
 8005d7a:	0412      	lsls	r2, r2, #16
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	b9ca      	cbnz	r2, 8005db4 <__hi0bits+0x3c>
 8005d80:	0403      	lsls	r3, r0, #16
 8005d82:	2010      	movs	r0, #16
 8005d84:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005d88:	bf04      	itt	eq
 8005d8a:	021b      	lsleq	r3, r3, #8
 8005d8c:	3008      	addeq	r0, #8
 8005d8e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005d92:	bf04      	itt	eq
 8005d94:	011b      	lsleq	r3, r3, #4
 8005d96:	3004      	addeq	r0, #4
 8005d98:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005d9c:	bf04      	itt	eq
 8005d9e:	009b      	lsleq	r3, r3, #2
 8005da0:	3002      	addeq	r0, #2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	db05      	blt.n	8005db2 <__hi0bits+0x3a>
 8005da6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005daa:	f100 0001 	add.w	r0, r0, #1
 8005dae:	bf08      	it	eq
 8005db0:	2020      	moveq	r0, #32
 8005db2:	4770      	bx	lr
 8005db4:	2000      	movs	r0, #0
 8005db6:	e7e5      	b.n	8005d84 <__hi0bits+0xc>

08005db8 <__lo0bits>:
 8005db8:	6803      	ldr	r3, [r0, #0]
 8005dba:	4602      	mov	r2, r0
 8005dbc:	f013 0007 	ands.w	r0, r3, #7
 8005dc0:	d00b      	beq.n	8005dda <__lo0bits+0x22>
 8005dc2:	07d9      	lsls	r1, r3, #31
 8005dc4:	d421      	bmi.n	8005e0a <__lo0bits+0x52>
 8005dc6:	0798      	lsls	r0, r3, #30
 8005dc8:	bf49      	itett	mi
 8005dca:	085b      	lsrmi	r3, r3, #1
 8005dcc:	089b      	lsrpl	r3, r3, #2
 8005dce:	2001      	movmi	r0, #1
 8005dd0:	6013      	strmi	r3, [r2, #0]
 8005dd2:	bf5c      	itt	pl
 8005dd4:	2002      	movpl	r0, #2
 8005dd6:	6013      	strpl	r3, [r2, #0]
 8005dd8:	4770      	bx	lr
 8005dda:	b299      	uxth	r1, r3
 8005ddc:	b909      	cbnz	r1, 8005de2 <__lo0bits+0x2a>
 8005dde:	2010      	movs	r0, #16
 8005de0:	0c1b      	lsrs	r3, r3, #16
 8005de2:	b2d9      	uxtb	r1, r3
 8005de4:	b909      	cbnz	r1, 8005dea <__lo0bits+0x32>
 8005de6:	3008      	adds	r0, #8
 8005de8:	0a1b      	lsrs	r3, r3, #8
 8005dea:	0719      	lsls	r1, r3, #28
 8005dec:	bf04      	itt	eq
 8005dee:	091b      	lsreq	r3, r3, #4
 8005df0:	3004      	addeq	r0, #4
 8005df2:	0799      	lsls	r1, r3, #30
 8005df4:	bf04      	itt	eq
 8005df6:	089b      	lsreq	r3, r3, #2
 8005df8:	3002      	addeq	r0, #2
 8005dfa:	07d9      	lsls	r1, r3, #31
 8005dfc:	d403      	bmi.n	8005e06 <__lo0bits+0x4e>
 8005dfe:	085b      	lsrs	r3, r3, #1
 8005e00:	f100 0001 	add.w	r0, r0, #1
 8005e04:	d003      	beq.n	8005e0e <__lo0bits+0x56>
 8005e06:	6013      	str	r3, [r2, #0]
 8005e08:	4770      	bx	lr
 8005e0a:	2000      	movs	r0, #0
 8005e0c:	4770      	bx	lr
 8005e0e:	2020      	movs	r0, #32
 8005e10:	4770      	bx	lr
	...

08005e14 <__i2b>:
 8005e14:	b510      	push	{r4, lr}
 8005e16:	460c      	mov	r4, r1
 8005e18:	2101      	movs	r1, #1
 8005e1a:	f7ff febb 	bl	8005b94 <_Balloc>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	b928      	cbnz	r0, 8005e2e <__i2b+0x1a>
 8005e22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005e26:	4b04      	ldr	r3, [pc, #16]	; (8005e38 <__i2b+0x24>)
 8005e28:	4804      	ldr	r0, [pc, #16]	; (8005e3c <__i2b+0x28>)
 8005e2a:	f000 fdef 	bl	8006a0c <__assert_func>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	6144      	str	r4, [r0, #20]
 8005e32:	6103      	str	r3, [r0, #16]
 8005e34:	bd10      	pop	{r4, pc}
 8005e36:	bf00      	nop
 8005e38:	080077e8 	.word	0x080077e8
 8005e3c:	08007874 	.word	0x08007874

08005e40 <__multiply>:
 8005e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e44:	4691      	mov	r9, r2
 8005e46:	690a      	ldr	r2, [r1, #16]
 8005e48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005e4c:	460c      	mov	r4, r1
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	bfbe      	ittt	lt
 8005e52:	460b      	movlt	r3, r1
 8005e54:	464c      	movlt	r4, r9
 8005e56:	4699      	movlt	r9, r3
 8005e58:	6927      	ldr	r7, [r4, #16]
 8005e5a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005e5e:	68a3      	ldr	r3, [r4, #8]
 8005e60:	6861      	ldr	r1, [r4, #4]
 8005e62:	eb07 060a 	add.w	r6, r7, sl
 8005e66:	42b3      	cmp	r3, r6
 8005e68:	b085      	sub	sp, #20
 8005e6a:	bfb8      	it	lt
 8005e6c:	3101      	addlt	r1, #1
 8005e6e:	f7ff fe91 	bl	8005b94 <_Balloc>
 8005e72:	b930      	cbnz	r0, 8005e82 <__multiply+0x42>
 8005e74:	4602      	mov	r2, r0
 8005e76:	f240 115d 	movw	r1, #349	; 0x15d
 8005e7a:	4b43      	ldr	r3, [pc, #268]	; (8005f88 <__multiply+0x148>)
 8005e7c:	4843      	ldr	r0, [pc, #268]	; (8005f8c <__multiply+0x14c>)
 8005e7e:	f000 fdc5 	bl	8006a0c <__assert_func>
 8005e82:	f100 0514 	add.w	r5, r0, #20
 8005e86:	462b      	mov	r3, r5
 8005e88:	2200      	movs	r2, #0
 8005e8a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005e8e:	4543      	cmp	r3, r8
 8005e90:	d321      	bcc.n	8005ed6 <__multiply+0x96>
 8005e92:	f104 0314 	add.w	r3, r4, #20
 8005e96:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005e9a:	f109 0314 	add.w	r3, r9, #20
 8005e9e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005ea2:	9202      	str	r2, [sp, #8]
 8005ea4:	1b3a      	subs	r2, r7, r4
 8005ea6:	3a15      	subs	r2, #21
 8005ea8:	f022 0203 	bic.w	r2, r2, #3
 8005eac:	3204      	adds	r2, #4
 8005eae:	f104 0115 	add.w	r1, r4, #21
 8005eb2:	428f      	cmp	r7, r1
 8005eb4:	bf38      	it	cc
 8005eb6:	2204      	movcc	r2, #4
 8005eb8:	9201      	str	r2, [sp, #4]
 8005eba:	9a02      	ldr	r2, [sp, #8]
 8005ebc:	9303      	str	r3, [sp, #12]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d80c      	bhi.n	8005edc <__multiply+0x9c>
 8005ec2:	2e00      	cmp	r6, #0
 8005ec4:	dd03      	ble.n	8005ece <__multiply+0x8e>
 8005ec6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d059      	beq.n	8005f82 <__multiply+0x142>
 8005ece:	6106      	str	r6, [r0, #16]
 8005ed0:	b005      	add	sp, #20
 8005ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ed6:	f843 2b04 	str.w	r2, [r3], #4
 8005eda:	e7d8      	b.n	8005e8e <__multiply+0x4e>
 8005edc:	f8b3 a000 	ldrh.w	sl, [r3]
 8005ee0:	f1ba 0f00 	cmp.w	sl, #0
 8005ee4:	d023      	beq.n	8005f2e <__multiply+0xee>
 8005ee6:	46a9      	mov	r9, r5
 8005ee8:	f04f 0c00 	mov.w	ip, #0
 8005eec:	f104 0e14 	add.w	lr, r4, #20
 8005ef0:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005ef4:	f8d9 1000 	ldr.w	r1, [r9]
 8005ef8:	fa1f fb82 	uxth.w	fp, r2
 8005efc:	b289      	uxth	r1, r1
 8005efe:	fb0a 110b 	mla	r1, sl, fp, r1
 8005f02:	4461      	add	r1, ip
 8005f04:	f8d9 c000 	ldr.w	ip, [r9]
 8005f08:	0c12      	lsrs	r2, r2, #16
 8005f0a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005f0e:	fb0a c202 	mla	r2, sl, r2, ip
 8005f12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005f16:	b289      	uxth	r1, r1
 8005f18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005f1c:	4577      	cmp	r7, lr
 8005f1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005f22:	f849 1b04 	str.w	r1, [r9], #4
 8005f26:	d8e3      	bhi.n	8005ef0 <__multiply+0xb0>
 8005f28:	9a01      	ldr	r2, [sp, #4]
 8005f2a:	f845 c002 	str.w	ip, [r5, r2]
 8005f2e:	9a03      	ldr	r2, [sp, #12]
 8005f30:	3304      	adds	r3, #4
 8005f32:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005f36:	f1b9 0f00 	cmp.w	r9, #0
 8005f3a:	d020      	beq.n	8005f7e <__multiply+0x13e>
 8005f3c:	46ae      	mov	lr, r5
 8005f3e:	f04f 0a00 	mov.w	sl, #0
 8005f42:	6829      	ldr	r1, [r5, #0]
 8005f44:	f104 0c14 	add.w	ip, r4, #20
 8005f48:	f8bc b000 	ldrh.w	fp, [ip]
 8005f4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005f50:	b289      	uxth	r1, r1
 8005f52:	fb09 220b 	mla	r2, r9, fp, r2
 8005f56:	4492      	add	sl, r2
 8005f58:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005f5c:	f84e 1b04 	str.w	r1, [lr], #4
 8005f60:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005f64:	f8be 1000 	ldrh.w	r1, [lr]
 8005f68:	0c12      	lsrs	r2, r2, #16
 8005f6a:	fb09 1102 	mla	r1, r9, r2, r1
 8005f6e:	4567      	cmp	r7, ip
 8005f70:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005f74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005f78:	d8e6      	bhi.n	8005f48 <__multiply+0x108>
 8005f7a:	9a01      	ldr	r2, [sp, #4]
 8005f7c:	50a9      	str	r1, [r5, r2]
 8005f7e:	3504      	adds	r5, #4
 8005f80:	e79b      	b.n	8005eba <__multiply+0x7a>
 8005f82:	3e01      	subs	r6, #1
 8005f84:	e79d      	b.n	8005ec2 <__multiply+0x82>
 8005f86:	bf00      	nop
 8005f88:	080077e8 	.word	0x080077e8
 8005f8c:	08007874 	.word	0x08007874

08005f90 <__pow5mult>:
 8005f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f94:	4615      	mov	r5, r2
 8005f96:	f012 0203 	ands.w	r2, r2, #3
 8005f9a:	4606      	mov	r6, r0
 8005f9c:	460f      	mov	r7, r1
 8005f9e:	d007      	beq.n	8005fb0 <__pow5mult+0x20>
 8005fa0:	4c25      	ldr	r4, [pc, #148]	; (8006038 <__pow5mult+0xa8>)
 8005fa2:	3a01      	subs	r2, #1
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005faa:	f7ff fe55 	bl	8005c58 <__multadd>
 8005fae:	4607      	mov	r7, r0
 8005fb0:	10ad      	asrs	r5, r5, #2
 8005fb2:	d03d      	beq.n	8006030 <__pow5mult+0xa0>
 8005fb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005fb6:	b97c      	cbnz	r4, 8005fd8 <__pow5mult+0x48>
 8005fb8:	2010      	movs	r0, #16
 8005fba:	f7ff fdb5 	bl	8005b28 <malloc>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	6270      	str	r0, [r6, #36]	; 0x24
 8005fc2:	b928      	cbnz	r0, 8005fd0 <__pow5mult+0x40>
 8005fc4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005fc8:	4b1c      	ldr	r3, [pc, #112]	; (800603c <__pow5mult+0xac>)
 8005fca:	481d      	ldr	r0, [pc, #116]	; (8006040 <__pow5mult+0xb0>)
 8005fcc:	f000 fd1e 	bl	8006a0c <__assert_func>
 8005fd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005fd4:	6004      	str	r4, [r0, #0]
 8005fd6:	60c4      	str	r4, [r0, #12]
 8005fd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005fdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005fe0:	b94c      	cbnz	r4, 8005ff6 <__pow5mult+0x66>
 8005fe2:	f240 2171 	movw	r1, #625	; 0x271
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	f7ff ff14 	bl	8005e14 <__i2b>
 8005fec:	2300      	movs	r3, #0
 8005fee:	4604      	mov	r4, r0
 8005ff0:	f8c8 0008 	str.w	r0, [r8, #8]
 8005ff4:	6003      	str	r3, [r0, #0]
 8005ff6:	f04f 0900 	mov.w	r9, #0
 8005ffa:	07eb      	lsls	r3, r5, #31
 8005ffc:	d50a      	bpl.n	8006014 <__pow5mult+0x84>
 8005ffe:	4639      	mov	r1, r7
 8006000:	4622      	mov	r2, r4
 8006002:	4630      	mov	r0, r6
 8006004:	f7ff ff1c 	bl	8005e40 <__multiply>
 8006008:	4680      	mov	r8, r0
 800600a:	4639      	mov	r1, r7
 800600c:	4630      	mov	r0, r6
 800600e:	f7ff fe01 	bl	8005c14 <_Bfree>
 8006012:	4647      	mov	r7, r8
 8006014:	106d      	asrs	r5, r5, #1
 8006016:	d00b      	beq.n	8006030 <__pow5mult+0xa0>
 8006018:	6820      	ldr	r0, [r4, #0]
 800601a:	b938      	cbnz	r0, 800602c <__pow5mult+0x9c>
 800601c:	4622      	mov	r2, r4
 800601e:	4621      	mov	r1, r4
 8006020:	4630      	mov	r0, r6
 8006022:	f7ff ff0d 	bl	8005e40 <__multiply>
 8006026:	6020      	str	r0, [r4, #0]
 8006028:	f8c0 9000 	str.w	r9, [r0]
 800602c:	4604      	mov	r4, r0
 800602e:	e7e4      	b.n	8005ffa <__pow5mult+0x6a>
 8006030:	4638      	mov	r0, r7
 8006032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006036:	bf00      	nop
 8006038:	080079c0 	.word	0x080079c0
 800603c:	08007776 	.word	0x08007776
 8006040:	08007874 	.word	0x08007874

08006044 <__lshift>:
 8006044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006048:	460c      	mov	r4, r1
 800604a:	4607      	mov	r7, r0
 800604c:	4691      	mov	r9, r2
 800604e:	6923      	ldr	r3, [r4, #16]
 8006050:	6849      	ldr	r1, [r1, #4]
 8006052:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006056:	68a3      	ldr	r3, [r4, #8]
 8006058:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800605c:	f108 0601 	add.w	r6, r8, #1
 8006060:	42b3      	cmp	r3, r6
 8006062:	db0b      	blt.n	800607c <__lshift+0x38>
 8006064:	4638      	mov	r0, r7
 8006066:	f7ff fd95 	bl	8005b94 <_Balloc>
 800606a:	4605      	mov	r5, r0
 800606c:	b948      	cbnz	r0, 8006082 <__lshift+0x3e>
 800606e:	4602      	mov	r2, r0
 8006070:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006074:	4b29      	ldr	r3, [pc, #164]	; (800611c <__lshift+0xd8>)
 8006076:	482a      	ldr	r0, [pc, #168]	; (8006120 <__lshift+0xdc>)
 8006078:	f000 fcc8 	bl	8006a0c <__assert_func>
 800607c:	3101      	adds	r1, #1
 800607e:	005b      	lsls	r3, r3, #1
 8006080:	e7ee      	b.n	8006060 <__lshift+0x1c>
 8006082:	2300      	movs	r3, #0
 8006084:	f100 0114 	add.w	r1, r0, #20
 8006088:	f100 0210 	add.w	r2, r0, #16
 800608c:	4618      	mov	r0, r3
 800608e:	4553      	cmp	r3, sl
 8006090:	db37      	blt.n	8006102 <__lshift+0xbe>
 8006092:	6920      	ldr	r0, [r4, #16]
 8006094:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006098:	f104 0314 	add.w	r3, r4, #20
 800609c:	f019 091f 	ands.w	r9, r9, #31
 80060a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80060a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80060a8:	d02f      	beq.n	800610a <__lshift+0xc6>
 80060aa:	468a      	mov	sl, r1
 80060ac:	f04f 0c00 	mov.w	ip, #0
 80060b0:	f1c9 0e20 	rsb	lr, r9, #32
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	fa02 f209 	lsl.w	r2, r2, r9
 80060ba:	ea42 020c 	orr.w	r2, r2, ip
 80060be:	f84a 2b04 	str.w	r2, [sl], #4
 80060c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80060c6:	4298      	cmp	r0, r3
 80060c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80060cc:	d8f2      	bhi.n	80060b4 <__lshift+0x70>
 80060ce:	1b03      	subs	r3, r0, r4
 80060d0:	3b15      	subs	r3, #21
 80060d2:	f023 0303 	bic.w	r3, r3, #3
 80060d6:	3304      	adds	r3, #4
 80060d8:	f104 0215 	add.w	r2, r4, #21
 80060dc:	4290      	cmp	r0, r2
 80060de:	bf38      	it	cc
 80060e0:	2304      	movcc	r3, #4
 80060e2:	f841 c003 	str.w	ip, [r1, r3]
 80060e6:	f1bc 0f00 	cmp.w	ip, #0
 80060ea:	d001      	beq.n	80060f0 <__lshift+0xac>
 80060ec:	f108 0602 	add.w	r6, r8, #2
 80060f0:	3e01      	subs	r6, #1
 80060f2:	4638      	mov	r0, r7
 80060f4:	4621      	mov	r1, r4
 80060f6:	612e      	str	r6, [r5, #16]
 80060f8:	f7ff fd8c 	bl	8005c14 <_Bfree>
 80060fc:	4628      	mov	r0, r5
 80060fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006102:	f842 0f04 	str.w	r0, [r2, #4]!
 8006106:	3301      	adds	r3, #1
 8006108:	e7c1      	b.n	800608e <__lshift+0x4a>
 800610a:	3904      	subs	r1, #4
 800610c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006110:	4298      	cmp	r0, r3
 8006112:	f841 2f04 	str.w	r2, [r1, #4]!
 8006116:	d8f9      	bhi.n	800610c <__lshift+0xc8>
 8006118:	e7ea      	b.n	80060f0 <__lshift+0xac>
 800611a:	bf00      	nop
 800611c:	080077e8 	.word	0x080077e8
 8006120:	08007874 	.word	0x08007874

08006124 <__mcmp>:
 8006124:	4603      	mov	r3, r0
 8006126:	690a      	ldr	r2, [r1, #16]
 8006128:	6900      	ldr	r0, [r0, #16]
 800612a:	b530      	push	{r4, r5, lr}
 800612c:	1a80      	subs	r0, r0, r2
 800612e:	d10d      	bne.n	800614c <__mcmp+0x28>
 8006130:	3314      	adds	r3, #20
 8006132:	3114      	adds	r1, #20
 8006134:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006138:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800613c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006140:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006144:	4295      	cmp	r5, r2
 8006146:	d002      	beq.n	800614e <__mcmp+0x2a>
 8006148:	d304      	bcc.n	8006154 <__mcmp+0x30>
 800614a:	2001      	movs	r0, #1
 800614c:	bd30      	pop	{r4, r5, pc}
 800614e:	42a3      	cmp	r3, r4
 8006150:	d3f4      	bcc.n	800613c <__mcmp+0x18>
 8006152:	e7fb      	b.n	800614c <__mcmp+0x28>
 8006154:	f04f 30ff 	mov.w	r0, #4294967295
 8006158:	e7f8      	b.n	800614c <__mcmp+0x28>
	...

0800615c <__mdiff>:
 800615c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006160:	460d      	mov	r5, r1
 8006162:	4607      	mov	r7, r0
 8006164:	4611      	mov	r1, r2
 8006166:	4628      	mov	r0, r5
 8006168:	4614      	mov	r4, r2
 800616a:	f7ff ffdb 	bl	8006124 <__mcmp>
 800616e:	1e06      	subs	r6, r0, #0
 8006170:	d111      	bne.n	8006196 <__mdiff+0x3a>
 8006172:	4631      	mov	r1, r6
 8006174:	4638      	mov	r0, r7
 8006176:	f7ff fd0d 	bl	8005b94 <_Balloc>
 800617a:	4602      	mov	r2, r0
 800617c:	b928      	cbnz	r0, 800618a <__mdiff+0x2e>
 800617e:	f240 2132 	movw	r1, #562	; 0x232
 8006182:	4b3a      	ldr	r3, [pc, #232]	; (800626c <__mdiff+0x110>)
 8006184:	483a      	ldr	r0, [pc, #232]	; (8006270 <__mdiff+0x114>)
 8006186:	f000 fc41 	bl	8006a0c <__assert_func>
 800618a:	2301      	movs	r3, #1
 800618c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006190:	4610      	mov	r0, r2
 8006192:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006196:	bfa4      	itt	ge
 8006198:	4623      	movge	r3, r4
 800619a:	462c      	movge	r4, r5
 800619c:	4638      	mov	r0, r7
 800619e:	6861      	ldr	r1, [r4, #4]
 80061a0:	bfa6      	itte	ge
 80061a2:	461d      	movge	r5, r3
 80061a4:	2600      	movge	r6, #0
 80061a6:	2601      	movlt	r6, #1
 80061a8:	f7ff fcf4 	bl	8005b94 <_Balloc>
 80061ac:	4602      	mov	r2, r0
 80061ae:	b918      	cbnz	r0, 80061b8 <__mdiff+0x5c>
 80061b0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80061b4:	4b2d      	ldr	r3, [pc, #180]	; (800626c <__mdiff+0x110>)
 80061b6:	e7e5      	b.n	8006184 <__mdiff+0x28>
 80061b8:	f102 0814 	add.w	r8, r2, #20
 80061bc:	46c2      	mov	sl, r8
 80061be:	f04f 0c00 	mov.w	ip, #0
 80061c2:	6927      	ldr	r7, [r4, #16]
 80061c4:	60c6      	str	r6, [r0, #12]
 80061c6:	692e      	ldr	r6, [r5, #16]
 80061c8:	f104 0014 	add.w	r0, r4, #20
 80061cc:	f105 0914 	add.w	r9, r5, #20
 80061d0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80061d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80061d8:	3410      	adds	r4, #16
 80061da:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80061de:	f859 3b04 	ldr.w	r3, [r9], #4
 80061e2:	fa1f f18b 	uxth.w	r1, fp
 80061e6:	448c      	add	ip, r1
 80061e8:	b299      	uxth	r1, r3
 80061ea:	0c1b      	lsrs	r3, r3, #16
 80061ec:	ebac 0101 	sub.w	r1, ip, r1
 80061f0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80061f4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80061f8:	b289      	uxth	r1, r1
 80061fa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80061fe:	454e      	cmp	r6, r9
 8006200:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006204:	f84a 3b04 	str.w	r3, [sl], #4
 8006208:	d8e7      	bhi.n	80061da <__mdiff+0x7e>
 800620a:	1b73      	subs	r3, r6, r5
 800620c:	3b15      	subs	r3, #21
 800620e:	f023 0303 	bic.w	r3, r3, #3
 8006212:	3515      	adds	r5, #21
 8006214:	3304      	adds	r3, #4
 8006216:	42ae      	cmp	r6, r5
 8006218:	bf38      	it	cc
 800621a:	2304      	movcc	r3, #4
 800621c:	4418      	add	r0, r3
 800621e:	4443      	add	r3, r8
 8006220:	461e      	mov	r6, r3
 8006222:	4605      	mov	r5, r0
 8006224:	4575      	cmp	r5, lr
 8006226:	d30e      	bcc.n	8006246 <__mdiff+0xea>
 8006228:	f10e 0103 	add.w	r1, lr, #3
 800622c:	1a09      	subs	r1, r1, r0
 800622e:	f021 0103 	bic.w	r1, r1, #3
 8006232:	3803      	subs	r0, #3
 8006234:	4586      	cmp	lr, r0
 8006236:	bf38      	it	cc
 8006238:	2100      	movcc	r1, #0
 800623a:	4419      	add	r1, r3
 800623c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006240:	b18b      	cbz	r3, 8006266 <__mdiff+0x10a>
 8006242:	6117      	str	r7, [r2, #16]
 8006244:	e7a4      	b.n	8006190 <__mdiff+0x34>
 8006246:	f855 8b04 	ldr.w	r8, [r5], #4
 800624a:	fa1f f188 	uxth.w	r1, r8
 800624e:	4461      	add	r1, ip
 8006250:	140c      	asrs	r4, r1, #16
 8006252:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006256:	b289      	uxth	r1, r1
 8006258:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800625c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006260:	f846 1b04 	str.w	r1, [r6], #4
 8006264:	e7de      	b.n	8006224 <__mdiff+0xc8>
 8006266:	3f01      	subs	r7, #1
 8006268:	e7e8      	b.n	800623c <__mdiff+0xe0>
 800626a:	bf00      	nop
 800626c:	080077e8 	.word	0x080077e8
 8006270:	08007874 	.word	0x08007874

08006274 <__ulp>:
 8006274:	4b11      	ldr	r3, [pc, #68]	; (80062bc <__ulp+0x48>)
 8006276:	400b      	ands	r3, r1
 8006278:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800627c:	2b00      	cmp	r3, #0
 800627e:	dd02      	ble.n	8006286 <__ulp+0x12>
 8006280:	2000      	movs	r0, #0
 8006282:	4619      	mov	r1, r3
 8006284:	4770      	bx	lr
 8006286:	425b      	negs	r3, r3
 8006288:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800628c:	f04f 0000 	mov.w	r0, #0
 8006290:	f04f 0100 	mov.w	r1, #0
 8006294:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006298:	da04      	bge.n	80062a4 <__ulp+0x30>
 800629a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800629e:	fa43 f102 	asr.w	r1, r3, r2
 80062a2:	4770      	bx	lr
 80062a4:	f1a2 0314 	sub.w	r3, r2, #20
 80062a8:	2b1e      	cmp	r3, #30
 80062aa:	bfd6      	itet	le
 80062ac:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80062b0:	2301      	movgt	r3, #1
 80062b2:	fa22 f303 	lsrle.w	r3, r2, r3
 80062b6:	4618      	mov	r0, r3
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	7ff00000 	.word	0x7ff00000

080062c0 <__b2d>:
 80062c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062c4:	6907      	ldr	r7, [r0, #16]
 80062c6:	f100 0914 	add.w	r9, r0, #20
 80062ca:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80062ce:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80062d2:	f1a7 0804 	sub.w	r8, r7, #4
 80062d6:	4630      	mov	r0, r6
 80062d8:	f7ff fd4e 	bl	8005d78 <__hi0bits>
 80062dc:	f1c0 0320 	rsb	r3, r0, #32
 80062e0:	280a      	cmp	r0, #10
 80062e2:	600b      	str	r3, [r1, #0]
 80062e4:	491f      	ldr	r1, [pc, #124]	; (8006364 <__b2d+0xa4>)
 80062e6:	dc17      	bgt.n	8006318 <__b2d+0x58>
 80062e8:	45c1      	cmp	r9, r8
 80062ea:	bf28      	it	cs
 80062ec:	2200      	movcs	r2, #0
 80062ee:	f1c0 0c0b 	rsb	ip, r0, #11
 80062f2:	fa26 f30c 	lsr.w	r3, r6, ip
 80062f6:	bf38      	it	cc
 80062f8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80062fc:	ea43 0501 	orr.w	r5, r3, r1
 8006300:	f100 0315 	add.w	r3, r0, #21
 8006304:	fa06 f303 	lsl.w	r3, r6, r3
 8006308:	fa22 f20c 	lsr.w	r2, r2, ip
 800630c:	ea43 0402 	orr.w	r4, r3, r2
 8006310:	4620      	mov	r0, r4
 8006312:	4629      	mov	r1, r5
 8006314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006318:	45c1      	cmp	r9, r8
 800631a:	bf2e      	itee	cs
 800631c:	2200      	movcs	r2, #0
 800631e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006322:	f1a7 0808 	subcc.w	r8, r7, #8
 8006326:	f1b0 030b 	subs.w	r3, r0, #11
 800632a:	d016      	beq.n	800635a <__b2d+0x9a>
 800632c:	f1c3 0720 	rsb	r7, r3, #32
 8006330:	fa22 f107 	lsr.w	r1, r2, r7
 8006334:	45c8      	cmp	r8, r9
 8006336:	fa06 f603 	lsl.w	r6, r6, r3
 800633a:	ea46 0601 	orr.w	r6, r6, r1
 800633e:	bf94      	ite	ls
 8006340:	2100      	movls	r1, #0
 8006342:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006346:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800634a:	fa02 f003 	lsl.w	r0, r2, r3
 800634e:	40f9      	lsrs	r1, r7
 8006350:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006354:	ea40 0401 	orr.w	r4, r0, r1
 8006358:	e7da      	b.n	8006310 <__b2d+0x50>
 800635a:	4614      	mov	r4, r2
 800635c:	ea46 0501 	orr.w	r5, r6, r1
 8006360:	e7d6      	b.n	8006310 <__b2d+0x50>
 8006362:	bf00      	nop
 8006364:	3ff00000 	.word	0x3ff00000

08006368 <__d2b>:
 8006368:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800636c:	2101      	movs	r1, #1
 800636e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006372:	4690      	mov	r8, r2
 8006374:	461d      	mov	r5, r3
 8006376:	f7ff fc0d 	bl	8005b94 <_Balloc>
 800637a:	4604      	mov	r4, r0
 800637c:	b930      	cbnz	r0, 800638c <__d2b+0x24>
 800637e:	4602      	mov	r2, r0
 8006380:	f240 310a 	movw	r1, #778	; 0x30a
 8006384:	4b24      	ldr	r3, [pc, #144]	; (8006418 <__d2b+0xb0>)
 8006386:	4825      	ldr	r0, [pc, #148]	; (800641c <__d2b+0xb4>)
 8006388:	f000 fb40 	bl	8006a0c <__assert_func>
 800638c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006390:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006394:	bb2d      	cbnz	r5, 80063e2 <__d2b+0x7a>
 8006396:	9301      	str	r3, [sp, #4]
 8006398:	f1b8 0300 	subs.w	r3, r8, #0
 800639c:	d026      	beq.n	80063ec <__d2b+0x84>
 800639e:	4668      	mov	r0, sp
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	f7ff fd09 	bl	8005db8 <__lo0bits>
 80063a6:	9900      	ldr	r1, [sp, #0]
 80063a8:	b1f0      	cbz	r0, 80063e8 <__d2b+0x80>
 80063aa:	9a01      	ldr	r2, [sp, #4]
 80063ac:	f1c0 0320 	rsb	r3, r0, #32
 80063b0:	fa02 f303 	lsl.w	r3, r2, r3
 80063b4:	430b      	orrs	r3, r1
 80063b6:	40c2      	lsrs	r2, r0
 80063b8:	6163      	str	r3, [r4, #20]
 80063ba:	9201      	str	r2, [sp, #4]
 80063bc:	9b01      	ldr	r3, [sp, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	bf14      	ite	ne
 80063c2:	2102      	movne	r1, #2
 80063c4:	2101      	moveq	r1, #1
 80063c6:	61a3      	str	r3, [r4, #24]
 80063c8:	6121      	str	r1, [r4, #16]
 80063ca:	b1c5      	cbz	r5, 80063fe <__d2b+0x96>
 80063cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80063d0:	4405      	add	r5, r0
 80063d2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80063d6:	603d      	str	r5, [r7, #0]
 80063d8:	6030      	str	r0, [r6, #0]
 80063da:	4620      	mov	r0, r4
 80063dc:	b002      	add	sp, #8
 80063de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063e6:	e7d6      	b.n	8006396 <__d2b+0x2e>
 80063e8:	6161      	str	r1, [r4, #20]
 80063ea:	e7e7      	b.n	80063bc <__d2b+0x54>
 80063ec:	a801      	add	r0, sp, #4
 80063ee:	f7ff fce3 	bl	8005db8 <__lo0bits>
 80063f2:	2101      	movs	r1, #1
 80063f4:	9b01      	ldr	r3, [sp, #4]
 80063f6:	6121      	str	r1, [r4, #16]
 80063f8:	6163      	str	r3, [r4, #20]
 80063fa:	3020      	adds	r0, #32
 80063fc:	e7e5      	b.n	80063ca <__d2b+0x62>
 80063fe:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006402:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006406:	6038      	str	r0, [r7, #0]
 8006408:	6918      	ldr	r0, [r3, #16]
 800640a:	f7ff fcb5 	bl	8005d78 <__hi0bits>
 800640e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006412:	6031      	str	r1, [r6, #0]
 8006414:	e7e1      	b.n	80063da <__d2b+0x72>
 8006416:	bf00      	nop
 8006418:	080077e8 	.word	0x080077e8
 800641c:	08007874 	.word	0x08007874

08006420 <__ratio>:
 8006420:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006424:	4688      	mov	r8, r1
 8006426:	4669      	mov	r1, sp
 8006428:	4681      	mov	r9, r0
 800642a:	f7ff ff49 	bl	80062c0 <__b2d>
 800642e:	460f      	mov	r7, r1
 8006430:	4604      	mov	r4, r0
 8006432:	460d      	mov	r5, r1
 8006434:	4640      	mov	r0, r8
 8006436:	a901      	add	r1, sp, #4
 8006438:	f7ff ff42 	bl	80062c0 <__b2d>
 800643c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006440:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006444:	468b      	mov	fp, r1
 8006446:	eba3 0c02 	sub.w	ip, r3, r2
 800644a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800644e:	1a9b      	subs	r3, r3, r2
 8006450:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006454:	2b00      	cmp	r3, #0
 8006456:	bfd5      	itete	le
 8006458:	460a      	movle	r2, r1
 800645a:	462a      	movgt	r2, r5
 800645c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006460:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006464:	bfd8      	it	le
 8006466:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800646a:	465b      	mov	r3, fp
 800646c:	4602      	mov	r2, r0
 800646e:	4639      	mov	r1, r7
 8006470:	4620      	mov	r0, r4
 8006472:	f7fa f95b 	bl	800072c <__aeabi_ddiv>
 8006476:	b003      	add	sp, #12
 8006478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800647c <__copybits>:
 800647c:	3901      	subs	r1, #1
 800647e:	b570      	push	{r4, r5, r6, lr}
 8006480:	1149      	asrs	r1, r1, #5
 8006482:	6914      	ldr	r4, [r2, #16]
 8006484:	3101      	adds	r1, #1
 8006486:	f102 0314 	add.w	r3, r2, #20
 800648a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800648e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006492:	1f05      	subs	r5, r0, #4
 8006494:	42a3      	cmp	r3, r4
 8006496:	d30c      	bcc.n	80064b2 <__copybits+0x36>
 8006498:	1aa3      	subs	r3, r4, r2
 800649a:	3b11      	subs	r3, #17
 800649c:	f023 0303 	bic.w	r3, r3, #3
 80064a0:	3211      	adds	r2, #17
 80064a2:	42a2      	cmp	r2, r4
 80064a4:	bf88      	it	hi
 80064a6:	2300      	movhi	r3, #0
 80064a8:	4418      	add	r0, r3
 80064aa:	2300      	movs	r3, #0
 80064ac:	4288      	cmp	r0, r1
 80064ae:	d305      	bcc.n	80064bc <__copybits+0x40>
 80064b0:	bd70      	pop	{r4, r5, r6, pc}
 80064b2:	f853 6b04 	ldr.w	r6, [r3], #4
 80064b6:	f845 6f04 	str.w	r6, [r5, #4]!
 80064ba:	e7eb      	b.n	8006494 <__copybits+0x18>
 80064bc:	f840 3b04 	str.w	r3, [r0], #4
 80064c0:	e7f4      	b.n	80064ac <__copybits+0x30>

080064c2 <__any_on>:
 80064c2:	f100 0214 	add.w	r2, r0, #20
 80064c6:	6900      	ldr	r0, [r0, #16]
 80064c8:	114b      	asrs	r3, r1, #5
 80064ca:	4298      	cmp	r0, r3
 80064cc:	b510      	push	{r4, lr}
 80064ce:	db11      	blt.n	80064f4 <__any_on+0x32>
 80064d0:	dd0a      	ble.n	80064e8 <__any_on+0x26>
 80064d2:	f011 011f 	ands.w	r1, r1, #31
 80064d6:	d007      	beq.n	80064e8 <__any_on+0x26>
 80064d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80064dc:	fa24 f001 	lsr.w	r0, r4, r1
 80064e0:	fa00 f101 	lsl.w	r1, r0, r1
 80064e4:	428c      	cmp	r4, r1
 80064e6:	d10b      	bne.n	8006500 <__any_on+0x3e>
 80064e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d803      	bhi.n	80064f8 <__any_on+0x36>
 80064f0:	2000      	movs	r0, #0
 80064f2:	bd10      	pop	{r4, pc}
 80064f4:	4603      	mov	r3, r0
 80064f6:	e7f7      	b.n	80064e8 <__any_on+0x26>
 80064f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80064fc:	2900      	cmp	r1, #0
 80064fe:	d0f5      	beq.n	80064ec <__any_on+0x2a>
 8006500:	2001      	movs	r0, #1
 8006502:	e7f6      	b.n	80064f2 <__any_on+0x30>

08006504 <_calloc_r>:
 8006504:	b570      	push	{r4, r5, r6, lr}
 8006506:	fba1 5402 	umull	r5, r4, r1, r2
 800650a:	b934      	cbnz	r4, 800651a <_calloc_r+0x16>
 800650c:	4629      	mov	r1, r5
 800650e:	f000 f875 	bl	80065fc <_malloc_r>
 8006512:	4606      	mov	r6, r0
 8006514:	b928      	cbnz	r0, 8006522 <_calloc_r+0x1e>
 8006516:	4630      	mov	r0, r6
 8006518:	bd70      	pop	{r4, r5, r6, pc}
 800651a:	220c      	movs	r2, #12
 800651c:	2600      	movs	r6, #0
 800651e:	6002      	str	r2, [r0, #0]
 8006520:	e7f9      	b.n	8006516 <_calloc_r+0x12>
 8006522:	462a      	mov	r2, r5
 8006524:	4621      	mov	r1, r4
 8006526:	f7fc fbf1 	bl	8002d0c <memset>
 800652a:	e7f4      	b.n	8006516 <_calloc_r+0x12>

0800652c <_free_r>:
 800652c:	b538      	push	{r3, r4, r5, lr}
 800652e:	4605      	mov	r5, r0
 8006530:	2900      	cmp	r1, #0
 8006532:	d040      	beq.n	80065b6 <_free_r+0x8a>
 8006534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006538:	1f0c      	subs	r4, r1, #4
 800653a:	2b00      	cmp	r3, #0
 800653c:	bfb8      	it	lt
 800653e:	18e4      	addlt	r4, r4, r3
 8006540:	f000 faae 	bl	8006aa0 <__malloc_lock>
 8006544:	4a1c      	ldr	r2, [pc, #112]	; (80065b8 <_free_r+0x8c>)
 8006546:	6813      	ldr	r3, [r2, #0]
 8006548:	b933      	cbnz	r3, 8006558 <_free_r+0x2c>
 800654a:	6063      	str	r3, [r4, #4]
 800654c:	6014      	str	r4, [r2, #0]
 800654e:	4628      	mov	r0, r5
 8006550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006554:	f000 baaa 	b.w	8006aac <__malloc_unlock>
 8006558:	42a3      	cmp	r3, r4
 800655a:	d908      	bls.n	800656e <_free_r+0x42>
 800655c:	6820      	ldr	r0, [r4, #0]
 800655e:	1821      	adds	r1, r4, r0
 8006560:	428b      	cmp	r3, r1
 8006562:	bf01      	itttt	eq
 8006564:	6819      	ldreq	r1, [r3, #0]
 8006566:	685b      	ldreq	r3, [r3, #4]
 8006568:	1809      	addeq	r1, r1, r0
 800656a:	6021      	streq	r1, [r4, #0]
 800656c:	e7ed      	b.n	800654a <_free_r+0x1e>
 800656e:	461a      	mov	r2, r3
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	b10b      	cbz	r3, 8006578 <_free_r+0x4c>
 8006574:	42a3      	cmp	r3, r4
 8006576:	d9fa      	bls.n	800656e <_free_r+0x42>
 8006578:	6811      	ldr	r1, [r2, #0]
 800657a:	1850      	adds	r0, r2, r1
 800657c:	42a0      	cmp	r0, r4
 800657e:	d10b      	bne.n	8006598 <_free_r+0x6c>
 8006580:	6820      	ldr	r0, [r4, #0]
 8006582:	4401      	add	r1, r0
 8006584:	1850      	adds	r0, r2, r1
 8006586:	4283      	cmp	r3, r0
 8006588:	6011      	str	r1, [r2, #0]
 800658a:	d1e0      	bne.n	800654e <_free_r+0x22>
 800658c:	6818      	ldr	r0, [r3, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	4401      	add	r1, r0
 8006592:	6011      	str	r1, [r2, #0]
 8006594:	6053      	str	r3, [r2, #4]
 8006596:	e7da      	b.n	800654e <_free_r+0x22>
 8006598:	d902      	bls.n	80065a0 <_free_r+0x74>
 800659a:	230c      	movs	r3, #12
 800659c:	602b      	str	r3, [r5, #0]
 800659e:	e7d6      	b.n	800654e <_free_r+0x22>
 80065a0:	6820      	ldr	r0, [r4, #0]
 80065a2:	1821      	adds	r1, r4, r0
 80065a4:	428b      	cmp	r3, r1
 80065a6:	bf01      	itttt	eq
 80065a8:	6819      	ldreq	r1, [r3, #0]
 80065aa:	685b      	ldreq	r3, [r3, #4]
 80065ac:	1809      	addeq	r1, r1, r0
 80065ae:	6021      	streq	r1, [r4, #0]
 80065b0:	6063      	str	r3, [r4, #4]
 80065b2:	6054      	str	r4, [r2, #4]
 80065b4:	e7cb      	b.n	800654e <_free_r+0x22>
 80065b6:	bd38      	pop	{r3, r4, r5, pc}
 80065b8:	200002b8 	.word	0x200002b8

080065bc <sbrk_aligned>:
 80065bc:	b570      	push	{r4, r5, r6, lr}
 80065be:	4e0e      	ldr	r6, [pc, #56]	; (80065f8 <sbrk_aligned+0x3c>)
 80065c0:	460c      	mov	r4, r1
 80065c2:	6831      	ldr	r1, [r6, #0]
 80065c4:	4605      	mov	r5, r0
 80065c6:	b911      	cbnz	r1, 80065ce <sbrk_aligned+0x12>
 80065c8:	f000 f9ee 	bl	80069a8 <_sbrk_r>
 80065cc:	6030      	str	r0, [r6, #0]
 80065ce:	4621      	mov	r1, r4
 80065d0:	4628      	mov	r0, r5
 80065d2:	f000 f9e9 	bl	80069a8 <_sbrk_r>
 80065d6:	1c43      	adds	r3, r0, #1
 80065d8:	d00a      	beq.n	80065f0 <sbrk_aligned+0x34>
 80065da:	1cc4      	adds	r4, r0, #3
 80065dc:	f024 0403 	bic.w	r4, r4, #3
 80065e0:	42a0      	cmp	r0, r4
 80065e2:	d007      	beq.n	80065f4 <sbrk_aligned+0x38>
 80065e4:	1a21      	subs	r1, r4, r0
 80065e6:	4628      	mov	r0, r5
 80065e8:	f000 f9de 	bl	80069a8 <_sbrk_r>
 80065ec:	3001      	adds	r0, #1
 80065ee:	d101      	bne.n	80065f4 <sbrk_aligned+0x38>
 80065f0:	f04f 34ff 	mov.w	r4, #4294967295
 80065f4:	4620      	mov	r0, r4
 80065f6:	bd70      	pop	{r4, r5, r6, pc}
 80065f8:	200002bc 	.word	0x200002bc

080065fc <_malloc_r>:
 80065fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006600:	1ccd      	adds	r5, r1, #3
 8006602:	f025 0503 	bic.w	r5, r5, #3
 8006606:	3508      	adds	r5, #8
 8006608:	2d0c      	cmp	r5, #12
 800660a:	bf38      	it	cc
 800660c:	250c      	movcc	r5, #12
 800660e:	2d00      	cmp	r5, #0
 8006610:	4607      	mov	r7, r0
 8006612:	db01      	blt.n	8006618 <_malloc_r+0x1c>
 8006614:	42a9      	cmp	r1, r5
 8006616:	d905      	bls.n	8006624 <_malloc_r+0x28>
 8006618:	230c      	movs	r3, #12
 800661a:	2600      	movs	r6, #0
 800661c:	603b      	str	r3, [r7, #0]
 800661e:	4630      	mov	r0, r6
 8006620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006624:	4e2e      	ldr	r6, [pc, #184]	; (80066e0 <_malloc_r+0xe4>)
 8006626:	f000 fa3b 	bl	8006aa0 <__malloc_lock>
 800662a:	6833      	ldr	r3, [r6, #0]
 800662c:	461c      	mov	r4, r3
 800662e:	bb34      	cbnz	r4, 800667e <_malloc_r+0x82>
 8006630:	4629      	mov	r1, r5
 8006632:	4638      	mov	r0, r7
 8006634:	f7ff ffc2 	bl	80065bc <sbrk_aligned>
 8006638:	1c43      	adds	r3, r0, #1
 800663a:	4604      	mov	r4, r0
 800663c:	d14d      	bne.n	80066da <_malloc_r+0xde>
 800663e:	6834      	ldr	r4, [r6, #0]
 8006640:	4626      	mov	r6, r4
 8006642:	2e00      	cmp	r6, #0
 8006644:	d140      	bne.n	80066c8 <_malloc_r+0xcc>
 8006646:	6823      	ldr	r3, [r4, #0]
 8006648:	4631      	mov	r1, r6
 800664a:	4638      	mov	r0, r7
 800664c:	eb04 0803 	add.w	r8, r4, r3
 8006650:	f000 f9aa 	bl	80069a8 <_sbrk_r>
 8006654:	4580      	cmp	r8, r0
 8006656:	d13a      	bne.n	80066ce <_malloc_r+0xd2>
 8006658:	6821      	ldr	r1, [r4, #0]
 800665a:	3503      	adds	r5, #3
 800665c:	1a6d      	subs	r5, r5, r1
 800665e:	f025 0503 	bic.w	r5, r5, #3
 8006662:	3508      	adds	r5, #8
 8006664:	2d0c      	cmp	r5, #12
 8006666:	bf38      	it	cc
 8006668:	250c      	movcc	r5, #12
 800666a:	4638      	mov	r0, r7
 800666c:	4629      	mov	r1, r5
 800666e:	f7ff ffa5 	bl	80065bc <sbrk_aligned>
 8006672:	3001      	adds	r0, #1
 8006674:	d02b      	beq.n	80066ce <_malloc_r+0xd2>
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	442b      	add	r3, r5
 800667a:	6023      	str	r3, [r4, #0]
 800667c:	e00e      	b.n	800669c <_malloc_r+0xa0>
 800667e:	6822      	ldr	r2, [r4, #0]
 8006680:	1b52      	subs	r2, r2, r5
 8006682:	d41e      	bmi.n	80066c2 <_malloc_r+0xc6>
 8006684:	2a0b      	cmp	r2, #11
 8006686:	d916      	bls.n	80066b6 <_malloc_r+0xba>
 8006688:	1961      	adds	r1, r4, r5
 800668a:	42a3      	cmp	r3, r4
 800668c:	6025      	str	r5, [r4, #0]
 800668e:	bf18      	it	ne
 8006690:	6059      	strne	r1, [r3, #4]
 8006692:	6863      	ldr	r3, [r4, #4]
 8006694:	bf08      	it	eq
 8006696:	6031      	streq	r1, [r6, #0]
 8006698:	5162      	str	r2, [r4, r5]
 800669a:	604b      	str	r3, [r1, #4]
 800669c:	4638      	mov	r0, r7
 800669e:	f104 060b 	add.w	r6, r4, #11
 80066a2:	f000 fa03 	bl	8006aac <__malloc_unlock>
 80066a6:	f026 0607 	bic.w	r6, r6, #7
 80066aa:	1d23      	adds	r3, r4, #4
 80066ac:	1af2      	subs	r2, r6, r3
 80066ae:	d0b6      	beq.n	800661e <_malloc_r+0x22>
 80066b0:	1b9b      	subs	r3, r3, r6
 80066b2:	50a3      	str	r3, [r4, r2]
 80066b4:	e7b3      	b.n	800661e <_malloc_r+0x22>
 80066b6:	6862      	ldr	r2, [r4, #4]
 80066b8:	42a3      	cmp	r3, r4
 80066ba:	bf0c      	ite	eq
 80066bc:	6032      	streq	r2, [r6, #0]
 80066be:	605a      	strne	r2, [r3, #4]
 80066c0:	e7ec      	b.n	800669c <_malloc_r+0xa0>
 80066c2:	4623      	mov	r3, r4
 80066c4:	6864      	ldr	r4, [r4, #4]
 80066c6:	e7b2      	b.n	800662e <_malloc_r+0x32>
 80066c8:	4634      	mov	r4, r6
 80066ca:	6876      	ldr	r6, [r6, #4]
 80066cc:	e7b9      	b.n	8006642 <_malloc_r+0x46>
 80066ce:	230c      	movs	r3, #12
 80066d0:	4638      	mov	r0, r7
 80066d2:	603b      	str	r3, [r7, #0]
 80066d4:	f000 f9ea 	bl	8006aac <__malloc_unlock>
 80066d8:	e7a1      	b.n	800661e <_malloc_r+0x22>
 80066da:	6025      	str	r5, [r4, #0]
 80066dc:	e7de      	b.n	800669c <_malloc_r+0xa0>
 80066de:	bf00      	nop
 80066e0:	200002b8 	.word	0x200002b8

080066e4 <__ssputs_r>:
 80066e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066e8:	688e      	ldr	r6, [r1, #8]
 80066ea:	4682      	mov	sl, r0
 80066ec:	429e      	cmp	r6, r3
 80066ee:	460c      	mov	r4, r1
 80066f0:	4690      	mov	r8, r2
 80066f2:	461f      	mov	r7, r3
 80066f4:	d838      	bhi.n	8006768 <__ssputs_r+0x84>
 80066f6:	898a      	ldrh	r2, [r1, #12]
 80066f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80066fc:	d032      	beq.n	8006764 <__ssputs_r+0x80>
 80066fe:	6825      	ldr	r5, [r4, #0]
 8006700:	6909      	ldr	r1, [r1, #16]
 8006702:	3301      	adds	r3, #1
 8006704:	eba5 0901 	sub.w	r9, r5, r1
 8006708:	6965      	ldr	r5, [r4, #20]
 800670a:	444b      	add	r3, r9
 800670c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006710:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006714:	106d      	asrs	r5, r5, #1
 8006716:	429d      	cmp	r5, r3
 8006718:	bf38      	it	cc
 800671a:	461d      	movcc	r5, r3
 800671c:	0553      	lsls	r3, r2, #21
 800671e:	d531      	bpl.n	8006784 <__ssputs_r+0xa0>
 8006720:	4629      	mov	r1, r5
 8006722:	f7ff ff6b 	bl	80065fc <_malloc_r>
 8006726:	4606      	mov	r6, r0
 8006728:	b950      	cbnz	r0, 8006740 <__ssputs_r+0x5c>
 800672a:	230c      	movs	r3, #12
 800672c:	f04f 30ff 	mov.w	r0, #4294967295
 8006730:	f8ca 3000 	str.w	r3, [sl]
 8006734:	89a3      	ldrh	r3, [r4, #12]
 8006736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800673a:	81a3      	strh	r3, [r4, #12]
 800673c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006740:	464a      	mov	r2, r9
 8006742:	6921      	ldr	r1, [r4, #16]
 8006744:	f7ff fa18 	bl	8005b78 <memcpy>
 8006748:	89a3      	ldrh	r3, [r4, #12]
 800674a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800674e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006752:	81a3      	strh	r3, [r4, #12]
 8006754:	6126      	str	r6, [r4, #16]
 8006756:	444e      	add	r6, r9
 8006758:	6026      	str	r6, [r4, #0]
 800675a:	463e      	mov	r6, r7
 800675c:	6165      	str	r5, [r4, #20]
 800675e:	eba5 0509 	sub.w	r5, r5, r9
 8006762:	60a5      	str	r5, [r4, #8]
 8006764:	42be      	cmp	r6, r7
 8006766:	d900      	bls.n	800676a <__ssputs_r+0x86>
 8006768:	463e      	mov	r6, r7
 800676a:	4632      	mov	r2, r6
 800676c:	4641      	mov	r1, r8
 800676e:	6820      	ldr	r0, [r4, #0]
 8006770:	f000 f97c 	bl	8006a6c <memmove>
 8006774:	68a3      	ldr	r3, [r4, #8]
 8006776:	2000      	movs	r0, #0
 8006778:	1b9b      	subs	r3, r3, r6
 800677a:	60a3      	str	r3, [r4, #8]
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	4433      	add	r3, r6
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	e7db      	b.n	800673c <__ssputs_r+0x58>
 8006784:	462a      	mov	r2, r5
 8006786:	f000 f997 	bl	8006ab8 <_realloc_r>
 800678a:	4606      	mov	r6, r0
 800678c:	2800      	cmp	r0, #0
 800678e:	d1e1      	bne.n	8006754 <__ssputs_r+0x70>
 8006790:	4650      	mov	r0, sl
 8006792:	6921      	ldr	r1, [r4, #16]
 8006794:	f7ff feca 	bl	800652c <_free_r>
 8006798:	e7c7      	b.n	800672a <__ssputs_r+0x46>
	...

0800679c <_svfiprintf_r>:
 800679c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a0:	4698      	mov	r8, r3
 80067a2:	898b      	ldrh	r3, [r1, #12]
 80067a4:	4607      	mov	r7, r0
 80067a6:	061b      	lsls	r3, r3, #24
 80067a8:	460d      	mov	r5, r1
 80067aa:	4614      	mov	r4, r2
 80067ac:	b09d      	sub	sp, #116	; 0x74
 80067ae:	d50e      	bpl.n	80067ce <_svfiprintf_r+0x32>
 80067b0:	690b      	ldr	r3, [r1, #16]
 80067b2:	b963      	cbnz	r3, 80067ce <_svfiprintf_r+0x32>
 80067b4:	2140      	movs	r1, #64	; 0x40
 80067b6:	f7ff ff21 	bl	80065fc <_malloc_r>
 80067ba:	6028      	str	r0, [r5, #0]
 80067bc:	6128      	str	r0, [r5, #16]
 80067be:	b920      	cbnz	r0, 80067ca <_svfiprintf_r+0x2e>
 80067c0:	230c      	movs	r3, #12
 80067c2:	603b      	str	r3, [r7, #0]
 80067c4:	f04f 30ff 	mov.w	r0, #4294967295
 80067c8:	e0d1      	b.n	800696e <_svfiprintf_r+0x1d2>
 80067ca:	2340      	movs	r3, #64	; 0x40
 80067cc:	616b      	str	r3, [r5, #20]
 80067ce:	2300      	movs	r3, #0
 80067d0:	9309      	str	r3, [sp, #36]	; 0x24
 80067d2:	2320      	movs	r3, #32
 80067d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067d8:	2330      	movs	r3, #48	; 0x30
 80067da:	f04f 0901 	mov.w	r9, #1
 80067de:	f8cd 800c 	str.w	r8, [sp, #12]
 80067e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006988 <_svfiprintf_r+0x1ec>
 80067e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067ea:	4623      	mov	r3, r4
 80067ec:	469a      	mov	sl, r3
 80067ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067f2:	b10a      	cbz	r2, 80067f8 <_svfiprintf_r+0x5c>
 80067f4:	2a25      	cmp	r2, #37	; 0x25
 80067f6:	d1f9      	bne.n	80067ec <_svfiprintf_r+0x50>
 80067f8:	ebba 0b04 	subs.w	fp, sl, r4
 80067fc:	d00b      	beq.n	8006816 <_svfiprintf_r+0x7a>
 80067fe:	465b      	mov	r3, fp
 8006800:	4622      	mov	r2, r4
 8006802:	4629      	mov	r1, r5
 8006804:	4638      	mov	r0, r7
 8006806:	f7ff ff6d 	bl	80066e4 <__ssputs_r>
 800680a:	3001      	adds	r0, #1
 800680c:	f000 80aa 	beq.w	8006964 <_svfiprintf_r+0x1c8>
 8006810:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006812:	445a      	add	r2, fp
 8006814:	9209      	str	r2, [sp, #36]	; 0x24
 8006816:	f89a 3000 	ldrb.w	r3, [sl]
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 80a2 	beq.w	8006964 <_svfiprintf_r+0x1c8>
 8006820:	2300      	movs	r3, #0
 8006822:	f04f 32ff 	mov.w	r2, #4294967295
 8006826:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800682a:	f10a 0a01 	add.w	sl, sl, #1
 800682e:	9304      	str	r3, [sp, #16]
 8006830:	9307      	str	r3, [sp, #28]
 8006832:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006836:	931a      	str	r3, [sp, #104]	; 0x68
 8006838:	4654      	mov	r4, sl
 800683a:	2205      	movs	r2, #5
 800683c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006840:	4851      	ldr	r0, [pc, #324]	; (8006988 <_svfiprintf_r+0x1ec>)
 8006842:	f7ff f98b 	bl	8005b5c <memchr>
 8006846:	9a04      	ldr	r2, [sp, #16]
 8006848:	b9d8      	cbnz	r0, 8006882 <_svfiprintf_r+0xe6>
 800684a:	06d0      	lsls	r0, r2, #27
 800684c:	bf44      	itt	mi
 800684e:	2320      	movmi	r3, #32
 8006850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006854:	0711      	lsls	r1, r2, #28
 8006856:	bf44      	itt	mi
 8006858:	232b      	movmi	r3, #43	; 0x2b
 800685a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800685e:	f89a 3000 	ldrb.w	r3, [sl]
 8006862:	2b2a      	cmp	r3, #42	; 0x2a
 8006864:	d015      	beq.n	8006892 <_svfiprintf_r+0xf6>
 8006866:	4654      	mov	r4, sl
 8006868:	2000      	movs	r0, #0
 800686a:	f04f 0c0a 	mov.w	ip, #10
 800686e:	9a07      	ldr	r2, [sp, #28]
 8006870:	4621      	mov	r1, r4
 8006872:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006876:	3b30      	subs	r3, #48	; 0x30
 8006878:	2b09      	cmp	r3, #9
 800687a:	d94e      	bls.n	800691a <_svfiprintf_r+0x17e>
 800687c:	b1b0      	cbz	r0, 80068ac <_svfiprintf_r+0x110>
 800687e:	9207      	str	r2, [sp, #28]
 8006880:	e014      	b.n	80068ac <_svfiprintf_r+0x110>
 8006882:	eba0 0308 	sub.w	r3, r0, r8
 8006886:	fa09 f303 	lsl.w	r3, r9, r3
 800688a:	4313      	orrs	r3, r2
 800688c:	46a2      	mov	sl, r4
 800688e:	9304      	str	r3, [sp, #16]
 8006890:	e7d2      	b.n	8006838 <_svfiprintf_r+0x9c>
 8006892:	9b03      	ldr	r3, [sp, #12]
 8006894:	1d19      	adds	r1, r3, #4
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	9103      	str	r1, [sp, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	bfbb      	ittet	lt
 800689e:	425b      	neglt	r3, r3
 80068a0:	f042 0202 	orrlt.w	r2, r2, #2
 80068a4:	9307      	strge	r3, [sp, #28]
 80068a6:	9307      	strlt	r3, [sp, #28]
 80068a8:	bfb8      	it	lt
 80068aa:	9204      	strlt	r2, [sp, #16]
 80068ac:	7823      	ldrb	r3, [r4, #0]
 80068ae:	2b2e      	cmp	r3, #46	; 0x2e
 80068b0:	d10c      	bne.n	80068cc <_svfiprintf_r+0x130>
 80068b2:	7863      	ldrb	r3, [r4, #1]
 80068b4:	2b2a      	cmp	r3, #42	; 0x2a
 80068b6:	d135      	bne.n	8006924 <_svfiprintf_r+0x188>
 80068b8:	9b03      	ldr	r3, [sp, #12]
 80068ba:	3402      	adds	r4, #2
 80068bc:	1d1a      	adds	r2, r3, #4
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	9203      	str	r2, [sp, #12]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	bfb8      	it	lt
 80068c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80068ca:	9305      	str	r3, [sp, #20]
 80068cc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800698c <_svfiprintf_r+0x1f0>
 80068d0:	2203      	movs	r2, #3
 80068d2:	4650      	mov	r0, sl
 80068d4:	7821      	ldrb	r1, [r4, #0]
 80068d6:	f7ff f941 	bl	8005b5c <memchr>
 80068da:	b140      	cbz	r0, 80068ee <_svfiprintf_r+0x152>
 80068dc:	2340      	movs	r3, #64	; 0x40
 80068de:	eba0 000a 	sub.w	r0, r0, sl
 80068e2:	fa03 f000 	lsl.w	r0, r3, r0
 80068e6:	9b04      	ldr	r3, [sp, #16]
 80068e8:	3401      	adds	r4, #1
 80068ea:	4303      	orrs	r3, r0
 80068ec:	9304      	str	r3, [sp, #16]
 80068ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068f2:	2206      	movs	r2, #6
 80068f4:	4826      	ldr	r0, [pc, #152]	; (8006990 <_svfiprintf_r+0x1f4>)
 80068f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068fa:	f7ff f92f 	bl	8005b5c <memchr>
 80068fe:	2800      	cmp	r0, #0
 8006900:	d038      	beq.n	8006974 <_svfiprintf_r+0x1d8>
 8006902:	4b24      	ldr	r3, [pc, #144]	; (8006994 <_svfiprintf_r+0x1f8>)
 8006904:	bb1b      	cbnz	r3, 800694e <_svfiprintf_r+0x1b2>
 8006906:	9b03      	ldr	r3, [sp, #12]
 8006908:	3307      	adds	r3, #7
 800690a:	f023 0307 	bic.w	r3, r3, #7
 800690e:	3308      	adds	r3, #8
 8006910:	9303      	str	r3, [sp, #12]
 8006912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006914:	4433      	add	r3, r6
 8006916:	9309      	str	r3, [sp, #36]	; 0x24
 8006918:	e767      	b.n	80067ea <_svfiprintf_r+0x4e>
 800691a:	460c      	mov	r4, r1
 800691c:	2001      	movs	r0, #1
 800691e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006922:	e7a5      	b.n	8006870 <_svfiprintf_r+0xd4>
 8006924:	2300      	movs	r3, #0
 8006926:	f04f 0c0a 	mov.w	ip, #10
 800692a:	4619      	mov	r1, r3
 800692c:	3401      	adds	r4, #1
 800692e:	9305      	str	r3, [sp, #20]
 8006930:	4620      	mov	r0, r4
 8006932:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006936:	3a30      	subs	r2, #48	; 0x30
 8006938:	2a09      	cmp	r2, #9
 800693a:	d903      	bls.n	8006944 <_svfiprintf_r+0x1a8>
 800693c:	2b00      	cmp	r3, #0
 800693e:	d0c5      	beq.n	80068cc <_svfiprintf_r+0x130>
 8006940:	9105      	str	r1, [sp, #20]
 8006942:	e7c3      	b.n	80068cc <_svfiprintf_r+0x130>
 8006944:	4604      	mov	r4, r0
 8006946:	2301      	movs	r3, #1
 8006948:	fb0c 2101 	mla	r1, ip, r1, r2
 800694c:	e7f0      	b.n	8006930 <_svfiprintf_r+0x194>
 800694e:	ab03      	add	r3, sp, #12
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	462a      	mov	r2, r5
 8006954:	4638      	mov	r0, r7
 8006956:	4b10      	ldr	r3, [pc, #64]	; (8006998 <_svfiprintf_r+0x1fc>)
 8006958:	a904      	add	r1, sp, #16
 800695a:	f7fc fa7d 	bl	8002e58 <_printf_float>
 800695e:	1c42      	adds	r2, r0, #1
 8006960:	4606      	mov	r6, r0
 8006962:	d1d6      	bne.n	8006912 <_svfiprintf_r+0x176>
 8006964:	89ab      	ldrh	r3, [r5, #12]
 8006966:	065b      	lsls	r3, r3, #25
 8006968:	f53f af2c 	bmi.w	80067c4 <_svfiprintf_r+0x28>
 800696c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800696e:	b01d      	add	sp, #116	; 0x74
 8006970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006974:	ab03      	add	r3, sp, #12
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	462a      	mov	r2, r5
 800697a:	4638      	mov	r0, r7
 800697c:	4b06      	ldr	r3, [pc, #24]	; (8006998 <_svfiprintf_r+0x1fc>)
 800697e:	a904      	add	r1, sp, #16
 8006980:	f7fc fd06 	bl	8003390 <_printf_i>
 8006984:	e7eb      	b.n	800695e <_svfiprintf_r+0x1c2>
 8006986:	bf00      	nop
 8006988:	080079cc 	.word	0x080079cc
 800698c:	080079d2 	.word	0x080079d2
 8006990:	080079d6 	.word	0x080079d6
 8006994:	08002e59 	.word	0x08002e59
 8006998:	080066e5 	.word	0x080066e5

0800699c <nan>:
 800699c:	2000      	movs	r0, #0
 800699e:	4901      	ldr	r1, [pc, #4]	; (80069a4 <nan+0x8>)
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	7ff80000 	.word	0x7ff80000

080069a8 <_sbrk_r>:
 80069a8:	b538      	push	{r3, r4, r5, lr}
 80069aa:	2300      	movs	r3, #0
 80069ac:	4d05      	ldr	r5, [pc, #20]	; (80069c4 <_sbrk_r+0x1c>)
 80069ae:	4604      	mov	r4, r0
 80069b0:	4608      	mov	r0, r1
 80069b2:	602b      	str	r3, [r5, #0]
 80069b4:	f7fa fba0 	bl	80010f8 <_sbrk>
 80069b8:	1c43      	adds	r3, r0, #1
 80069ba:	d102      	bne.n	80069c2 <_sbrk_r+0x1a>
 80069bc:	682b      	ldr	r3, [r5, #0]
 80069be:	b103      	cbz	r3, 80069c2 <_sbrk_r+0x1a>
 80069c0:	6023      	str	r3, [r4, #0]
 80069c2:	bd38      	pop	{r3, r4, r5, pc}
 80069c4:	200002c0 	.word	0x200002c0

080069c8 <strncmp>:
 80069c8:	4603      	mov	r3, r0
 80069ca:	b510      	push	{r4, lr}
 80069cc:	b172      	cbz	r2, 80069ec <strncmp+0x24>
 80069ce:	3901      	subs	r1, #1
 80069d0:	1884      	adds	r4, r0, r2
 80069d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80069d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80069da:	4290      	cmp	r0, r2
 80069dc:	d101      	bne.n	80069e2 <strncmp+0x1a>
 80069de:	42a3      	cmp	r3, r4
 80069e0:	d101      	bne.n	80069e6 <strncmp+0x1e>
 80069e2:	1a80      	subs	r0, r0, r2
 80069e4:	bd10      	pop	{r4, pc}
 80069e6:	2800      	cmp	r0, #0
 80069e8:	d1f3      	bne.n	80069d2 <strncmp+0xa>
 80069ea:	e7fa      	b.n	80069e2 <strncmp+0x1a>
 80069ec:	4610      	mov	r0, r2
 80069ee:	e7f9      	b.n	80069e4 <strncmp+0x1c>

080069f0 <__ascii_wctomb>:
 80069f0:	4603      	mov	r3, r0
 80069f2:	4608      	mov	r0, r1
 80069f4:	b141      	cbz	r1, 8006a08 <__ascii_wctomb+0x18>
 80069f6:	2aff      	cmp	r2, #255	; 0xff
 80069f8:	d904      	bls.n	8006a04 <__ascii_wctomb+0x14>
 80069fa:	228a      	movs	r2, #138	; 0x8a
 80069fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	4770      	bx	lr
 8006a04:	2001      	movs	r0, #1
 8006a06:	700a      	strb	r2, [r1, #0]
 8006a08:	4770      	bx	lr
	...

08006a0c <__assert_func>:
 8006a0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a0e:	4614      	mov	r4, r2
 8006a10:	461a      	mov	r2, r3
 8006a12:	4b09      	ldr	r3, [pc, #36]	; (8006a38 <__assert_func+0x2c>)
 8006a14:	4605      	mov	r5, r0
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68d8      	ldr	r0, [r3, #12]
 8006a1a:	b14c      	cbz	r4, 8006a30 <__assert_func+0x24>
 8006a1c:	4b07      	ldr	r3, [pc, #28]	; (8006a3c <__assert_func+0x30>)
 8006a1e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a22:	9100      	str	r1, [sp, #0]
 8006a24:	462b      	mov	r3, r5
 8006a26:	4906      	ldr	r1, [pc, #24]	; (8006a40 <__assert_func+0x34>)
 8006a28:	f000 f80e 	bl	8006a48 <fiprintf>
 8006a2c:	f000 fa8a 	bl	8006f44 <abort>
 8006a30:	4b04      	ldr	r3, [pc, #16]	; (8006a44 <__assert_func+0x38>)
 8006a32:	461c      	mov	r4, r3
 8006a34:	e7f3      	b.n	8006a1e <__assert_func+0x12>
 8006a36:	bf00      	nop
 8006a38:	2000000c 	.word	0x2000000c
 8006a3c:	080079dd 	.word	0x080079dd
 8006a40:	080079ea 	.word	0x080079ea
 8006a44:	08007a18 	.word	0x08007a18

08006a48 <fiprintf>:
 8006a48:	b40e      	push	{r1, r2, r3}
 8006a4a:	b503      	push	{r0, r1, lr}
 8006a4c:	4601      	mov	r1, r0
 8006a4e:	ab03      	add	r3, sp, #12
 8006a50:	4805      	ldr	r0, [pc, #20]	; (8006a68 <fiprintf+0x20>)
 8006a52:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a56:	6800      	ldr	r0, [r0, #0]
 8006a58:	9301      	str	r3, [sp, #4]
 8006a5a:	f000 f883 	bl	8006b64 <_vfiprintf_r>
 8006a5e:	b002      	add	sp, #8
 8006a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a64:	b003      	add	sp, #12
 8006a66:	4770      	bx	lr
 8006a68:	2000000c 	.word	0x2000000c

08006a6c <memmove>:
 8006a6c:	4288      	cmp	r0, r1
 8006a6e:	b510      	push	{r4, lr}
 8006a70:	eb01 0402 	add.w	r4, r1, r2
 8006a74:	d902      	bls.n	8006a7c <memmove+0x10>
 8006a76:	4284      	cmp	r4, r0
 8006a78:	4623      	mov	r3, r4
 8006a7a:	d807      	bhi.n	8006a8c <memmove+0x20>
 8006a7c:	1e43      	subs	r3, r0, #1
 8006a7e:	42a1      	cmp	r1, r4
 8006a80:	d008      	beq.n	8006a94 <memmove+0x28>
 8006a82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a8a:	e7f8      	b.n	8006a7e <memmove+0x12>
 8006a8c:	4601      	mov	r1, r0
 8006a8e:	4402      	add	r2, r0
 8006a90:	428a      	cmp	r2, r1
 8006a92:	d100      	bne.n	8006a96 <memmove+0x2a>
 8006a94:	bd10      	pop	{r4, pc}
 8006a96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a9e:	e7f7      	b.n	8006a90 <memmove+0x24>

08006aa0 <__malloc_lock>:
 8006aa0:	4801      	ldr	r0, [pc, #4]	; (8006aa8 <__malloc_lock+0x8>)
 8006aa2:	f000 bc0b 	b.w	80072bc <__retarget_lock_acquire_recursive>
 8006aa6:	bf00      	nop
 8006aa8:	200002c4 	.word	0x200002c4

08006aac <__malloc_unlock>:
 8006aac:	4801      	ldr	r0, [pc, #4]	; (8006ab4 <__malloc_unlock+0x8>)
 8006aae:	f000 bc06 	b.w	80072be <__retarget_lock_release_recursive>
 8006ab2:	bf00      	nop
 8006ab4:	200002c4 	.word	0x200002c4

08006ab8 <_realloc_r>:
 8006ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006abc:	4680      	mov	r8, r0
 8006abe:	4614      	mov	r4, r2
 8006ac0:	460e      	mov	r6, r1
 8006ac2:	b921      	cbnz	r1, 8006ace <_realloc_r+0x16>
 8006ac4:	4611      	mov	r1, r2
 8006ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aca:	f7ff bd97 	b.w	80065fc <_malloc_r>
 8006ace:	b92a      	cbnz	r2, 8006adc <_realloc_r+0x24>
 8006ad0:	f7ff fd2c 	bl	800652c <_free_r>
 8006ad4:	4625      	mov	r5, r4
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006adc:	f000 fc56 	bl	800738c <_malloc_usable_size_r>
 8006ae0:	4284      	cmp	r4, r0
 8006ae2:	4607      	mov	r7, r0
 8006ae4:	d802      	bhi.n	8006aec <_realloc_r+0x34>
 8006ae6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006aea:	d812      	bhi.n	8006b12 <_realloc_r+0x5a>
 8006aec:	4621      	mov	r1, r4
 8006aee:	4640      	mov	r0, r8
 8006af0:	f7ff fd84 	bl	80065fc <_malloc_r>
 8006af4:	4605      	mov	r5, r0
 8006af6:	2800      	cmp	r0, #0
 8006af8:	d0ed      	beq.n	8006ad6 <_realloc_r+0x1e>
 8006afa:	42bc      	cmp	r4, r7
 8006afc:	4622      	mov	r2, r4
 8006afe:	4631      	mov	r1, r6
 8006b00:	bf28      	it	cs
 8006b02:	463a      	movcs	r2, r7
 8006b04:	f7ff f838 	bl	8005b78 <memcpy>
 8006b08:	4631      	mov	r1, r6
 8006b0a:	4640      	mov	r0, r8
 8006b0c:	f7ff fd0e 	bl	800652c <_free_r>
 8006b10:	e7e1      	b.n	8006ad6 <_realloc_r+0x1e>
 8006b12:	4635      	mov	r5, r6
 8006b14:	e7df      	b.n	8006ad6 <_realloc_r+0x1e>

08006b16 <__sfputc_r>:
 8006b16:	6893      	ldr	r3, [r2, #8]
 8006b18:	b410      	push	{r4}
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	6093      	str	r3, [r2, #8]
 8006b20:	da07      	bge.n	8006b32 <__sfputc_r+0x1c>
 8006b22:	6994      	ldr	r4, [r2, #24]
 8006b24:	42a3      	cmp	r3, r4
 8006b26:	db01      	blt.n	8006b2c <__sfputc_r+0x16>
 8006b28:	290a      	cmp	r1, #10
 8006b2a:	d102      	bne.n	8006b32 <__sfputc_r+0x1c>
 8006b2c:	bc10      	pop	{r4}
 8006b2e:	f000 b949 	b.w	8006dc4 <__swbuf_r>
 8006b32:	6813      	ldr	r3, [r2, #0]
 8006b34:	1c58      	adds	r0, r3, #1
 8006b36:	6010      	str	r0, [r2, #0]
 8006b38:	7019      	strb	r1, [r3, #0]
 8006b3a:	4608      	mov	r0, r1
 8006b3c:	bc10      	pop	{r4}
 8006b3e:	4770      	bx	lr

08006b40 <__sfputs_r>:
 8006b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b42:	4606      	mov	r6, r0
 8006b44:	460f      	mov	r7, r1
 8006b46:	4614      	mov	r4, r2
 8006b48:	18d5      	adds	r5, r2, r3
 8006b4a:	42ac      	cmp	r4, r5
 8006b4c:	d101      	bne.n	8006b52 <__sfputs_r+0x12>
 8006b4e:	2000      	movs	r0, #0
 8006b50:	e007      	b.n	8006b62 <__sfputs_r+0x22>
 8006b52:	463a      	mov	r2, r7
 8006b54:	4630      	mov	r0, r6
 8006b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b5a:	f7ff ffdc 	bl	8006b16 <__sfputc_r>
 8006b5e:	1c43      	adds	r3, r0, #1
 8006b60:	d1f3      	bne.n	8006b4a <__sfputs_r+0xa>
 8006b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006b64 <_vfiprintf_r>:
 8006b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b68:	460d      	mov	r5, r1
 8006b6a:	4614      	mov	r4, r2
 8006b6c:	4698      	mov	r8, r3
 8006b6e:	4606      	mov	r6, r0
 8006b70:	b09d      	sub	sp, #116	; 0x74
 8006b72:	b118      	cbz	r0, 8006b7c <_vfiprintf_r+0x18>
 8006b74:	6983      	ldr	r3, [r0, #24]
 8006b76:	b90b      	cbnz	r3, 8006b7c <_vfiprintf_r+0x18>
 8006b78:	f000 fb02 	bl	8007180 <__sinit>
 8006b7c:	4b89      	ldr	r3, [pc, #548]	; (8006da4 <_vfiprintf_r+0x240>)
 8006b7e:	429d      	cmp	r5, r3
 8006b80:	d11b      	bne.n	8006bba <_vfiprintf_r+0x56>
 8006b82:	6875      	ldr	r5, [r6, #4]
 8006b84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b86:	07d9      	lsls	r1, r3, #31
 8006b88:	d405      	bmi.n	8006b96 <_vfiprintf_r+0x32>
 8006b8a:	89ab      	ldrh	r3, [r5, #12]
 8006b8c:	059a      	lsls	r2, r3, #22
 8006b8e:	d402      	bmi.n	8006b96 <_vfiprintf_r+0x32>
 8006b90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b92:	f000 fb93 	bl	80072bc <__retarget_lock_acquire_recursive>
 8006b96:	89ab      	ldrh	r3, [r5, #12]
 8006b98:	071b      	lsls	r3, r3, #28
 8006b9a:	d501      	bpl.n	8006ba0 <_vfiprintf_r+0x3c>
 8006b9c:	692b      	ldr	r3, [r5, #16]
 8006b9e:	b9eb      	cbnz	r3, 8006bdc <_vfiprintf_r+0x78>
 8006ba0:	4629      	mov	r1, r5
 8006ba2:	4630      	mov	r0, r6
 8006ba4:	f000 f960 	bl	8006e68 <__swsetup_r>
 8006ba8:	b1c0      	cbz	r0, 8006bdc <_vfiprintf_r+0x78>
 8006baa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bac:	07dc      	lsls	r4, r3, #31
 8006bae:	d50e      	bpl.n	8006bce <_vfiprintf_r+0x6a>
 8006bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb4:	b01d      	add	sp, #116	; 0x74
 8006bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bba:	4b7b      	ldr	r3, [pc, #492]	; (8006da8 <_vfiprintf_r+0x244>)
 8006bbc:	429d      	cmp	r5, r3
 8006bbe:	d101      	bne.n	8006bc4 <_vfiprintf_r+0x60>
 8006bc0:	68b5      	ldr	r5, [r6, #8]
 8006bc2:	e7df      	b.n	8006b84 <_vfiprintf_r+0x20>
 8006bc4:	4b79      	ldr	r3, [pc, #484]	; (8006dac <_vfiprintf_r+0x248>)
 8006bc6:	429d      	cmp	r5, r3
 8006bc8:	bf08      	it	eq
 8006bca:	68f5      	ldreq	r5, [r6, #12]
 8006bcc:	e7da      	b.n	8006b84 <_vfiprintf_r+0x20>
 8006bce:	89ab      	ldrh	r3, [r5, #12]
 8006bd0:	0598      	lsls	r0, r3, #22
 8006bd2:	d4ed      	bmi.n	8006bb0 <_vfiprintf_r+0x4c>
 8006bd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bd6:	f000 fb72 	bl	80072be <__retarget_lock_release_recursive>
 8006bda:	e7e9      	b.n	8006bb0 <_vfiprintf_r+0x4c>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	9309      	str	r3, [sp, #36]	; 0x24
 8006be0:	2320      	movs	r3, #32
 8006be2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006be6:	2330      	movs	r3, #48	; 0x30
 8006be8:	f04f 0901 	mov.w	r9, #1
 8006bec:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bf0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006db0 <_vfiprintf_r+0x24c>
 8006bf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bf8:	4623      	mov	r3, r4
 8006bfa:	469a      	mov	sl, r3
 8006bfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c00:	b10a      	cbz	r2, 8006c06 <_vfiprintf_r+0xa2>
 8006c02:	2a25      	cmp	r2, #37	; 0x25
 8006c04:	d1f9      	bne.n	8006bfa <_vfiprintf_r+0x96>
 8006c06:	ebba 0b04 	subs.w	fp, sl, r4
 8006c0a:	d00b      	beq.n	8006c24 <_vfiprintf_r+0xc0>
 8006c0c:	465b      	mov	r3, fp
 8006c0e:	4622      	mov	r2, r4
 8006c10:	4629      	mov	r1, r5
 8006c12:	4630      	mov	r0, r6
 8006c14:	f7ff ff94 	bl	8006b40 <__sfputs_r>
 8006c18:	3001      	adds	r0, #1
 8006c1a:	f000 80aa 	beq.w	8006d72 <_vfiprintf_r+0x20e>
 8006c1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c20:	445a      	add	r2, fp
 8006c22:	9209      	str	r2, [sp, #36]	; 0x24
 8006c24:	f89a 3000 	ldrb.w	r3, [sl]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 80a2 	beq.w	8006d72 <_vfiprintf_r+0x20e>
 8006c2e:	2300      	movs	r3, #0
 8006c30:	f04f 32ff 	mov.w	r2, #4294967295
 8006c34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c38:	f10a 0a01 	add.w	sl, sl, #1
 8006c3c:	9304      	str	r3, [sp, #16]
 8006c3e:	9307      	str	r3, [sp, #28]
 8006c40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c44:	931a      	str	r3, [sp, #104]	; 0x68
 8006c46:	4654      	mov	r4, sl
 8006c48:	2205      	movs	r2, #5
 8006c4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c4e:	4858      	ldr	r0, [pc, #352]	; (8006db0 <_vfiprintf_r+0x24c>)
 8006c50:	f7fe ff84 	bl	8005b5c <memchr>
 8006c54:	9a04      	ldr	r2, [sp, #16]
 8006c56:	b9d8      	cbnz	r0, 8006c90 <_vfiprintf_r+0x12c>
 8006c58:	06d1      	lsls	r1, r2, #27
 8006c5a:	bf44      	itt	mi
 8006c5c:	2320      	movmi	r3, #32
 8006c5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c62:	0713      	lsls	r3, r2, #28
 8006c64:	bf44      	itt	mi
 8006c66:	232b      	movmi	r3, #43	; 0x2b
 8006c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8006c70:	2b2a      	cmp	r3, #42	; 0x2a
 8006c72:	d015      	beq.n	8006ca0 <_vfiprintf_r+0x13c>
 8006c74:	4654      	mov	r4, sl
 8006c76:	2000      	movs	r0, #0
 8006c78:	f04f 0c0a 	mov.w	ip, #10
 8006c7c:	9a07      	ldr	r2, [sp, #28]
 8006c7e:	4621      	mov	r1, r4
 8006c80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c84:	3b30      	subs	r3, #48	; 0x30
 8006c86:	2b09      	cmp	r3, #9
 8006c88:	d94e      	bls.n	8006d28 <_vfiprintf_r+0x1c4>
 8006c8a:	b1b0      	cbz	r0, 8006cba <_vfiprintf_r+0x156>
 8006c8c:	9207      	str	r2, [sp, #28]
 8006c8e:	e014      	b.n	8006cba <_vfiprintf_r+0x156>
 8006c90:	eba0 0308 	sub.w	r3, r0, r8
 8006c94:	fa09 f303 	lsl.w	r3, r9, r3
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	46a2      	mov	sl, r4
 8006c9c:	9304      	str	r3, [sp, #16]
 8006c9e:	e7d2      	b.n	8006c46 <_vfiprintf_r+0xe2>
 8006ca0:	9b03      	ldr	r3, [sp, #12]
 8006ca2:	1d19      	adds	r1, r3, #4
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	9103      	str	r1, [sp, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	bfbb      	ittet	lt
 8006cac:	425b      	neglt	r3, r3
 8006cae:	f042 0202 	orrlt.w	r2, r2, #2
 8006cb2:	9307      	strge	r3, [sp, #28]
 8006cb4:	9307      	strlt	r3, [sp, #28]
 8006cb6:	bfb8      	it	lt
 8006cb8:	9204      	strlt	r2, [sp, #16]
 8006cba:	7823      	ldrb	r3, [r4, #0]
 8006cbc:	2b2e      	cmp	r3, #46	; 0x2e
 8006cbe:	d10c      	bne.n	8006cda <_vfiprintf_r+0x176>
 8006cc0:	7863      	ldrb	r3, [r4, #1]
 8006cc2:	2b2a      	cmp	r3, #42	; 0x2a
 8006cc4:	d135      	bne.n	8006d32 <_vfiprintf_r+0x1ce>
 8006cc6:	9b03      	ldr	r3, [sp, #12]
 8006cc8:	3402      	adds	r4, #2
 8006cca:	1d1a      	adds	r2, r3, #4
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	9203      	str	r2, [sp, #12]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	bfb8      	it	lt
 8006cd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cd8:	9305      	str	r3, [sp, #20]
 8006cda:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006db4 <_vfiprintf_r+0x250>
 8006cde:	2203      	movs	r2, #3
 8006ce0:	4650      	mov	r0, sl
 8006ce2:	7821      	ldrb	r1, [r4, #0]
 8006ce4:	f7fe ff3a 	bl	8005b5c <memchr>
 8006ce8:	b140      	cbz	r0, 8006cfc <_vfiprintf_r+0x198>
 8006cea:	2340      	movs	r3, #64	; 0x40
 8006cec:	eba0 000a 	sub.w	r0, r0, sl
 8006cf0:	fa03 f000 	lsl.w	r0, r3, r0
 8006cf4:	9b04      	ldr	r3, [sp, #16]
 8006cf6:	3401      	adds	r4, #1
 8006cf8:	4303      	orrs	r3, r0
 8006cfa:	9304      	str	r3, [sp, #16]
 8006cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d00:	2206      	movs	r2, #6
 8006d02:	482d      	ldr	r0, [pc, #180]	; (8006db8 <_vfiprintf_r+0x254>)
 8006d04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d08:	f7fe ff28 	bl	8005b5c <memchr>
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	d03f      	beq.n	8006d90 <_vfiprintf_r+0x22c>
 8006d10:	4b2a      	ldr	r3, [pc, #168]	; (8006dbc <_vfiprintf_r+0x258>)
 8006d12:	bb1b      	cbnz	r3, 8006d5c <_vfiprintf_r+0x1f8>
 8006d14:	9b03      	ldr	r3, [sp, #12]
 8006d16:	3307      	adds	r3, #7
 8006d18:	f023 0307 	bic.w	r3, r3, #7
 8006d1c:	3308      	adds	r3, #8
 8006d1e:	9303      	str	r3, [sp, #12]
 8006d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d22:	443b      	add	r3, r7
 8006d24:	9309      	str	r3, [sp, #36]	; 0x24
 8006d26:	e767      	b.n	8006bf8 <_vfiprintf_r+0x94>
 8006d28:	460c      	mov	r4, r1
 8006d2a:	2001      	movs	r0, #1
 8006d2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d30:	e7a5      	b.n	8006c7e <_vfiprintf_r+0x11a>
 8006d32:	2300      	movs	r3, #0
 8006d34:	f04f 0c0a 	mov.w	ip, #10
 8006d38:	4619      	mov	r1, r3
 8006d3a:	3401      	adds	r4, #1
 8006d3c:	9305      	str	r3, [sp, #20]
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d44:	3a30      	subs	r2, #48	; 0x30
 8006d46:	2a09      	cmp	r2, #9
 8006d48:	d903      	bls.n	8006d52 <_vfiprintf_r+0x1ee>
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0c5      	beq.n	8006cda <_vfiprintf_r+0x176>
 8006d4e:	9105      	str	r1, [sp, #20]
 8006d50:	e7c3      	b.n	8006cda <_vfiprintf_r+0x176>
 8006d52:	4604      	mov	r4, r0
 8006d54:	2301      	movs	r3, #1
 8006d56:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d5a:	e7f0      	b.n	8006d3e <_vfiprintf_r+0x1da>
 8006d5c:	ab03      	add	r3, sp, #12
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	462a      	mov	r2, r5
 8006d62:	4630      	mov	r0, r6
 8006d64:	4b16      	ldr	r3, [pc, #88]	; (8006dc0 <_vfiprintf_r+0x25c>)
 8006d66:	a904      	add	r1, sp, #16
 8006d68:	f7fc f876 	bl	8002e58 <_printf_float>
 8006d6c:	4607      	mov	r7, r0
 8006d6e:	1c78      	adds	r0, r7, #1
 8006d70:	d1d6      	bne.n	8006d20 <_vfiprintf_r+0x1bc>
 8006d72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d74:	07d9      	lsls	r1, r3, #31
 8006d76:	d405      	bmi.n	8006d84 <_vfiprintf_r+0x220>
 8006d78:	89ab      	ldrh	r3, [r5, #12]
 8006d7a:	059a      	lsls	r2, r3, #22
 8006d7c:	d402      	bmi.n	8006d84 <_vfiprintf_r+0x220>
 8006d7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d80:	f000 fa9d 	bl	80072be <__retarget_lock_release_recursive>
 8006d84:	89ab      	ldrh	r3, [r5, #12]
 8006d86:	065b      	lsls	r3, r3, #25
 8006d88:	f53f af12 	bmi.w	8006bb0 <_vfiprintf_r+0x4c>
 8006d8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d8e:	e711      	b.n	8006bb4 <_vfiprintf_r+0x50>
 8006d90:	ab03      	add	r3, sp, #12
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	462a      	mov	r2, r5
 8006d96:	4630      	mov	r0, r6
 8006d98:	4b09      	ldr	r3, [pc, #36]	; (8006dc0 <_vfiprintf_r+0x25c>)
 8006d9a:	a904      	add	r1, sp, #16
 8006d9c:	f7fc faf8 	bl	8003390 <_printf_i>
 8006da0:	e7e4      	b.n	8006d6c <_vfiprintf_r+0x208>
 8006da2:	bf00      	nop
 8006da4:	08007a3c 	.word	0x08007a3c
 8006da8:	08007a5c 	.word	0x08007a5c
 8006dac:	08007a1c 	.word	0x08007a1c
 8006db0:	080079cc 	.word	0x080079cc
 8006db4:	080079d2 	.word	0x080079d2
 8006db8:	080079d6 	.word	0x080079d6
 8006dbc:	08002e59 	.word	0x08002e59
 8006dc0:	08006b41 	.word	0x08006b41

08006dc4 <__swbuf_r>:
 8006dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc6:	460e      	mov	r6, r1
 8006dc8:	4614      	mov	r4, r2
 8006dca:	4605      	mov	r5, r0
 8006dcc:	b118      	cbz	r0, 8006dd6 <__swbuf_r+0x12>
 8006dce:	6983      	ldr	r3, [r0, #24]
 8006dd0:	b90b      	cbnz	r3, 8006dd6 <__swbuf_r+0x12>
 8006dd2:	f000 f9d5 	bl	8007180 <__sinit>
 8006dd6:	4b21      	ldr	r3, [pc, #132]	; (8006e5c <__swbuf_r+0x98>)
 8006dd8:	429c      	cmp	r4, r3
 8006dda:	d12b      	bne.n	8006e34 <__swbuf_r+0x70>
 8006ddc:	686c      	ldr	r4, [r5, #4]
 8006dde:	69a3      	ldr	r3, [r4, #24]
 8006de0:	60a3      	str	r3, [r4, #8]
 8006de2:	89a3      	ldrh	r3, [r4, #12]
 8006de4:	071a      	lsls	r2, r3, #28
 8006de6:	d52f      	bpl.n	8006e48 <__swbuf_r+0x84>
 8006de8:	6923      	ldr	r3, [r4, #16]
 8006dea:	b36b      	cbz	r3, 8006e48 <__swbuf_r+0x84>
 8006dec:	6923      	ldr	r3, [r4, #16]
 8006dee:	6820      	ldr	r0, [r4, #0]
 8006df0:	b2f6      	uxtb	r6, r6
 8006df2:	1ac0      	subs	r0, r0, r3
 8006df4:	6963      	ldr	r3, [r4, #20]
 8006df6:	4637      	mov	r7, r6
 8006df8:	4283      	cmp	r3, r0
 8006dfa:	dc04      	bgt.n	8006e06 <__swbuf_r+0x42>
 8006dfc:	4621      	mov	r1, r4
 8006dfe:	4628      	mov	r0, r5
 8006e00:	f000 f92a 	bl	8007058 <_fflush_r>
 8006e04:	bb30      	cbnz	r0, 8006e54 <__swbuf_r+0x90>
 8006e06:	68a3      	ldr	r3, [r4, #8]
 8006e08:	3001      	adds	r0, #1
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	60a3      	str	r3, [r4, #8]
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	1c5a      	adds	r2, r3, #1
 8006e12:	6022      	str	r2, [r4, #0]
 8006e14:	701e      	strb	r6, [r3, #0]
 8006e16:	6963      	ldr	r3, [r4, #20]
 8006e18:	4283      	cmp	r3, r0
 8006e1a:	d004      	beq.n	8006e26 <__swbuf_r+0x62>
 8006e1c:	89a3      	ldrh	r3, [r4, #12]
 8006e1e:	07db      	lsls	r3, r3, #31
 8006e20:	d506      	bpl.n	8006e30 <__swbuf_r+0x6c>
 8006e22:	2e0a      	cmp	r6, #10
 8006e24:	d104      	bne.n	8006e30 <__swbuf_r+0x6c>
 8006e26:	4621      	mov	r1, r4
 8006e28:	4628      	mov	r0, r5
 8006e2a:	f000 f915 	bl	8007058 <_fflush_r>
 8006e2e:	b988      	cbnz	r0, 8006e54 <__swbuf_r+0x90>
 8006e30:	4638      	mov	r0, r7
 8006e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e34:	4b0a      	ldr	r3, [pc, #40]	; (8006e60 <__swbuf_r+0x9c>)
 8006e36:	429c      	cmp	r4, r3
 8006e38:	d101      	bne.n	8006e3e <__swbuf_r+0x7a>
 8006e3a:	68ac      	ldr	r4, [r5, #8]
 8006e3c:	e7cf      	b.n	8006dde <__swbuf_r+0x1a>
 8006e3e:	4b09      	ldr	r3, [pc, #36]	; (8006e64 <__swbuf_r+0xa0>)
 8006e40:	429c      	cmp	r4, r3
 8006e42:	bf08      	it	eq
 8006e44:	68ec      	ldreq	r4, [r5, #12]
 8006e46:	e7ca      	b.n	8006dde <__swbuf_r+0x1a>
 8006e48:	4621      	mov	r1, r4
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	f000 f80c 	bl	8006e68 <__swsetup_r>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	d0cb      	beq.n	8006dec <__swbuf_r+0x28>
 8006e54:	f04f 37ff 	mov.w	r7, #4294967295
 8006e58:	e7ea      	b.n	8006e30 <__swbuf_r+0x6c>
 8006e5a:	bf00      	nop
 8006e5c:	08007a3c 	.word	0x08007a3c
 8006e60:	08007a5c 	.word	0x08007a5c
 8006e64:	08007a1c 	.word	0x08007a1c

08006e68 <__swsetup_r>:
 8006e68:	4b32      	ldr	r3, [pc, #200]	; (8006f34 <__swsetup_r+0xcc>)
 8006e6a:	b570      	push	{r4, r5, r6, lr}
 8006e6c:	681d      	ldr	r5, [r3, #0]
 8006e6e:	4606      	mov	r6, r0
 8006e70:	460c      	mov	r4, r1
 8006e72:	b125      	cbz	r5, 8006e7e <__swsetup_r+0x16>
 8006e74:	69ab      	ldr	r3, [r5, #24]
 8006e76:	b913      	cbnz	r3, 8006e7e <__swsetup_r+0x16>
 8006e78:	4628      	mov	r0, r5
 8006e7a:	f000 f981 	bl	8007180 <__sinit>
 8006e7e:	4b2e      	ldr	r3, [pc, #184]	; (8006f38 <__swsetup_r+0xd0>)
 8006e80:	429c      	cmp	r4, r3
 8006e82:	d10f      	bne.n	8006ea4 <__swsetup_r+0x3c>
 8006e84:	686c      	ldr	r4, [r5, #4]
 8006e86:	89a3      	ldrh	r3, [r4, #12]
 8006e88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e8c:	0719      	lsls	r1, r3, #28
 8006e8e:	d42c      	bmi.n	8006eea <__swsetup_r+0x82>
 8006e90:	06dd      	lsls	r5, r3, #27
 8006e92:	d411      	bmi.n	8006eb8 <__swsetup_r+0x50>
 8006e94:	2309      	movs	r3, #9
 8006e96:	6033      	str	r3, [r6, #0]
 8006e98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea0:	81a3      	strh	r3, [r4, #12]
 8006ea2:	e03e      	b.n	8006f22 <__swsetup_r+0xba>
 8006ea4:	4b25      	ldr	r3, [pc, #148]	; (8006f3c <__swsetup_r+0xd4>)
 8006ea6:	429c      	cmp	r4, r3
 8006ea8:	d101      	bne.n	8006eae <__swsetup_r+0x46>
 8006eaa:	68ac      	ldr	r4, [r5, #8]
 8006eac:	e7eb      	b.n	8006e86 <__swsetup_r+0x1e>
 8006eae:	4b24      	ldr	r3, [pc, #144]	; (8006f40 <__swsetup_r+0xd8>)
 8006eb0:	429c      	cmp	r4, r3
 8006eb2:	bf08      	it	eq
 8006eb4:	68ec      	ldreq	r4, [r5, #12]
 8006eb6:	e7e6      	b.n	8006e86 <__swsetup_r+0x1e>
 8006eb8:	0758      	lsls	r0, r3, #29
 8006eba:	d512      	bpl.n	8006ee2 <__swsetup_r+0x7a>
 8006ebc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ebe:	b141      	cbz	r1, 8006ed2 <__swsetup_r+0x6a>
 8006ec0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ec4:	4299      	cmp	r1, r3
 8006ec6:	d002      	beq.n	8006ece <__swsetup_r+0x66>
 8006ec8:	4630      	mov	r0, r6
 8006eca:	f7ff fb2f 	bl	800652c <_free_r>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	6363      	str	r3, [r4, #52]	; 0x34
 8006ed2:	89a3      	ldrh	r3, [r4, #12]
 8006ed4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ed8:	81a3      	strh	r3, [r4, #12]
 8006eda:	2300      	movs	r3, #0
 8006edc:	6063      	str	r3, [r4, #4]
 8006ede:	6923      	ldr	r3, [r4, #16]
 8006ee0:	6023      	str	r3, [r4, #0]
 8006ee2:	89a3      	ldrh	r3, [r4, #12]
 8006ee4:	f043 0308 	orr.w	r3, r3, #8
 8006ee8:	81a3      	strh	r3, [r4, #12]
 8006eea:	6923      	ldr	r3, [r4, #16]
 8006eec:	b94b      	cbnz	r3, 8006f02 <__swsetup_r+0x9a>
 8006eee:	89a3      	ldrh	r3, [r4, #12]
 8006ef0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ef8:	d003      	beq.n	8006f02 <__swsetup_r+0x9a>
 8006efa:	4621      	mov	r1, r4
 8006efc:	4630      	mov	r0, r6
 8006efe:	f000 fa05 	bl	800730c <__smakebuf_r>
 8006f02:	89a0      	ldrh	r0, [r4, #12]
 8006f04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f08:	f010 0301 	ands.w	r3, r0, #1
 8006f0c:	d00a      	beq.n	8006f24 <__swsetup_r+0xbc>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	60a3      	str	r3, [r4, #8]
 8006f12:	6963      	ldr	r3, [r4, #20]
 8006f14:	425b      	negs	r3, r3
 8006f16:	61a3      	str	r3, [r4, #24]
 8006f18:	6923      	ldr	r3, [r4, #16]
 8006f1a:	b943      	cbnz	r3, 8006f2e <__swsetup_r+0xc6>
 8006f1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f20:	d1ba      	bne.n	8006e98 <__swsetup_r+0x30>
 8006f22:	bd70      	pop	{r4, r5, r6, pc}
 8006f24:	0781      	lsls	r1, r0, #30
 8006f26:	bf58      	it	pl
 8006f28:	6963      	ldrpl	r3, [r4, #20]
 8006f2a:	60a3      	str	r3, [r4, #8]
 8006f2c:	e7f4      	b.n	8006f18 <__swsetup_r+0xb0>
 8006f2e:	2000      	movs	r0, #0
 8006f30:	e7f7      	b.n	8006f22 <__swsetup_r+0xba>
 8006f32:	bf00      	nop
 8006f34:	2000000c 	.word	0x2000000c
 8006f38:	08007a3c 	.word	0x08007a3c
 8006f3c:	08007a5c 	.word	0x08007a5c
 8006f40:	08007a1c 	.word	0x08007a1c

08006f44 <abort>:
 8006f44:	2006      	movs	r0, #6
 8006f46:	b508      	push	{r3, lr}
 8006f48:	f000 fa50 	bl	80073ec <raise>
 8006f4c:	2001      	movs	r0, #1
 8006f4e:	f7fa f85f 	bl	8001010 <_exit>
	...

08006f54 <__sflush_r>:
 8006f54:	898a      	ldrh	r2, [r1, #12]
 8006f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f58:	4605      	mov	r5, r0
 8006f5a:	0710      	lsls	r0, r2, #28
 8006f5c:	460c      	mov	r4, r1
 8006f5e:	d457      	bmi.n	8007010 <__sflush_r+0xbc>
 8006f60:	684b      	ldr	r3, [r1, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	dc04      	bgt.n	8006f70 <__sflush_r+0x1c>
 8006f66:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	dc01      	bgt.n	8006f70 <__sflush_r+0x1c>
 8006f6c:	2000      	movs	r0, #0
 8006f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f72:	2e00      	cmp	r6, #0
 8006f74:	d0fa      	beq.n	8006f6c <__sflush_r+0x18>
 8006f76:	2300      	movs	r3, #0
 8006f78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f7c:	682f      	ldr	r7, [r5, #0]
 8006f7e:	602b      	str	r3, [r5, #0]
 8006f80:	d032      	beq.n	8006fe8 <__sflush_r+0x94>
 8006f82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f84:	89a3      	ldrh	r3, [r4, #12]
 8006f86:	075a      	lsls	r2, r3, #29
 8006f88:	d505      	bpl.n	8006f96 <__sflush_r+0x42>
 8006f8a:	6863      	ldr	r3, [r4, #4]
 8006f8c:	1ac0      	subs	r0, r0, r3
 8006f8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f90:	b10b      	cbz	r3, 8006f96 <__sflush_r+0x42>
 8006f92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f94:	1ac0      	subs	r0, r0, r3
 8006f96:	2300      	movs	r3, #0
 8006f98:	4602      	mov	r2, r0
 8006f9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	6a21      	ldr	r1, [r4, #32]
 8006fa0:	47b0      	blx	r6
 8006fa2:	1c43      	adds	r3, r0, #1
 8006fa4:	89a3      	ldrh	r3, [r4, #12]
 8006fa6:	d106      	bne.n	8006fb6 <__sflush_r+0x62>
 8006fa8:	6829      	ldr	r1, [r5, #0]
 8006faa:	291d      	cmp	r1, #29
 8006fac:	d82c      	bhi.n	8007008 <__sflush_r+0xb4>
 8006fae:	4a29      	ldr	r2, [pc, #164]	; (8007054 <__sflush_r+0x100>)
 8006fb0:	40ca      	lsrs	r2, r1
 8006fb2:	07d6      	lsls	r6, r2, #31
 8006fb4:	d528      	bpl.n	8007008 <__sflush_r+0xb4>
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	6062      	str	r2, [r4, #4]
 8006fba:	6922      	ldr	r2, [r4, #16]
 8006fbc:	04d9      	lsls	r1, r3, #19
 8006fbe:	6022      	str	r2, [r4, #0]
 8006fc0:	d504      	bpl.n	8006fcc <__sflush_r+0x78>
 8006fc2:	1c42      	adds	r2, r0, #1
 8006fc4:	d101      	bne.n	8006fca <__sflush_r+0x76>
 8006fc6:	682b      	ldr	r3, [r5, #0]
 8006fc8:	b903      	cbnz	r3, 8006fcc <__sflush_r+0x78>
 8006fca:	6560      	str	r0, [r4, #84]	; 0x54
 8006fcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fce:	602f      	str	r7, [r5, #0]
 8006fd0:	2900      	cmp	r1, #0
 8006fd2:	d0cb      	beq.n	8006f6c <__sflush_r+0x18>
 8006fd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fd8:	4299      	cmp	r1, r3
 8006fda:	d002      	beq.n	8006fe2 <__sflush_r+0x8e>
 8006fdc:	4628      	mov	r0, r5
 8006fde:	f7ff faa5 	bl	800652c <_free_r>
 8006fe2:	2000      	movs	r0, #0
 8006fe4:	6360      	str	r0, [r4, #52]	; 0x34
 8006fe6:	e7c2      	b.n	8006f6e <__sflush_r+0x1a>
 8006fe8:	6a21      	ldr	r1, [r4, #32]
 8006fea:	2301      	movs	r3, #1
 8006fec:	4628      	mov	r0, r5
 8006fee:	47b0      	blx	r6
 8006ff0:	1c41      	adds	r1, r0, #1
 8006ff2:	d1c7      	bne.n	8006f84 <__sflush_r+0x30>
 8006ff4:	682b      	ldr	r3, [r5, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d0c4      	beq.n	8006f84 <__sflush_r+0x30>
 8006ffa:	2b1d      	cmp	r3, #29
 8006ffc:	d001      	beq.n	8007002 <__sflush_r+0xae>
 8006ffe:	2b16      	cmp	r3, #22
 8007000:	d101      	bne.n	8007006 <__sflush_r+0xb2>
 8007002:	602f      	str	r7, [r5, #0]
 8007004:	e7b2      	b.n	8006f6c <__sflush_r+0x18>
 8007006:	89a3      	ldrh	r3, [r4, #12]
 8007008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800700c:	81a3      	strh	r3, [r4, #12]
 800700e:	e7ae      	b.n	8006f6e <__sflush_r+0x1a>
 8007010:	690f      	ldr	r7, [r1, #16]
 8007012:	2f00      	cmp	r7, #0
 8007014:	d0aa      	beq.n	8006f6c <__sflush_r+0x18>
 8007016:	0793      	lsls	r3, r2, #30
 8007018:	bf18      	it	ne
 800701a:	2300      	movne	r3, #0
 800701c:	680e      	ldr	r6, [r1, #0]
 800701e:	bf08      	it	eq
 8007020:	694b      	ldreq	r3, [r1, #20]
 8007022:	1bf6      	subs	r6, r6, r7
 8007024:	600f      	str	r7, [r1, #0]
 8007026:	608b      	str	r3, [r1, #8]
 8007028:	2e00      	cmp	r6, #0
 800702a:	dd9f      	ble.n	8006f6c <__sflush_r+0x18>
 800702c:	4633      	mov	r3, r6
 800702e:	463a      	mov	r2, r7
 8007030:	4628      	mov	r0, r5
 8007032:	6a21      	ldr	r1, [r4, #32]
 8007034:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007038:	47e0      	blx	ip
 800703a:	2800      	cmp	r0, #0
 800703c:	dc06      	bgt.n	800704c <__sflush_r+0xf8>
 800703e:	89a3      	ldrh	r3, [r4, #12]
 8007040:	f04f 30ff 	mov.w	r0, #4294967295
 8007044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007048:	81a3      	strh	r3, [r4, #12]
 800704a:	e790      	b.n	8006f6e <__sflush_r+0x1a>
 800704c:	4407      	add	r7, r0
 800704e:	1a36      	subs	r6, r6, r0
 8007050:	e7ea      	b.n	8007028 <__sflush_r+0xd4>
 8007052:	bf00      	nop
 8007054:	20400001 	.word	0x20400001

08007058 <_fflush_r>:
 8007058:	b538      	push	{r3, r4, r5, lr}
 800705a:	690b      	ldr	r3, [r1, #16]
 800705c:	4605      	mov	r5, r0
 800705e:	460c      	mov	r4, r1
 8007060:	b913      	cbnz	r3, 8007068 <_fflush_r+0x10>
 8007062:	2500      	movs	r5, #0
 8007064:	4628      	mov	r0, r5
 8007066:	bd38      	pop	{r3, r4, r5, pc}
 8007068:	b118      	cbz	r0, 8007072 <_fflush_r+0x1a>
 800706a:	6983      	ldr	r3, [r0, #24]
 800706c:	b90b      	cbnz	r3, 8007072 <_fflush_r+0x1a>
 800706e:	f000 f887 	bl	8007180 <__sinit>
 8007072:	4b14      	ldr	r3, [pc, #80]	; (80070c4 <_fflush_r+0x6c>)
 8007074:	429c      	cmp	r4, r3
 8007076:	d11b      	bne.n	80070b0 <_fflush_r+0x58>
 8007078:	686c      	ldr	r4, [r5, #4]
 800707a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d0ef      	beq.n	8007062 <_fflush_r+0xa>
 8007082:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007084:	07d0      	lsls	r0, r2, #31
 8007086:	d404      	bmi.n	8007092 <_fflush_r+0x3a>
 8007088:	0599      	lsls	r1, r3, #22
 800708a:	d402      	bmi.n	8007092 <_fflush_r+0x3a>
 800708c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800708e:	f000 f915 	bl	80072bc <__retarget_lock_acquire_recursive>
 8007092:	4628      	mov	r0, r5
 8007094:	4621      	mov	r1, r4
 8007096:	f7ff ff5d 	bl	8006f54 <__sflush_r>
 800709a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800709c:	4605      	mov	r5, r0
 800709e:	07da      	lsls	r2, r3, #31
 80070a0:	d4e0      	bmi.n	8007064 <_fflush_r+0xc>
 80070a2:	89a3      	ldrh	r3, [r4, #12]
 80070a4:	059b      	lsls	r3, r3, #22
 80070a6:	d4dd      	bmi.n	8007064 <_fflush_r+0xc>
 80070a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070aa:	f000 f908 	bl	80072be <__retarget_lock_release_recursive>
 80070ae:	e7d9      	b.n	8007064 <_fflush_r+0xc>
 80070b0:	4b05      	ldr	r3, [pc, #20]	; (80070c8 <_fflush_r+0x70>)
 80070b2:	429c      	cmp	r4, r3
 80070b4:	d101      	bne.n	80070ba <_fflush_r+0x62>
 80070b6:	68ac      	ldr	r4, [r5, #8]
 80070b8:	e7df      	b.n	800707a <_fflush_r+0x22>
 80070ba:	4b04      	ldr	r3, [pc, #16]	; (80070cc <_fflush_r+0x74>)
 80070bc:	429c      	cmp	r4, r3
 80070be:	bf08      	it	eq
 80070c0:	68ec      	ldreq	r4, [r5, #12]
 80070c2:	e7da      	b.n	800707a <_fflush_r+0x22>
 80070c4:	08007a3c 	.word	0x08007a3c
 80070c8:	08007a5c 	.word	0x08007a5c
 80070cc:	08007a1c 	.word	0x08007a1c

080070d0 <std>:
 80070d0:	2300      	movs	r3, #0
 80070d2:	b510      	push	{r4, lr}
 80070d4:	4604      	mov	r4, r0
 80070d6:	e9c0 3300 	strd	r3, r3, [r0]
 80070da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070de:	6083      	str	r3, [r0, #8]
 80070e0:	8181      	strh	r1, [r0, #12]
 80070e2:	6643      	str	r3, [r0, #100]	; 0x64
 80070e4:	81c2      	strh	r2, [r0, #14]
 80070e6:	6183      	str	r3, [r0, #24]
 80070e8:	4619      	mov	r1, r3
 80070ea:	2208      	movs	r2, #8
 80070ec:	305c      	adds	r0, #92	; 0x5c
 80070ee:	f7fb fe0d 	bl	8002d0c <memset>
 80070f2:	4b05      	ldr	r3, [pc, #20]	; (8007108 <std+0x38>)
 80070f4:	6224      	str	r4, [r4, #32]
 80070f6:	6263      	str	r3, [r4, #36]	; 0x24
 80070f8:	4b04      	ldr	r3, [pc, #16]	; (800710c <std+0x3c>)
 80070fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80070fc:	4b04      	ldr	r3, [pc, #16]	; (8007110 <std+0x40>)
 80070fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007100:	4b04      	ldr	r3, [pc, #16]	; (8007114 <std+0x44>)
 8007102:	6323      	str	r3, [r4, #48]	; 0x30
 8007104:	bd10      	pop	{r4, pc}
 8007106:	bf00      	nop
 8007108:	08007425 	.word	0x08007425
 800710c:	08007447 	.word	0x08007447
 8007110:	0800747f 	.word	0x0800747f
 8007114:	080074a3 	.word	0x080074a3

08007118 <_cleanup_r>:
 8007118:	4901      	ldr	r1, [pc, #4]	; (8007120 <_cleanup_r+0x8>)
 800711a:	f000 b8af 	b.w	800727c <_fwalk_reent>
 800711e:	bf00      	nop
 8007120:	08007059 	.word	0x08007059

08007124 <__sfmoreglue>:
 8007124:	2268      	movs	r2, #104	; 0x68
 8007126:	b570      	push	{r4, r5, r6, lr}
 8007128:	1e4d      	subs	r5, r1, #1
 800712a:	4355      	muls	r5, r2
 800712c:	460e      	mov	r6, r1
 800712e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007132:	f7ff fa63 	bl	80065fc <_malloc_r>
 8007136:	4604      	mov	r4, r0
 8007138:	b140      	cbz	r0, 800714c <__sfmoreglue+0x28>
 800713a:	2100      	movs	r1, #0
 800713c:	e9c0 1600 	strd	r1, r6, [r0]
 8007140:	300c      	adds	r0, #12
 8007142:	60a0      	str	r0, [r4, #8]
 8007144:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007148:	f7fb fde0 	bl	8002d0c <memset>
 800714c:	4620      	mov	r0, r4
 800714e:	bd70      	pop	{r4, r5, r6, pc}

08007150 <__sfp_lock_acquire>:
 8007150:	4801      	ldr	r0, [pc, #4]	; (8007158 <__sfp_lock_acquire+0x8>)
 8007152:	f000 b8b3 	b.w	80072bc <__retarget_lock_acquire_recursive>
 8007156:	bf00      	nop
 8007158:	200002c5 	.word	0x200002c5

0800715c <__sfp_lock_release>:
 800715c:	4801      	ldr	r0, [pc, #4]	; (8007164 <__sfp_lock_release+0x8>)
 800715e:	f000 b8ae 	b.w	80072be <__retarget_lock_release_recursive>
 8007162:	bf00      	nop
 8007164:	200002c5 	.word	0x200002c5

08007168 <__sinit_lock_acquire>:
 8007168:	4801      	ldr	r0, [pc, #4]	; (8007170 <__sinit_lock_acquire+0x8>)
 800716a:	f000 b8a7 	b.w	80072bc <__retarget_lock_acquire_recursive>
 800716e:	bf00      	nop
 8007170:	200002c6 	.word	0x200002c6

08007174 <__sinit_lock_release>:
 8007174:	4801      	ldr	r0, [pc, #4]	; (800717c <__sinit_lock_release+0x8>)
 8007176:	f000 b8a2 	b.w	80072be <__retarget_lock_release_recursive>
 800717a:	bf00      	nop
 800717c:	200002c6 	.word	0x200002c6

08007180 <__sinit>:
 8007180:	b510      	push	{r4, lr}
 8007182:	4604      	mov	r4, r0
 8007184:	f7ff fff0 	bl	8007168 <__sinit_lock_acquire>
 8007188:	69a3      	ldr	r3, [r4, #24]
 800718a:	b11b      	cbz	r3, 8007194 <__sinit+0x14>
 800718c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007190:	f7ff bff0 	b.w	8007174 <__sinit_lock_release>
 8007194:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007198:	6523      	str	r3, [r4, #80]	; 0x50
 800719a:	4b13      	ldr	r3, [pc, #76]	; (80071e8 <__sinit+0x68>)
 800719c:	4a13      	ldr	r2, [pc, #76]	; (80071ec <__sinit+0x6c>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80071a2:	42a3      	cmp	r3, r4
 80071a4:	bf08      	it	eq
 80071a6:	2301      	moveq	r3, #1
 80071a8:	4620      	mov	r0, r4
 80071aa:	bf08      	it	eq
 80071ac:	61a3      	streq	r3, [r4, #24]
 80071ae:	f000 f81f 	bl	80071f0 <__sfp>
 80071b2:	6060      	str	r0, [r4, #4]
 80071b4:	4620      	mov	r0, r4
 80071b6:	f000 f81b 	bl	80071f0 <__sfp>
 80071ba:	60a0      	str	r0, [r4, #8]
 80071bc:	4620      	mov	r0, r4
 80071be:	f000 f817 	bl	80071f0 <__sfp>
 80071c2:	2200      	movs	r2, #0
 80071c4:	2104      	movs	r1, #4
 80071c6:	60e0      	str	r0, [r4, #12]
 80071c8:	6860      	ldr	r0, [r4, #4]
 80071ca:	f7ff ff81 	bl	80070d0 <std>
 80071ce:	2201      	movs	r2, #1
 80071d0:	2109      	movs	r1, #9
 80071d2:	68a0      	ldr	r0, [r4, #8]
 80071d4:	f7ff ff7c 	bl	80070d0 <std>
 80071d8:	2202      	movs	r2, #2
 80071da:	2112      	movs	r1, #18
 80071dc:	68e0      	ldr	r0, [r4, #12]
 80071de:	f7ff ff77 	bl	80070d0 <std>
 80071e2:	2301      	movs	r3, #1
 80071e4:	61a3      	str	r3, [r4, #24]
 80071e6:	e7d1      	b.n	800718c <__sinit+0xc>
 80071e8:	080075d8 	.word	0x080075d8
 80071ec:	08007119 	.word	0x08007119

080071f0 <__sfp>:
 80071f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f2:	4607      	mov	r7, r0
 80071f4:	f7ff ffac 	bl	8007150 <__sfp_lock_acquire>
 80071f8:	4b1e      	ldr	r3, [pc, #120]	; (8007274 <__sfp+0x84>)
 80071fa:	681e      	ldr	r6, [r3, #0]
 80071fc:	69b3      	ldr	r3, [r6, #24]
 80071fe:	b913      	cbnz	r3, 8007206 <__sfp+0x16>
 8007200:	4630      	mov	r0, r6
 8007202:	f7ff ffbd 	bl	8007180 <__sinit>
 8007206:	3648      	adds	r6, #72	; 0x48
 8007208:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800720c:	3b01      	subs	r3, #1
 800720e:	d503      	bpl.n	8007218 <__sfp+0x28>
 8007210:	6833      	ldr	r3, [r6, #0]
 8007212:	b30b      	cbz	r3, 8007258 <__sfp+0x68>
 8007214:	6836      	ldr	r6, [r6, #0]
 8007216:	e7f7      	b.n	8007208 <__sfp+0x18>
 8007218:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800721c:	b9d5      	cbnz	r5, 8007254 <__sfp+0x64>
 800721e:	4b16      	ldr	r3, [pc, #88]	; (8007278 <__sfp+0x88>)
 8007220:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007224:	60e3      	str	r3, [r4, #12]
 8007226:	6665      	str	r5, [r4, #100]	; 0x64
 8007228:	f000 f847 	bl	80072ba <__retarget_lock_init_recursive>
 800722c:	f7ff ff96 	bl	800715c <__sfp_lock_release>
 8007230:	2208      	movs	r2, #8
 8007232:	4629      	mov	r1, r5
 8007234:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007238:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800723c:	6025      	str	r5, [r4, #0]
 800723e:	61a5      	str	r5, [r4, #24]
 8007240:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007244:	f7fb fd62 	bl	8002d0c <memset>
 8007248:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800724c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007250:	4620      	mov	r0, r4
 8007252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007254:	3468      	adds	r4, #104	; 0x68
 8007256:	e7d9      	b.n	800720c <__sfp+0x1c>
 8007258:	2104      	movs	r1, #4
 800725a:	4638      	mov	r0, r7
 800725c:	f7ff ff62 	bl	8007124 <__sfmoreglue>
 8007260:	4604      	mov	r4, r0
 8007262:	6030      	str	r0, [r6, #0]
 8007264:	2800      	cmp	r0, #0
 8007266:	d1d5      	bne.n	8007214 <__sfp+0x24>
 8007268:	f7ff ff78 	bl	800715c <__sfp_lock_release>
 800726c:	230c      	movs	r3, #12
 800726e:	603b      	str	r3, [r7, #0]
 8007270:	e7ee      	b.n	8007250 <__sfp+0x60>
 8007272:	bf00      	nop
 8007274:	080075d8 	.word	0x080075d8
 8007278:	ffff0001 	.word	0xffff0001

0800727c <_fwalk_reent>:
 800727c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007280:	4606      	mov	r6, r0
 8007282:	4688      	mov	r8, r1
 8007284:	2700      	movs	r7, #0
 8007286:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800728a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800728e:	f1b9 0901 	subs.w	r9, r9, #1
 8007292:	d505      	bpl.n	80072a0 <_fwalk_reent+0x24>
 8007294:	6824      	ldr	r4, [r4, #0]
 8007296:	2c00      	cmp	r4, #0
 8007298:	d1f7      	bne.n	800728a <_fwalk_reent+0xe>
 800729a:	4638      	mov	r0, r7
 800729c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072a0:	89ab      	ldrh	r3, [r5, #12]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d907      	bls.n	80072b6 <_fwalk_reent+0x3a>
 80072a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072aa:	3301      	adds	r3, #1
 80072ac:	d003      	beq.n	80072b6 <_fwalk_reent+0x3a>
 80072ae:	4629      	mov	r1, r5
 80072b0:	4630      	mov	r0, r6
 80072b2:	47c0      	blx	r8
 80072b4:	4307      	orrs	r7, r0
 80072b6:	3568      	adds	r5, #104	; 0x68
 80072b8:	e7e9      	b.n	800728e <_fwalk_reent+0x12>

080072ba <__retarget_lock_init_recursive>:
 80072ba:	4770      	bx	lr

080072bc <__retarget_lock_acquire_recursive>:
 80072bc:	4770      	bx	lr

080072be <__retarget_lock_release_recursive>:
 80072be:	4770      	bx	lr

080072c0 <__swhatbuf_r>:
 80072c0:	b570      	push	{r4, r5, r6, lr}
 80072c2:	460e      	mov	r6, r1
 80072c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072c8:	4614      	mov	r4, r2
 80072ca:	2900      	cmp	r1, #0
 80072cc:	461d      	mov	r5, r3
 80072ce:	b096      	sub	sp, #88	; 0x58
 80072d0:	da08      	bge.n	80072e4 <__swhatbuf_r+0x24>
 80072d2:	2200      	movs	r2, #0
 80072d4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80072d8:	602a      	str	r2, [r5, #0]
 80072da:	061a      	lsls	r2, r3, #24
 80072dc:	d410      	bmi.n	8007300 <__swhatbuf_r+0x40>
 80072de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072e2:	e00e      	b.n	8007302 <__swhatbuf_r+0x42>
 80072e4:	466a      	mov	r2, sp
 80072e6:	f000 f903 	bl	80074f0 <_fstat_r>
 80072ea:	2800      	cmp	r0, #0
 80072ec:	dbf1      	blt.n	80072d2 <__swhatbuf_r+0x12>
 80072ee:	9a01      	ldr	r2, [sp, #4]
 80072f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80072f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80072f8:	425a      	negs	r2, r3
 80072fa:	415a      	adcs	r2, r3
 80072fc:	602a      	str	r2, [r5, #0]
 80072fe:	e7ee      	b.n	80072de <__swhatbuf_r+0x1e>
 8007300:	2340      	movs	r3, #64	; 0x40
 8007302:	2000      	movs	r0, #0
 8007304:	6023      	str	r3, [r4, #0]
 8007306:	b016      	add	sp, #88	; 0x58
 8007308:	bd70      	pop	{r4, r5, r6, pc}
	...

0800730c <__smakebuf_r>:
 800730c:	898b      	ldrh	r3, [r1, #12]
 800730e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007310:	079d      	lsls	r5, r3, #30
 8007312:	4606      	mov	r6, r0
 8007314:	460c      	mov	r4, r1
 8007316:	d507      	bpl.n	8007328 <__smakebuf_r+0x1c>
 8007318:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800731c:	6023      	str	r3, [r4, #0]
 800731e:	6123      	str	r3, [r4, #16]
 8007320:	2301      	movs	r3, #1
 8007322:	6163      	str	r3, [r4, #20]
 8007324:	b002      	add	sp, #8
 8007326:	bd70      	pop	{r4, r5, r6, pc}
 8007328:	466a      	mov	r2, sp
 800732a:	ab01      	add	r3, sp, #4
 800732c:	f7ff ffc8 	bl	80072c0 <__swhatbuf_r>
 8007330:	9900      	ldr	r1, [sp, #0]
 8007332:	4605      	mov	r5, r0
 8007334:	4630      	mov	r0, r6
 8007336:	f7ff f961 	bl	80065fc <_malloc_r>
 800733a:	b948      	cbnz	r0, 8007350 <__smakebuf_r+0x44>
 800733c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007340:	059a      	lsls	r2, r3, #22
 8007342:	d4ef      	bmi.n	8007324 <__smakebuf_r+0x18>
 8007344:	f023 0303 	bic.w	r3, r3, #3
 8007348:	f043 0302 	orr.w	r3, r3, #2
 800734c:	81a3      	strh	r3, [r4, #12]
 800734e:	e7e3      	b.n	8007318 <__smakebuf_r+0xc>
 8007350:	4b0d      	ldr	r3, [pc, #52]	; (8007388 <__smakebuf_r+0x7c>)
 8007352:	62b3      	str	r3, [r6, #40]	; 0x28
 8007354:	89a3      	ldrh	r3, [r4, #12]
 8007356:	6020      	str	r0, [r4, #0]
 8007358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800735c:	81a3      	strh	r3, [r4, #12]
 800735e:	9b00      	ldr	r3, [sp, #0]
 8007360:	6120      	str	r0, [r4, #16]
 8007362:	6163      	str	r3, [r4, #20]
 8007364:	9b01      	ldr	r3, [sp, #4]
 8007366:	b15b      	cbz	r3, 8007380 <__smakebuf_r+0x74>
 8007368:	4630      	mov	r0, r6
 800736a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800736e:	f000 f8d1 	bl	8007514 <_isatty_r>
 8007372:	b128      	cbz	r0, 8007380 <__smakebuf_r+0x74>
 8007374:	89a3      	ldrh	r3, [r4, #12]
 8007376:	f023 0303 	bic.w	r3, r3, #3
 800737a:	f043 0301 	orr.w	r3, r3, #1
 800737e:	81a3      	strh	r3, [r4, #12]
 8007380:	89a0      	ldrh	r0, [r4, #12]
 8007382:	4305      	orrs	r5, r0
 8007384:	81a5      	strh	r5, [r4, #12]
 8007386:	e7cd      	b.n	8007324 <__smakebuf_r+0x18>
 8007388:	08007119 	.word	0x08007119

0800738c <_malloc_usable_size_r>:
 800738c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007390:	1f18      	subs	r0, r3, #4
 8007392:	2b00      	cmp	r3, #0
 8007394:	bfbc      	itt	lt
 8007396:	580b      	ldrlt	r3, [r1, r0]
 8007398:	18c0      	addlt	r0, r0, r3
 800739a:	4770      	bx	lr

0800739c <_raise_r>:
 800739c:	291f      	cmp	r1, #31
 800739e:	b538      	push	{r3, r4, r5, lr}
 80073a0:	4604      	mov	r4, r0
 80073a2:	460d      	mov	r5, r1
 80073a4:	d904      	bls.n	80073b0 <_raise_r+0x14>
 80073a6:	2316      	movs	r3, #22
 80073a8:	6003      	str	r3, [r0, #0]
 80073aa:	f04f 30ff 	mov.w	r0, #4294967295
 80073ae:	bd38      	pop	{r3, r4, r5, pc}
 80073b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80073b2:	b112      	cbz	r2, 80073ba <_raise_r+0x1e>
 80073b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80073b8:	b94b      	cbnz	r3, 80073ce <_raise_r+0x32>
 80073ba:	4620      	mov	r0, r4
 80073bc:	f000 f830 	bl	8007420 <_getpid_r>
 80073c0:	462a      	mov	r2, r5
 80073c2:	4601      	mov	r1, r0
 80073c4:	4620      	mov	r0, r4
 80073c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073ca:	f000 b817 	b.w	80073fc <_kill_r>
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d00a      	beq.n	80073e8 <_raise_r+0x4c>
 80073d2:	1c59      	adds	r1, r3, #1
 80073d4:	d103      	bne.n	80073de <_raise_r+0x42>
 80073d6:	2316      	movs	r3, #22
 80073d8:	6003      	str	r3, [r0, #0]
 80073da:	2001      	movs	r0, #1
 80073dc:	e7e7      	b.n	80073ae <_raise_r+0x12>
 80073de:	2400      	movs	r4, #0
 80073e0:	4628      	mov	r0, r5
 80073e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80073e6:	4798      	blx	r3
 80073e8:	2000      	movs	r0, #0
 80073ea:	e7e0      	b.n	80073ae <_raise_r+0x12>

080073ec <raise>:
 80073ec:	4b02      	ldr	r3, [pc, #8]	; (80073f8 <raise+0xc>)
 80073ee:	4601      	mov	r1, r0
 80073f0:	6818      	ldr	r0, [r3, #0]
 80073f2:	f7ff bfd3 	b.w	800739c <_raise_r>
 80073f6:	bf00      	nop
 80073f8:	2000000c 	.word	0x2000000c

080073fc <_kill_r>:
 80073fc:	b538      	push	{r3, r4, r5, lr}
 80073fe:	2300      	movs	r3, #0
 8007400:	4d06      	ldr	r5, [pc, #24]	; (800741c <_kill_r+0x20>)
 8007402:	4604      	mov	r4, r0
 8007404:	4608      	mov	r0, r1
 8007406:	4611      	mov	r1, r2
 8007408:	602b      	str	r3, [r5, #0]
 800740a:	f7f9 fdf1 	bl	8000ff0 <_kill>
 800740e:	1c43      	adds	r3, r0, #1
 8007410:	d102      	bne.n	8007418 <_kill_r+0x1c>
 8007412:	682b      	ldr	r3, [r5, #0]
 8007414:	b103      	cbz	r3, 8007418 <_kill_r+0x1c>
 8007416:	6023      	str	r3, [r4, #0]
 8007418:	bd38      	pop	{r3, r4, r5, pc}
 800741a:	bf00      	nop
 800741c:	200002c0 	.word	0x200002c0

08007420 <_getpid_r>:
 8007420:	f7f9 bddf 	b.w	8000fe2 <_getpid>

08007424 <__sread>:
 8007424:	b510      	push	{r4, lr}
 8007426:	460c      	mov	r4, r1
 8007428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800742c:	f000 f894 	bl	8007558 <_read_r>
 8007430:	2800      	cmp	r0, #0
 8007432:	bfab      	itete	ge
 8007434:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007436:	89a3      	ldrhlt	r3, [r4, #12]
 8007438:	181b      	addge	r3, r3, r0
 800743a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800743e:	bfac      	ite	ge
 8007440:	6563      	strge	r3, [r4, #84]	; 0x54
 8007442:	81a3      	strhlt	r3, [r4, #12]
 8007444:	bd10      	pop	{r4, pc}

08007446 <__swrite>:
 8007446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800744a:	461f      	mov	r7, r3
 800744c:	898b      	ldrh	r3, [r1, #12]
 800744e:	4605      	mov	r5, r0
 8007450:	05db      	lsls	r3, r3, #23
 8007452:	460c      	mov	r4, r1
 8007454:	4616      	mov	r6, r2
 8007456:	d505      	bpl.n	8007464 <__swrite+0x1e>
 8007458:	2302      	movs	r3, #2
 800745a:	2200      	movs	r2, #0
 800745c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007460:	f000 f868 	bl	8007534 <_lseek_r>
 8007464:	89a3      	ldrh	r3, [r4, #12]
 8007466:	4632      	mov	r2, r6
 8007468:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800746c:	81a3      	strh	r3, [r4, #12]
 800746e:	4628      	mov	r0, r5
 8007470:	463b      	mov	r3, r7
 8007472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800747a:	f000 b817 	b.w	80074ac <_write_r>

0800747e <__sseek>:
 800747e:	b510      	push	{r4, lr}
 8007480:	460c      	mov	r4, r1
 8007482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007486:	f000 f855 	bl	8007534 <_lseek_r>
 800748a:	1c43      	adds	r3, r0, #1
 800748c:	89a3      	ldrh	r3, [r4, #12]
 800748e:	bf15      	itete	ne
 8007490:	6560      	strne	r0, [r4, #84]	; 0x54
 8007492:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007496:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800749a:	81a3      	strheq	r3, [r4, #12]
 800749c:	bf18      	it	ne
 800749e:	81a3      	strhne	r3, [r4, #12]
 80074a0:	bd10      	pop	{r4, pc}

080074a2 <__sclose>:
 80074a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074a6:	f000 b813 	b.w	80074d0 <_close_r>
	...

080074ac <_write_r>:
 80074ac:	b538      	push	{r3, r4, r5, lr}
 80074ae:	4604      	mov	r4, r0
 80074b0:	4608      	mov	r0, r1
 80074b2:	4611      	mov	r1, r2
 80074b4:	2200      	movs	r2, #0
 80074b6:	4d05      	ldr	r5, [pc, #20]	; (80074cc <_write_r+0x20>)
 80074b8:	602a      	str	r2, [r5, #0]
 80074ba:	461a      	mov	r2, r3
 80074bc:	f7f9 fdcf 	bl	800105e <_write>
 80074c0:	1c43      	adds	r3, r0, #1
 80074c2:	d102      	bne.n	80074ca <_write_r+0x1e>
 80074c4:	682b      	ldr	r3, [r5, #0]
 80074c6:	b103      	cbz	r3, 80074ca <_write_r+0x1e>
 80074c8:	6023      	str	r3, [r4, #0]
 80074ca:	bd38      	pop	{r3, r4, r5, pc}
 80074cc:	200002c0 	.word	0x200002c0

080074d0 <_close_r>:
 80074d0:	b538      	push	{r3, r4, r5, lr}
 80074d2:	2300      	movs	r3, #0
 80074d4:	4d05      	ldr	r5, [pc, #20]	; (80074ec <_close_r+0x1c>)
 80074d6:	4604      	mov	r4, r0
 80074d8:	4608      	mov	r0, r1
 80074da:	602b      	str	r3, [r5, #0]
 80074dc:	f7f9 fddb 	bl	8001096 <_close>
 80074e0:	1c43      	adds	r3, r0, #1
 80074e2:	d102      	bne.n	80074ea <_close_r+0x1a>
 80074e4:	682b      	ldr	r3, [r5, #0]
 80074e6:	b103      	cbz	r3, 80074ea <_close_r+0x1a>
 80074e8:	6023      	str	r3, [r4, #0]
 80074ea:	bd38      	pop	{r3, r4, r5, pc}
 80074ec:	200002c0 	.word	0x200002c0

080074f0 <_fstat_r>:
 80074f0:	b538      	push	{r3, r4, r5, lr}
 80074f2:	2300      	movs	r3, #0
 80074f4:	4d06      	ldr	r5, [pc, #24]	; (8007510 <_fstat_r+0x20>)
 80074f6:	4604      	mov	r4, r0
 80074f8:	4608      	mov	r0, r1
 80074fa:	4611      	mov	r1, r2
 80074fc:	602b      	str	r3, [r5, #0]
 80074fe:	f7f9 fdd5 	bl	80010ac <_fstat>
 8007502:	1c43      	adds	r3, r0, #1
 8007504:	d102      	bne.n	800750c <_fstat_r+0x1c>
 8007506:	682b      	ldr	r3, [r5, #0]
 8007508:	b103      	cbz	r3, 800750c <_fstat_r+0x1c>
 800750a:	6023      	str	r3, [r4, #0]
 800750c:	bd38      	pop	{r3, r4, r5, pc}
 800750e:	bf00      	nop
 8007510:	200002c0 	.word	0x200002c0

08007514 <_isatty_r>:
 8007514:	b538      	push	{r3, r4, r5, lr}
 8007516:	2300      	movs	r3, #0
 8007518:	4d05      	ldr	r5, [pc, #20]	; (8007530 <_isatty_r+0x1c>)
 800751a:	4604      	mov	r4, r0
 800751c:	4608      	mov	r0, r1
 800751e:	602b      	str	r3, [r5, #0]
 8007520:	f7f9 fdd3 	bl	80010ca <_isatty>
 8007524:	1c43      	adds	r3, r0, #1
 8007526:	d102      	bne.n	800752e <_isatty_r+0x1a>
 8007528:	682b      	ldr	r3, [r5, #0]
 800752a:	b103      	cbz	r3, 800752e <_isatty_r+0x1a>
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	bd38      	pop	{r3, r4, r5, pc}
 8007530:	200002c0 	.word	0x200002c0

08007534 <_lseek_r>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4604      	mov	r4, r0
 8007538:	4608      	mov	r0, r1
 800753a:	4611      	mov	r1, r2
 800753c:	2200      	movs	r2, #0
 800753e:	4d05      	ldr	r5, [pc, #20]	; (8007554 <_lseek_r+0x20>)
 8007540:	602a      	str	r2, [r5, #0]
 8007542:	461a      	mov	r2, r3
 8007544:	f7f9 fdcb 	bl	80010de <_lseek>
 8007548:	1c43      	adds	r3, r0, #1
 800754a:	d102      	bne.n	8007552 <_lseek_r+0x1e>
 800754c:	682b      	ldr	r3, [r5, #0]
 800754e:	b103      	cbz	r3, 8007552 <_lseek_r+0x1e>
 8007550:	6023      	str	r3, [r4, #0]
 8007552:	bd38      	pop	{r3, r4, r5, pc}
 8007554:	200002c0 	.word	0x200002c0

08007558 <_read_r>:
 8007558:	b538      	push	{r3, r4, r5, lr}
 800755a:	4604      	mov	r4, r0
 800755c:	4608      	mov	r0, r1
 800755e:	4611      	mov	r1, r2
 8007560:	2200      	movs	r2, #0
 8007562:	4d05      	ldr	r5, [pc, #20]	; (8007578 <_read_r+0x20>)
 8007564:	602a      	str	r2, [r5, #0]
 8007566:	461a      	mov	r2, r3
 8007568:	f7f9 fd5c 	bl	8001024 <_read>
 800756c:	1c43      	adds	r3, r0, #1
 800756e:	d102      	bne.n	8007576 <_read_r+0x1e>
 8007570:	682b      	ldr	r3, [r5, #0]
 8007572:	b103      	cbz	r3, 8007576 <_read_r+0x1e>
 8007574:	6023      	str	r3, [r4, #0]
 8007576:	bd38      	pop	{r3, r4, r5, pc}
 8007578:	200002c0 	.word	0x200002c0

0800757c <_init>:
 800757c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757e:	bf00      	nop
 8007580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007582:	bc08      	pop	{r3}
 8007584:	469e      	mov	lr, r3
 8007586:	4770      	bx	lr

08007588 <_fini>:
 8007588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758a:	bf00      	nop
 800758c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800758e:	bc08      	pop	{r3}
 8007590:	469e      	mov	lr, r3
 8007592:	4770      	bx	lr
